bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  '.')  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  }	  if(c!=    '.')    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
2	[BUG]  [BUGGY]  int  lastHold  =  pos.getIndex()  -  c.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pos.getIndex()  -  c.length()  +  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pos.getIndex()  -  c.length()  +  1;	  int    lastHold    =    pos.getIndex()    -    c.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
3	[BUG]  [BUGGY]  int  lastHold  =  c.getIndex()  -  pos.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c.getIndex()  -  pos.length();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c.getIndex()  -  pos.length();	  int    lastHold    =    pos.getIndex()    -    c.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
4	[BUG]  [BUGGY]  int  lastHold  =  pos.getIndex()  -  pattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pos.getIndex()  -  pattern.length();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pos.getIndex()  -  pattern.length();	  int    lastHold    =    pos.getIndex()    -    c.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
5	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex(),  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex(),  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(pos.getIndex(),  start);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
6	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex()  +  1);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
7	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos,  start.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(pos,  start.getIndex());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(pos,  start.getIndex());	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
8	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '.')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  '.')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  '.')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(c!=    '.')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
10	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.',  0));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.',  0));  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.indexOf('.',  0));	  char    c    =    pattern.substring(start,    pos.indexOf('.'));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
11	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.')+  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.')+  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.indexOf('.')+  1);	  char    c    =    pattern.substring(start,    pos.indexOf('.'));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
12	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.lastIndexOf('.'));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.lastIndexOf('.'));  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.lastIndexOf('.'));	  char    c    =    pattern.substring(start,    pos.indexOf('.'));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
13	[BUG]  [BUGGY]  char  c  =  pattern.substring(0,  pos.indexOf('.'));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(0,  pos.indexOf('.'));  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(0,  pos.indexOf('.'));	  char    c    =    pattern.substring(start,    pos.indexOf('.'));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
14	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex());  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex());  continue;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex());  continue;	  if(c!=    'n'    ||    c    ==    'r')    {    appendTo.append(c,    start,    pos.getIndex());    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
15	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  appendTo.append(c,  start,  pos.getIndex());  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  appendTo.append(c,  start,  pos.getIndex());  continue;  }  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  appendTo.append(c,  start,  pos.getIndex());  continue;  }	  if(c!=    'n'    ||    c    ==    'r')    {    appendTo.append(c,    start,    pos.getIndex());    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
16	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  1);	  char    c    =    pattern.toCharArray(start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
17	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  2);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  2);	  char    c    =    pattern.toCharArray(start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
18	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  3);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  3);	  char    c    =    pattern.toCharArray(start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
19	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  4);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  4);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  4);	  char    c    =    pattern.toCharArray(start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
20	[BUG]  [BUGGY]  appendTo.append(c,  start,  p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  p.getIndex());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  p.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
21	[BUG]  [BUGGY]  pos.setIndex(i  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  2);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  2);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
22	[BUG]  [BUGGY]  pos.setIndex(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(start  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(start  +  1);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
23	[BUG]  [BUGGY]  pos.setIndex(i  +  1,  c.length);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  1,  c.length);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  1,  c.length);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
24	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray(pos);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
25	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(i);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray(i);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
26	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(0,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(0,  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray(0,  start);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
27	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(start,  pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray(start,  pos);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
28	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  *  start;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray()  *  start;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray()  *  start;	  char[]    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
29	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  lastHold;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray()  +  lastHold;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray()  +  lastHold;	  char[]    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
30	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[start]  ==  START_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[start]  ==  START_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[start]  ==  START_FE)  {	  if(escapingOn    &&    c[start]    ==    START_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
31	[BUG]  [BUGGY]  if(escapingOn  ||  c[start]  ==  START_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[start]  ==  START_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[start]  ==  START_FE)  {	  if(escapingOn    &&    c[start]    ==    START_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
32	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  2);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  2);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
33	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  ESCAPED_QUOTE);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  ESCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
34	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  *  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  c.length()  *  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  c.length()  *  start);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
35	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  -  lastHold);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  c.length()  -  lastHold);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  c.length()  -  lastHold);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
36	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  i);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  i);	  char    c    =    pattern.toCharArray(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
37	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(i  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(i  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(i  +  1);	  char    c    =    pattern.toCharArray(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
38	[BUG]  [BUGGY]  char  c  =  pattern.substring(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start);	  char    c    =    pattern.toCharArray(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
39	[BUG]  [BUGGY]  if(escapingOn  ||  pattern[start]!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  pattern[start]!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  pattern[start]!=  QUOTE)  {	  if(escapingOn    ||    pattern[start]    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
40	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  +  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  +  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  +  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
41	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(start,  pos.length());	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
42	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length()  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(start,  pos.length()  +  1);	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
43	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(0,  pos.length()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(0,  pos.length()  -  1);	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
44	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos,  start.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(pos,  start.length()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(pos,  start.length()  -  1);	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
45	[BUG]  [BUGGY]  if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }	  if(pattern!=    null)    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
46	[BUG]  [BUGGY]  if(c  ==  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }	  if(pattern!=    null)    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
47	[BUG]  [BUGGY]  if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  }	  if(pattern!=    null)    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
48	[BUG]  [BUGGY]  pos.setIndex(i  +  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  pattern.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  pattern.length());	  pos.setIndex(i    +    c.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
49	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[start]  ==  START_FMT)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[start]  ==  START_FMT)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[start]  ==  START_FMT)  {	  if(escapingOn    &&    c[start]    ==    START_FMT)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
50	[BUG]  [BUGGY]  if(escapingOn  ||  c[start]  ==  START_FMT)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[start]  ==  START_FMT)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[start]  ==  START_FMT)  {	  if(escapingOn    &&    c[start]    ==    START_FMT)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
51	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(pos  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(pos  +  1);	  char    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
52	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(pos,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(pos,  escapingOn);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(pos,  escapingOn);	  char    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
53	[BUG]  [BUGGY]  if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(pattern!=    null)    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
54	[BUG]  [BUGGY]  if(c  ==  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  null)  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(pattern!=    null)    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
55	[BUG]  [BUGGY]  if(escapingOn  ||  pattern[start]!=  END_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  pattern[start]!=  END_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  pattern[start]!=  END_FE)  {	  if(escapingOn    ||    c[start]!=    END_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
56	[BUG]  [BUGGY]  if(escapingOn  ||  c[start]!=  START_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[start]!=  START_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[start]!=  START_FE)  {	  if(escapingOn    ||    c[start]!=    END_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
57	[BUG]  [BUGGY]  if(c!=  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(pattern!=    null)    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
58	[BUG]  [BUGGY]  if(escapingOn)  {  if(pattern!=  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn)  {  if(pattern!=  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn)  {  if(pattern!=  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(pattern!=    null)    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
59	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  eCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  eCAPED_QUOTE.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  eCAPED_QUOTE.length());	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
60	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  pattern.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  pattern.length());	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
61	[BUG]  [BUGGY]  char  c  =  pattern.charAt(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.charAt(i);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.charAt(i);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
62	[BUG]  [BUGGY]  char  c  =  pattern.charAt(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.charAt(start  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.charAt(start  +  1);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
63	[BUG]  [BUGGY]  char  c  =  pattern.charAt(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.charAt(pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.charAt(pos);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
64	[BUG]  [BUGGY]  char  c  =  pattern.charAt(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.charAt(start,  pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.charAt(start,  pos);	  char    c    =    pattern.charAt(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
65	[BUG]  [BUGGY]  int  lastHold  =  pos.getIndex()  -  c.length  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pos.getIndex()  -  c.length  +  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pos.getIndex()  -  c.length  +  1;	  int    lastHold    =    pos.getIndex()    -    c.length;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
66	[BUG]  [BUGGY]  int  lastHold  =  c.getIndex()  -  pos.length;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c.getIndex()  -  pos.length;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c.getIndex()  -  pos.length;	  int    lastHold    =    pos.getIndex()    -    c.length;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
67	[BUG]  [BUGGY]  int  lastHold  =  pos.getIndex()  -  c.length  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pos.getIndex()  -  c.length  -  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pos.getIndex()  -  c.length  -  1;	  int    lastHold    =    pos.getIndex()    -    c.length;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
68	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  CSCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  CSCAPED_QUOTE);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  CSCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    CSCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
69	[BUG]  [BUGGY]  int  lastHold  =  pos.getIndex()  +  c.length  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pos.getIndex()  +  c.length  -  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pos.getIndex()  +  c.length  -  1;	  int    lastHold    =    pos.getIndex()    +    c.length;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
70	[BUG]  [BUGGY]  int  lastHold  =  pos.getIndex()  +  c.length  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pos.getIndex()  +  c.length  +  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pos.getIndex()  +  c.length  +  1;	  int    lastHold    =    pos.getIndex()    +    c.length;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
71	[BUG]  [BUGGY]  int  lastHold  =  pos.getIndex()  +  c.length  -  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pos.getIndex()  +  c.length  -  2;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pos.getIndex()  +  c.length  -  2;	  int    lastHold    =    pos.getIndex()    +    c.length;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
72	[BUG]  [BUGGY]  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue;	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
73	[BUG]  [BUGGY]  if(escapingOn  &&  c[i]  ==  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  c[i]  ==  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  c[i]  ==  QUOTE)  {	  if(escapingOn    ||    c[i]    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
74	[BUG]  [BUGGY]  if(escapingOn  ||  pattern[i]  ==  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  pattern[i]  ==  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  pattern[i]  ==  QUOTE)  {	  if(escapingOn    ||    c[i]    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
75	[BUG]  [BUGGY]  if(escapingOn  ||  c[i]  ==  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[i]  ==  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[i]  ==  ESCAPED_QUOTE)  {	  if(escapingOn    ||    c[i]    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
76	[BUG]  [BUGGY]  appendTo.append(c,  start,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  i);  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  i);	  if(c!=    'n'    ||    c    ==    'r')    {    appendTo.append(c,    start,    i);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
77	[BUG]  [BUGGY]  appendTo.append(c,  start,  i);  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  i);  continue;  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  i);  continue;	  if(c!=    'n'    ||    c    ==    'r')    {    appendTo.append(c,    start,    i);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
78	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  appendTo.append(c,  start,  i);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  appendTo.append(c,  start,  i);  continue;  }  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  appendTo.append(c,  start,  i);  continue;  }	  if(c!=    'n'    ||    c    ==    'r')    {    appendTo.append(c,    start,    i);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
79	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[i]  ==  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[i]  ==  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[i]  ==  ESCAPED_QUOTE)  {	  if(escapingOn    &&    c[i]    ==    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
80	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[i]!=  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[i]!=  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[i]!=  ESCAPED_QUOTE)  {	  if(escapingOn    &&    c[i]    ==    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
81	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  pos  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  pos  +  1);	  char    c    =    pattern.toCharArray(start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
82	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(pos,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(pos,  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(pos,  start);	  char    c    =    pattern.toCharArray(start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
83	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  pos  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  pos  +  2);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  pos  +  2);	  char    c    =    pattern.toCharArray(start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
84	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  pos  +  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  pos  +  3);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  pos  +  3);	  char    c    =    pattern.toCharArray(start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
85	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[start]!=  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[start]!=  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[start]!=  ESCAPED_QUOTE)  {	  if(escapingOn    &&    pattern[start]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
86	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[i]!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[i]!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[i]!=  QUOTE)  {	  if(escapingOn    &&    pattern[start]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
87	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  '.')  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  '.')  {  if(escapingOn  &&  pattern.charAt(i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(c!=    '.')    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
88	[BUG]  [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.charAt(i)  ==  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.charAt(i)  ==  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  '.')  {  if(escapingOn  &&  pattern.charAt(i)  ==  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(c!=    '.')    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
89	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.getIndex());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
90	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pos.getIndex()  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pos.getIndex()  +  1);	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
91	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  c.getIndex());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  c.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
92	[BUG]  [BUGGY]  String  c  =  pattern.substring(start,  pos.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  c  =  pattern.substring(start,  pos.getIndex());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	String  c  =  pattern.substring(start,  pos.getIndex());	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
93	[BUG]  [BUGGY]  String  c  =  pattern.toCharArray()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  c  =  pattern.toCharArray()  +  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	String  c  =  pattern.toCharArray()  +  1;	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
94	[BUG]  [BUGGY]  pos.setIndex(start  +  c.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(start  +  c.length()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(start  +  c.length()  -  1);	  pos.setIndex(start    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
95	[BUG]  [BUGGY]  pos.setIndex(start  +  c.length()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(start  +  c.length()  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(start  +  c.length()  +  1);	  pos.setIndex(start    +    c.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
96	[BUG]  [BUGGY]  char  c  =  pattern.toCharBuffer(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharBuffer(start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharBuffer(start);	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
97	[BUG]  [BUGGY]  char  c  =  pattern.toCharBuffer(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharBuffer(pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharBuffer(pos);	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
98	[BUG]  [BUGGY]  String  c  =  pattern.toCharBuffer();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  c  =  pattern.toCharBuffer();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	String  c  =  pattern.toCharBuffer();	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
99	[BUG]  [BUGGY]  pos.setIndex(i  +  1,  c.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  1,  c.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  1,  c.length());	  pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
100	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[start]!=  START_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[start]!=  START_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[start]!=  START_FE)  {	  if(escapingOn    &&    pattern[start]    ==    END_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
101	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(0,  start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(0,  start  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(0,  start  +  1);	  char    c    =    pattern.toCharArray(0,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
102	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(0,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(0,  pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(0,  pos);	  char    c    =    pattern.toCharArray(0,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
103	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(0,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(0,  i);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(0,  i);	  char    c    =    pattern.toCharArray(0,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
104	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(0,  lastHold);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(0,  lastHold);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(0,  lastHold);	  char    c    =    pattern.toCharArray(0,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
105	[BUG]  [BUGGY]  int  lastHold  =  start.getIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  start.getIndex()  +  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  start.getIndex()  +  1;	  int    lastHold    =    pos.getIndex()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
106	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(i)  ==  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(i)  ==  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(i)  ==  QUOTE)  {	  if(escapingOn    &&    pattern.charAt(start)    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
107	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(start  +  1)  ==  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(start  +  1)  ==  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(start  +  1)  ==  QUOTE)  {	  if(escapingOn    &&    pattern.charAt(start)    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
108	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(start)!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(start)!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(start)!=  QUOTE)  {	  if(escapingOn    &&    pattern.charAt(start)    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
109	[BUG]  [BUGGY]  if(escapingOn  &&  c  ==  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  c  ==  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  c  ==  QUOTE)  {	  if(escapingOn    ||    c    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
110	[BUG]  [BUGGY]  if(escapingOn  ||  c  ==  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c  ==  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c  ==  ESCAPED_QUOTE)  {	  if(escapingOn    ||    c    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
111	[BUG]  [BUGGY]  if(escapingOn  ||  c  ==  QUOTE  ||  c  ==  END_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c  ==  QUOTE  ||  c  ==  END_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c  ==  QUOTE  ||  c  ==  END_FE)  {	  if(escapingOn    ||    c    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
112	[BUG]  [BUGGY]  if(escapingOn  ||  pattern[start]  ==  END_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  pattern[start]  ==  END_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  pattern[start]  ==  END_FE)  {	  if(escapingOn    ||    c[start]    ==    END_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
113	[BUG]  [BUGGY]  char[]  c  =  pattern.toString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toString();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toString();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
114	[BUG]  [BUGGY]  char[]  c  =  Pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  Pattern.toCharArray();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  Pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
115	[BUG]  [BUGGY]  if(escapingOn  &&  c[i]!=  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  c[i]!=  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  c[i]!=  ESCAPED_QUOTE)  {	  if(escapingOn    &&    c[i]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
116	[BUG]  [BUGGY]  if(escapingOn  ||  c[i]!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[i]!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[i]!=  QUOTE)  {	  if(escapingOn    &&    c[i]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
117	[BUG]  [BUGGY]  if(escapingOn  &&  c[i]!=  START_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  c[i]!=  START_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  c[i]!=  START_FE)  {	  if(escapingOn    &&    c[i]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
118	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(QUOTE);  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(QUOTE);  continue;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(QUOTE);  continue;	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
119	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(QUOTE);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
120	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE);  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE);  continue;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  ESCAPED_QUOTE);  continue;	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
121	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  +  1);	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
122	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  p.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  p.getIndex());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  p.getIndex());	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
123	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(pos.getIndex()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(pos.getIndex()  -  1);	  char[]    c    =    pattern.substring(start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
124	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(pos,  start.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(pos,  start.getIndex()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(pos,  start.getIndex()  -  1);	  char[]    c    =    pattern.substring(start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
125	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  i);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  i);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
126	[BUG]  [BUGGY]  if(escapingOn  ||  c[start]!=  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[start]!=  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[start]!=  ESCAPED_QUOTE)  {	  if(escapingOn    &&    c[start]!=    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
127	[BUG]  [BUGGY]  int  lastHold  =  c.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c.length();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c.length();	  int    lastHold    =    c.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
128	[BUG]  [BUGGY]  int  lastHold  =  c.getIndex()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c.getIndex()  +  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c.getIndex()  +  1;	  int    lastHold    =    c.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
129	[BUG]  [BUGGY]  int  lastHold  =  pattern.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  pattern.getIndex();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  pattern.getIndex();	  int    lastHold    =    c.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
130	[BUG]  [BUGGY]  if(escapingOn  ||  pattern[start]  ==  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  pattern[start]  ==  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  pattern[start]  ==  ESCAPED_QUOTE)  {	  if(escapingOn    &&    pattern[start]    ==    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
131	[BUG]  [BUGGY]  pos.setIndex(i  +  1);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  1);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  1);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length());    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
132	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  -  1);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  c.length()  -  1);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  c.length()  -  1);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length());    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
133	[BUG]  [BUGGY]  pos.setIndex(i  +  2);  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  2);  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  2);  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length());    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
134	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.getIndex()  +  1);	  char    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
135	[BUG]  [BUGGY]  char  c  =  pattern.substring(pos.getIndex(),  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(pos.getIndex(),  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(pos.getIndex(),  start);	  char    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
136	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.getIndex()  -  1);	  char    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
137	[BUG]  [BUGGY]  char  c  =  pattern.substring(pos,  start.getIndex());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(pos,  start.getIndex());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(pos,  start.getIndex());	  char    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
138	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[start]!=  START_FMT)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[start]!=  START_FMT)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[start]!=  START_FMT)  {	  if(escapingOn    &&    c[start]!=    START_FMT)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
139	[BUG]  [BUGGY]  if(escapingOn  ||  c[start]!=  START_FMT)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[start]!=  START_FMT)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[start]!=  START_FMT)  {	  if(escapingOn    &&    c[start]!=    START_FMT)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
140	[BUG]  [BUGGY]  appendTo.append(c,  start,  pattern.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pattern.getIndex()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pattern.getIndex()  -  1);	  appendTo.append(c,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
141	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex();	  appendTo.append(c,    start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
142	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(ESCAPED_QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(ESCAPED_QUOTE);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(ESCAPED_QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
143	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  lastHold).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  +  lastHold).append(QUOTE);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  +  lastHold).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
144	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start  +  1,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start  +  1,  escapingOn);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start  +  1,  escapingOn);	  char    c    =    pattern.toCharArray(start    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
145	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  start  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  start  +  1);	  char    c    =    pattern.toCharArray(start    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
146	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharBuffer(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharBuffer(start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharBuffer(start);	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
147	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharBuffer(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharBuffer(pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharBuffer(pos);	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
148	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[0]  ==  QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[0]  ==  QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[0]  ==  QUOTE))  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
149	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[i]  ==  QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[i]  ==  QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[i]  ==  QUOTE))  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
150	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]).length()  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]).length()  ==  0)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[start]).length()  ==  0)  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
151	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[i]  {  QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[i]  {  QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[i]  {  QUOTE))  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
152	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
153	[BUG]  [BUGGY]  int  lastHold  =  c.length;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c.length;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c.length;	  int    lastHold    =    c.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
154	[BUG]  [BUGGY]  int  lastHold  =  c!=  null?  0  :  c.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c!=  null?  0  :  c.getIndex();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c!=  null?  0  :  c.getIndex();	  int    lastHold    =    c.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
155	[BUG]  [BUGGY]  int  lastHold  =  c!=  null?  -1  :  c.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c!=  null?  -1  :  c.getIndex();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c!=  null?  -1  :  c.getIndex();	  int    lastHold    =    c.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
156	[BUG]  [BUGGY]  char  c  =  pattern.toCharString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharString();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharString();	  char    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
157	[BUG]  [BUGGY]  if(escapingOn  &&  c[i]  ==  END_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  c[i]  ==  END_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  c[i]  ==  END_FE)  {	  if(escapingOn    &&    c[i]    ==    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
158	[BUG]  [BUGGY]  if(escapingOn  &&  c[i]  ==  START_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  c[i]  ==  START_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  c[i]  ==  START_FE)  {	  if(escapingOn    &&    c[i]    ==    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
159	[BUG]  [BUGGY]  appendTo.setIndex(i  +  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.setIndex(i  +  ESCAPED_QUOTE.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.setIndex(i  +  ESCAPED_QUOTE.length());	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
160	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1);  pos.setIndex(i  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1);  pos.setIndex(i  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  1);  pos.setIndex(i  +  1);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
161	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  -  start,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  c.length()  -  start,  escapingOn);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  c.length()  -  start,  escapingOn);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
162	[BUG]  [BUGGY]  pos.setIndex(i  +  c.length()  -  start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  c.length()  -  start  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  c.length()  -  start  +  1);	  pos.setIndex(i    +    c.length()    -    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
163	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length())+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.length())+  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(start,  pos.length())+  1;	  char[]    c    =    pattern.substring(start,    pos.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
164	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  2);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex()  -  2);	  char[]    c    =    pattern.substring(start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
165	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  4);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  4);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  4);	  appendTo.append(c,    start,    pos.getIndex()    -    ESCAPED_QUOTE);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
166	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(0,  start  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(0,  start  +  2);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(0,  start  +  2);	  char    c    =    pattern.toCharArray(0,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
167	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(0,  start  +  3);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(0,  start  +  3);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(0,  start  +  3);	  char    c    =    pattern.toCharArray(0,    start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
168	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  0L);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  0L);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  0L);	  char    c    =    pattern.toCharArray(start,    0);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
169	[BUG]  [BUGGY]  pos.setIndex(i  +  1,  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  1,  c);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  1,  c);	  pos.setIndex(i    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
170	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharString();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharString();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharString();	  char[]    c    =    pattern.toCharBuffer();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
171	[BUG]  [BUGGY]  int  lastHold  =  start.getIndex()  -  c.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  start.getIndex()  -  c.length();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  start.getIndex()  -  c.length();	  int    lastHold    =    pos.getIndex()    -    c.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
172	[BUG]  [BUGGY]  pos.setIndex(start  +  c.length());  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(start  +  c.length());  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(start  +  c.length());  lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length());    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
173	[BUG]  [BUGGY]  lastHold  =  pos.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  lastHold  =  pos.getIndex();  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	lastHold  =  pos.getIndex();	  pos.setIndex(i    +    c.length());    lastHold    =    pos.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
174	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1);  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1);  continue;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  1);  continue;	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
175	[BUG]  [BUGGY]  char[]  c  =  pattern.toCHARArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCHARArray();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCHARArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
176	[BUG]  [BUGGY]  if(escapingOn  ||  c[i]  ==  END_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c[i]  ==  END_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c[i]  ==  END_FE)  {	  if(escapingOn    ||    c[i]    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
177	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(start)  ==  '-')  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(start)  ==  '-')  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(start)  ==  '-')  {	  if(escapingOn    &&    pattern.charAt(start)    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
178	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex()  -  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex()  -  start);	  char[]    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
179	[BUG]  [BUGGY]  int  lastHold  =  c.getIndex()  +  pos.length;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c.getIndex()  +  pos.length;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c.getIndex()  +  pos.length;	  int    lastHold    =    pos.getIndex()    +    c.length;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
180	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray()  +  start  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray()  +  start  +  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray()  +  start  +  1;	  char[]    c    =    pattern.toCharArray()    +    start;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
181	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  p.getIndex()  -  1);	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
182	[BUG]  [BUGGY]  if(escapingOn  ||  c  ==  END_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c  ==  END_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c  ==  END_FE)  {	  if(escapingOn    ||    c    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
183	[BUG]  [BUGGY]  if(escapingOn  ||  c!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  c!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  c!=  QUOTE)  {	  if(escapingOn    ||    c    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
184	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1).append(QUOTE);  continue;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1).append(QUOTE);  continue;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  1).append(QUOTE);  continue;	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
185	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1).append(QUOTE);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1).append(QUOTE);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  1).append(QUOTE);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
186	[BUG]  [BUGGY]  if(escapedOn  &&  c[start]!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapedOn  &&  c[start]!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapedOn  &&  c[start]!=  QUOTE)  {	  if(escapingOn    ||    c[start]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
187	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
188	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  +  2);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.getIndex()  +  2);	  char    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
189	[BUG]  [BUGGY]  pos.setIndex(start  +  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(start  +  ESCAPED_QUOTE.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(start  +  ESCAPED_QUOTE.length());	  pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
190	[BUG]  [BUGGY]  pos.setIndex(i  +  start.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  start.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  start.length());	  pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
191	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1);  pos.setIndex(i  +  2.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  1);  pos.setIndex(i  +  2.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  1);  pos.setIndex(i  +  2.length());	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
192	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]  ==  END_FE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]  ==  END_FE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[start]  ==  END_FE))  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
193	[BUG]  [BUGGY]  pos.setIndex(i  +  C_SIZE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  C_SIZE.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  C_SIZE.length());	  pos.setIndex(i    +    c.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
194	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(start  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray(start  +  1);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
195	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(start,  escapingOn);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray(start,  escapingOn);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
196	[BUG]  [BUGGY]  char[]  c  =  pattern.toCharArray(start,  0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.toCharArray(start,  0);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.toCharArray(start,  0);	  char[]    c    =    pattern.toCharArray(start);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
197	[BUG]  [BUGGY]  String  c  =  pattern.charAt(start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  c  =  pattern.charAt(start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	String  c  =  pattern.charAt(start);	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
198	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.'),  c);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.'),  c);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.indexOf('.'),  c);	  char    c    =    pattern.substring(start,    pos.indexOf('.'));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
199	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[start],  c!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[start],  c!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[start],  c!=  QUOTE)  {	  if(escapingOn    &&    pattern[start]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
200	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  start);	  char    c    =    pattern.toCharArray(start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
201	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  end);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  end);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  end);	  char    c    =    pattern.toCharArray(start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
202	[BUG]  [BUGGY]  if(escapingOn  &&  pattern[start]!=  c)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern[start]!=  c)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern[start]!=  c)  {	  if(escapingOn    &&    pattern[start]!=    END_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
203	[BUG]  [BUGGY]  if(escapingOn  ||  pattern.charAt(c)  ==  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  ||  pattern.charAt(c)  ==  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  ||  pattern.charAt(c)  ==  QUOTE)  {	  if(escapingOn    ||    c    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
204	[BUG]  [BUGGY]  String  c  =  pattern.substring(start,  pos.indexOf('.'));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  c  =  pattern.substring(start,  pos.indexOf('.'));  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	String  c  =  pattern.substring(start,  pos.indexOf('.'));	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
205	[BUG]  [BUGGY]  String  c  =  pattern.substring(start,  pos.getIndex()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  String  c  =  pattern.substring(start,  pos.getIndex()  -  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	String  c  =  pattern.substring(start,  pos.getIndex()  -  1);	  String    c    =    pattern.toCharArray();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
206	[BUG]  [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex())-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char[]  c  =  pattern.substring(start,  pos.getIndex())-  1;  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char[]  c  =  pattern.substring(start,  pos.getIndex())-  1;	  char[]    c    =    pattern.substring(start,    pos.getIndex()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
207	[BUG]  [BUGGY]  char  c  =  pattern.substring(start  +  1,  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start  +  1,  i);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start  +  1,  i);	  char    c    =    pattern.toCharArray(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
208	[BUG]  [BUGGY]  if(c  ==  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  null)  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(pattern!=    null)    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
209	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toCharArray());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toCharArray());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.toCharArray());	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
210	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toPattern());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toPattern());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.toPattern());	  appendTo.append(c,    start,    pos.getIndex()    -    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
211	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  -  start);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.getIndex()  -  start);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.getIndex()  -  start);	  char    c    =    pattern.substring(start,    pos.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
212	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c.length())  ==  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c.length())  ==  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c.length())  ==  QUOTE)  {	  if(escapingOn    &&    pattern.charAt(start)    ==    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
213	[BUG]  [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  continue;  }	  if(c!=    '.')    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
214	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c)!=  QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c)!=  QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c)!=  QUOTE)  {	  if(escapingOn    &&    pattern[start]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
215	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(start]!=  QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(start]!=  QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(start]!=  QUOTE))  {	  if(escapingOn    &&    pattern[start]!=    QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
216	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos);	  char    c    =    pattern.toCharArray(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
217	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  1);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  1);	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
218	[BUG]  [BUGGY]  pos.setIndex(i  +  C_SUMMY_PATTERN.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  pos.setIndex(i  +  C_SUMMY_PATTERN.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	pos.setIndex(i  +  C_SUMMY_PATTERN.length());	  pos.setIndex(i    +    c.length()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
219	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(start)  ==  ESCAPED_QUOTE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(start)  ==  ESCAPED_QUOTE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(start)  ==  ESCAPED_QUOTE)  {	  if(escapingOn    &&    pattern[start]    ==    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
220	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(start]  ==  ESCAPED_QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(start]  ==  ESCAPED_QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(start]  ==  ESCAPED_QUOTE))  {	  if(escapingOn    &&    pattern[start]    ==    ESCAPED_QUOTE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
221	[BUG]  [BUGGY]  int  lastHold  =  c  ==  null?  0  :  c.getIndex();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  int  lastHold  =  c  ==  null?  0  :  c.getIndex();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	int  lastHold  =  c  ==  null?  0  :  c.getIndex();	  int    lastHold    =    c.getIndex();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
222	[BUG]  [BUGGY]  char  c  =  pattern.toCharArray(start,  pos,  escapingOn);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.toCharArray(start,  pos,  escapingOn);  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.toCharArray(start,  pos,  escapingOn);	  char    c    =    pattern.toCharArray(start,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
223	[BUG]  [BUGGY]  Char[]  c  =  pattern.toCharArray();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  Char[]  c  =  pattern.toCharArray();  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	Char[]  c  =  pattern.toCharArray();	  char[]    c    =    pattern.toCharArray()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
224	[BUG]  [BUGGY]  if(c!=  '.')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  '.')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  '.')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  continue	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
225	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.charAt(start)  ==  END_FE)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.charAt(start)  ==  END_FE)  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.charAt(start)  ==  END_FE)  {	  if(escapingOn    &&    pattern[start]    ==    END_FE)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
226	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.',  c.length()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.',  c.length()));  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.indexOf('.',  c.length()));	  char    c    =    pattern.substring(start,    pos.indexOf('.'));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
227	[BUG]  [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.',  c.length));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  char  c  =  pattern.substring(start,  pos.indexOf('.',  c.length));  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	char  c  =  pattern.substring(start,  pos.indexOf('.',  c.length));	  char    c    =    pattern.substring(start,    pos.indexOf('.'));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
228	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]  ==  ESCAPED_QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]  ==  ESCAPED_QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[start]  ==  ESCAPED_QUOTE))  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
229	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]  >>  QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]  >>  QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[start]  >>  QUOTE))  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
230	[BUG]  [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]!=  QUOTE))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(escapingOn  &&  pattern.substring(start,  c[start]!=  QUOTE))  {  [BUGGY]      return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(escapingOn  &&  pattern.substring(start,  c[start]!=  QUOTE))  {	  if(escapingOn    &&    pattern.substring(start,    c[start]    ==    QUOTE))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
231	[BUG]  [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c!=  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c!=  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }	  if(c    ==    '.')    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
232	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  if(c  ==  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	if(c  ==  '.')  {  if(escapingOn  &&  pattern.substring(start,  i)!=  '-')  {  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  continue;  }	  if(c    ==    '.')    {    if(escapingOn    &&    pattern.charAt(i)!=    '-')    {    appendTo.append(c,    start,    pos.getIndex()    -    lastHold).append(QUOTE);    continue;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
233	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  lastHold).append(QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());	  appendTo.append(c,    start,    pos.getIndex()    -    lastHold);    pos.setIndex(i    +    ESCAPED_QUOTE.length());    continue;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
234	[BUG]  [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toString());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();      [BUGGY]  appendTo.append(c,  start,  pos.getIndex()  -  pattern.toString());  [BUGGY]      if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	appendTo.append(c,  start,  pos.getIndex()  -  pattern.toString());	  appendTo.append(c,    start,    pos.getIndex()    -    p.getIndex());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
