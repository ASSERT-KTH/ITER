bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY	  if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
2	[BUG]  [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM	  if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	89	None	replace
3	[BUG]  [BUGGY]  ||  toPattern  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern  >=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  >=  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    toPattern!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
4	[BUG]  [BUGGY]  &&  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  &&  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	&&  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    toPattern!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
5	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
6	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
7	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
8	[BUG]  [BUGGY]  toPattern  =  new  Format[fmtCount];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  toPattern  =  new  Format[fmtCount];  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	toPattern  =  new  Format[fmtCount];	  if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
9	[BUG]  [BUGGY]  ToPattern  toPattern  =  new  Format[fmtCount];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ToPattern  toPattern  =  new  Format[fmtCount];  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	ToPattern  toPattern  =  new  Format[fmtCount];	  if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
10	[BUG]  [BUGGY]  ToPattern  =  new  Format[fmtCount];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ToPattern  =  new  Format[fmtCount];  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	ToPattern  =  new  Format[fmtCount];	  if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
11	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.plots.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.plots.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.plots.iterator();	  Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
12	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.pattern.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.pattern.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.pattern.iterator();	  Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
13	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	  if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
14	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	  if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
15	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    to    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
16	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    to    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
17	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    to    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	  if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    pattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	92	None	replace
19	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(entry.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(entry.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(entry.next());  }	  Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
20	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1.3. ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1.3. ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1.3. ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  appendPattern: ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  RuntimeException( "Failed  to  appendPattern: ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  RuntimeException( "Failed  to  appendPattern: ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    1,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
24	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    1,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	87	None	replace
25	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.entrySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.entrySet().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.formatDescription.entrySet().iterator();	  Iterator    <    String>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
26	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.formatDescription.values().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.formatDescription.values().iterator();	  Iterator    <    String>    it    =    this.formatDescription.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
27	[BUG]  [BUGGY]  String  fmtCount  =  toPattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  String  fmtCount  =  toPattern.length();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	String  fmtCount  =  toPattern.length();	  char    fmtCount    =    toPattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
28	[BUG]  [BUGGY]  char  fmtCount  =  pattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  char  fmtCount  =  pattern.length();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	char  fmtCount  =  pattern.length();	  char    fmtCount    =    toPattern.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
29	[BUG]  [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
30	[BUG]  [BUGGY]  Formats  f  =  foundDescriptions.iterator();  for(Iterator  it  =  f.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Formats  f  =  foundDescriptions.iterator();  for(Iterator  it  =  f.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Formats  f  =  foundDescriptions.iterator();  for(Iterator  it  =  f.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
31	[BUG]  [BUGGY]  Pattern  pattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Pattern  pattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Pattern  pattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  pattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
32	[BUG]  [BUGGY]  pattern  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern  ==  null)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  pattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
33	[BUG]  [BUGGY]  Pattern  pattern  =  Pattern.compile(toPattern,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Pattern  pattern  =  Pattern.compile(toPattern,  toPattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Pattern  pattern  =  Pattern.compile(toPattern,  toPattern);	  pattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
34	[BUG]  [BUGGY]  Iterator  <  Format>  foundDescriptions  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  foundDescriptions  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  foundDescriptions  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
35	[BUG]  [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
36	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
37	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN)||  DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN)||  DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN)||  DUMM	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
38	[BUG]  [BUGGY]  throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);	  throw    new    RuntimeException(   "Formats    are    not    supported    in    -source    1:   "    +    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
39	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);	  throw    new    RuntimeException(   "Formats    are    not    supported    in    -source    1:   "    +    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
40	[BUG]  [BUGGY]  throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern,  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern,  toPattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern,  toPattern);	  throw    new    RuntimeException(   "Formats    are    not    supported    in    -source    1:   "    +    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
41	[BUG]  [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
42	[BUG]  [BUGGY]  Formats.for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Formats.for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Formats.for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
43	[BUG]  [BUGGY]  &&  toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  &&  toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	&&  toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  ||    toPattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
44	[BUG]  [BUGGY]  ||  toPattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }	  if(toPattern!=    null)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
45	[BUG]  [BUGGY]  pattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern!=  null)  {  throw  new  UnsupportedOperationException( " ");  }	  if(toPattern!=    null)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
46	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  /  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  pattern.length()  /  2;  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  pattern.length()  /  2;	  int    fmtCount    =    pattern.length()    *    2;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
47	[BUG]  [BUGGY]  int  fmtCount  =  toPattern.length()  *  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  toPattern.length()  *  2;  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  toPattern.length()  *  2;	  int    fmtCount    =    pattern.length()    *    2;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
48	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.length()    ==    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
49	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
50	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
51	[BUG]  [BUGGY]  pattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
52	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
53	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getKey()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getKey()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getKey()))  {  return;  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
54	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getName()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getName()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getName()))  {  return;  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
56	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
57	[BUG]  [BUGGY]  int  fmtCount  =  this.toPattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  this.toPattern.length();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  this.toPattern.length();	  int    fmtCount    =    toPattern.length()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
58	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
59	[BUG]  [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
60	[BUG]  [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
61	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.foundDescriptions.iterator();	  Iterator    <    String>    it    =    foundDescriptions.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
62	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();	  Iterator    <    String>    it    =    foundDescriptions.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPattern.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.toPattern.values().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.toPattern.values().iterator();	  Iterator    <    String>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length()  -  1;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  toPattern.length()  -  1;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length()  -  1;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length());  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length());  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
67	[BUG]  [BUGGY]  Integer  fmtCount  =  toPattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Integer  fmtCount  =  toPattern.length();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Integer  fmtCount  =  toPattern.length();	  int    fmtCount    =    toPattern.length()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
68	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(orig  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(orig  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(orig	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    start;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
69	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    start;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
70	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    start;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
71	[BUG]  [BUGGY]  ||  toPattern  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
72	[BUG]  [BUGGY]  pattern  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  toPattern.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
74	[BUG]  [BUGGY]  List  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  List  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	List  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
75	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
76	[BUG]  [BUGGY]  ||  toPattern!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(toPattern!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
77	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getKey()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getKey()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getKey()))  {  return;  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
78	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getName()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getName()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getName()))  {  return;  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
79	[BUG]  [BUGGY]  ArrayList  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ArrayList  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	ArrayList  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
80	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  =  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  =  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  =  0)  {  return;  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
81	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  >=  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  >=  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  >=  0)  {  return;  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
82	[BUG]  [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
83	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
84	[BUG]  [BUGGY]  ||  toPattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }	  if(toPattern    ==    null)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
85	[BUG]  [BUGGY]  pattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }	  if(toPattern    ==    null)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
86	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMM	  if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMM    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
87	[BUG]  [BUGGY]  ||  toPattern.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern.equals( "   "))  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
88	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.equals( " "))  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
89	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern!=    null    ||    toPattern.length()    ==    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
90	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
91	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
92	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN  ==  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN  ==  null)  {  toP  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN  ==  null)  {  toP	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
93	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( "- "))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( "- "))  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( "- "))  {  return;  }	  if(toPattern    ==    null    ||    toPattern.equals(   "   "))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    pattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
95	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    pattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
96	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
97	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
98	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
99	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
100	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arra  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arra  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arra	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
101	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
102	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
103	[BUG]  [BUGGY]  Formats  f  =  foundDescriptions.iterator();  for(Iterator  it  =  f.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Formats  f  =  foundDescriptions.iterator();  for(Iterator  it  =  f.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Formats  f  =  foundDescriptions.iterator();  for(Iterator  it  =  f.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
104	[BUG]  [BUGGY]  Formats  f  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  f.next();  if(format!=  null)  {  toPattern  =  f.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Formats  f  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  f.next();  if(format!=  null)  {  toPattern  =  f.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Formats  f  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  f.next();  if(format!=  null)  {  toPattern  =  f.next();  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
105	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('t');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('t');  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('t');  }	  if(toPattern!=    null)    {    toPattern    =    new    StringBuffer();    }    else    {    toPattern.append('n');    toPattern.append('t');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
106	[BUG]  [BUGGY]  toPattern  =  new  StringBuffer();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  toPattern  =  new  StringBuffer();  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	toPattern  =  new  StringBuffer();	  if(toPattern!=    null)    {    toPattern    =    new    StringBuffer();    }    else    {    toPattern.append('n');    toPattern.append('t');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
107	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  toPattern  =  new  StringBuffer();  }	  if(toPattern!=    null)    {    toPattern    =    new    StringBuffer();    }    else    {    toPattern.append('n');    toPattern.append('t');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
108	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(toPattern));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(toPattern));  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(toPattern));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
109	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalArgumentException( " ".getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
110	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {	  if(toPattern    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
111	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  ==  0)  {	  if(toPattern    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
112	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()!=  0)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()!=  0)  {	  if(toPattern    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length()  -  1;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  toPattern.length()  -  1;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length()  -  1;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  toPattern,  0,  toPattern.length);  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
115	[BUG]  [BUGGY]  int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
116	[BUG]  [BUGGY]  ||  toPattern!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern!=  null)  {  throw  new  RuntimeException( " ");  }	  if(toPattern!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
117	[BUG]  [BUGGY]  pattern!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern!=  null)  {  throw  new  RuntimeException( " ");  }	  if(toPattern!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
118	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(orig  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(orig  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(orig	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
119	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  0,  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
120	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
121	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	  if(formatDescription    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
122	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c	  if(formatDescription    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
123	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
124	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(c);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  ++i)  {  stripCustom.append(c);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.substring(i    +    1);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
126	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(0,  i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(0,  i);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(0,  i);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.substring(i    +    1);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
127	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(toPattern));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(toPattern));  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(toPattern));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
128	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
130	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
131	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundFormats!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundFormats!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
132	[BUG]  [BUGGY]  new  IllegalArgumentException( " "));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalArgumentException( " "));  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalArgumentException( " "));	  new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
133	[BUG]  [BUGGY]  new  IllegalArgumentException( "Formats  are  not  supported  in  -source  1.3. ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalArgumentException( "Formats  are  not  supported  in  -source  1.3. ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalArgumentException( "Formats  are  not  supported  in  -source  1.3. ");	  new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
134	[BUG]  [BUGGY]  new  IllegalArgumentException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalArgumentException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalArgumentException( "Formats  are  not  supported  in  -source  1: "  +  pattern);	  new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
135	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('n');  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  else  {  toPattern.append('n');  toPattern.append('n');  }	  if(toPattern!=    null)    {    toPattern    =    new    StringBuffer();    }    else    {    toPattern.append('n');    toPattern.append('n');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
136	[BUG]  [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
137	[BUG]  [BUGGY]  ||  toPattern  ==  null)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern  ==  null)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  ==  null)  {  return;  }	  ||    toPattern!=    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
138	[BUG]  [BUGGY]  ||  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");	  ||    toPattern!=    null)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
139	[BUG]  [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length());  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  Pattern.compile(pattern.length());	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
140	[BUG]  [BUGGY]  Integer  fmtCount  =  pattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Integer  fmtCount  =  pattern.length();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Integer  fmtCount  =  pattern.length();	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
141	[BUG]  [BUGGY]  ArrayList  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ArrayList  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	ArrayList  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
142	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format  ==  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format  ==  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format  ==  null)  {  toPattern  =  it.next();  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
143	[BUG]  [BUGGY]  List  <  Format>  foundDescriptions  =  list.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  List  <  Format>  foundDescriptions  =  list.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	List  <  Format>  foundDescriptions  =  list.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
144	[BUG]  [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	ArrayList  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
145	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
146	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN)  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN)  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN)	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    1,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
148	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    1,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
149	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    1,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.charAt(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
151	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i  +  1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i  +  1);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i  +  1);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.charAt(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
152	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(desc,    0,    foundFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
153	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(desc,    0,    foundFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
154	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  found  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  found  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  found	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(desc,    0,    foundFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
155	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  0,  foundFormats,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(desc,    0,    foundFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
156	[BUG]  [BUGGY]  ||  toPattern  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
157	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.toPatterns.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  registry.toPatterns.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  registry.toPatterns.iterator();	  Iterator    <    String>    it    =    this.toPatterns.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
158	[BUG]  [BUGGY]  Iterator  <  String>  it  =  pattern.toPatterns.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  pattern.toPatterns.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  pattern.toPatterns.iterator();	  Iterator    <    String>    it    =    this.toPatterns.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
160	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  foundFormats.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
161	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundFormats!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundFormats!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
162	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  f  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(f,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  f  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(f,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  f  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(f,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
163	[BUG]  [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	For(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
164	[BUG]  [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
165	[BUG]  [BUGGY]  Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
166	[BUG]  [BUGGY]  ||  toPattern  ==  null)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  ==  null)  {  throw  new  RuntimeException( " ");  }	  if(toPattern    ==    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
167	[BUG]  [BUGGY]  pattern  ==  null)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern  ==  null)  {  throw  new  RuntimeException( " ");  }	  if(toPattern    ==    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
168	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  <  =  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  <  =  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  <  =  0)  {  return;  }	  if(toPattern!=    null    ||    toPattern.length()    <    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
169	[BUG]  [BUGGY]  new  IllegalStateException( " "));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalStateException( " "));  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalStateException( " "));	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
170	[BUG]  [BUGGY]  new  IllegalStateException( "Formats  are  not  supported  in  -source  1.3. ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalStateException( "Formats  are  not  supported  in  -source  1.3. ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalStateException( "Formats  are  not  supported  in  -source  1.3. ");	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
171	[BUG]  [BUGGY]  new  IllegalStateException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalStateException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalStateException( "Formats  are  not  supported  in  -source  1: "  +  pattern);	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
172	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.registry.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.registry.iterator();	  Iterator    <    String>    it    =    registry.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
173	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.registry.values().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.registry.values().iterator();	  Iterator    <    String>    it    =    registry.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
174	[BUG]  [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	  if(generics!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
175	[BUG]  [BUGGY]  Iterator  <  Format>  foundDescriptions  =  findDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  foundDescriptions  =  findDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  foundDescriptions  =  findDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  if(foundDescriptions    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
176	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(0,  i  +  1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(0,  i  +  1);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(0,  i  +  1);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.substring(i    +    1);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
177	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  StringBuffer();  }	  if(toPattern!=    null)    {    toPattern    =    new    StringBuffer();    }    else    {    toPattern.append('n');    toPattern.append('t');    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
178	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
179	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registr  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registr  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registr	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
180	[BUG]  [BUGGY]  new  IllegalStateException( " ")  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalStateException( " ")  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalStateException( " ")	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
181	[BUG]  [BUGGY]  new  IllegalStateException( "Failed  to  appendPattern: ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalStateException( "Failed  to  appendPattern: ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalStateException( "Failed  to  appendPattern: ");	  new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
182	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  *  2  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  pattern.length()  *  2  +  1;  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  pattern.length()  *  2  +  1;	  int    fmtCount    =    pattern.length()    *    2;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
183	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
184	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
185	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
186	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DuMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DuMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DuMMY_PATTERN.equals(DUMMY_PATTERN))  {	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
187	[BUG]  [BUGGY]  ||  toPattern  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  ||  toPattern  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	||  toPattern  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  ||    toPattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
188	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
189	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  toPattern.length);  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
190	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
191	[BUG]  [BUGGY]  Ilerator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Ilerator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Ilerator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
192	[BUG]  [BUGGY]  new  IllegalArgumentException( " ")  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalArgumentException( " ")  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalArgumentException( " ")	  new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
193	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  appendPattern: ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalArgumentException( "Failed  to  appendPattern: ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalArgumentException( "Failed  to  appendPattern: ");	  new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
194	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	  if(formatDescription    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
195	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	  if(formatDescription    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
196	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
197	[BUG]  [BUGGY]  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundFormats.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
198	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.values().iterator();  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.values().iterator();	  Iterator    <    String>    it    =    foundDescriptions.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
199	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
200	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  >=  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  >=  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  >=  0)  {  return;  }	  if(toPattern!=    null    ||    toPattern.length()    ==    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
201	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  >  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  >  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  >  0)  {  return;  }	  if(toPattern!=    null    ||    toPattern.length()    ==    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
202	[BUG]  [BUGGY]  TokenBuffer  toPattern  =  new  TokenBuffer(fmtCount);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  TokenBuffer  toPattern  =  new  TokenBuffer(fmtCount);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	TokenBuffer  toPattern  =  new  TokenBuffer(fmtCount);	  if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
203	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(desc,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(desc,    0,    foundFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
204	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.toPattern.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  registry.toPattern.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  registry.toPattern.iterator();	  Iterator    <    String>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
205	[BUG]  [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DU  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DU  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DU	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
206	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
207	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  RuntimeException( " "  +  toPattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  RuntimeException( " "  +  toPattern);	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
208	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(origFormats	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
209	[BUG]  [BUGGY]  pattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  pattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	pattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  pattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
210	[BUG]  [BUGGY]  Pattern  pattern  =  new  Pattern(toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Pattern  pattern  =  new  Pattern(toPattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Pattern  pattern  =  new  Pattern(toPattern);	  pattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
211	[BUG]  [BUGGY]  Pattern  pattern  =  new  Pattern(toPattern.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Pattern  pattern  =  new  Pattern(toPattern.length());  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Pattern  pattern  =  new  Pattern(toPattern.length());	  pattern    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
212	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPatterns.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.toPatterns.values().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.toPatterns.values().iterator();	  Iterator    <    String>    it    =    this.toPatterns.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
213	[BUG]  [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMM    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
214	[BUG]  [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMM    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
215	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  i  <  toPattern.length;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  i  <  toPattern.length;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start  +  fmtCount;  i  <  toPattern.length;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.charAt(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
216	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
217	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundFormats.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
218	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next()  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next()  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next()	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
219	[BUG]  [BUGGY]  if(toPattern!=  null  &&  toPattern.equals( "   "))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  &&  toPattern.equals( "   "))  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  &&  toPattern.equals( "   "))  {  return;  }	  if(toPattern!=    null    ||    toPattern.equals(   "   "))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
220	[BUG]  [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
221	[BUG]  [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  to	  if(generics!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
222	[BUG]  [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	  if(generics!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
223	[BUG]  [BUGGY]  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);	  throw    new    RuntimeException(   "Formats    are    not    supported    in    -source    1:   "    +    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
224	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  toPattern);	  throw    new    RuntimeException(   "Formats    are    not    supported    in    -source    1:   "    +    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
225	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( "- "))  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.equals(   "   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	94	None	replace
226	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalStateException( ", ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  foundDescriptions.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundDescriptions,  0,  toPattern.length());  }	  for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
229	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
230	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundFormats.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
231	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(entry.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(entry.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(entry.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
232	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( " "))  {	  if(toPattern    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
233	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.registry.entities.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.registry.entities.iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.registry.entities.iterator();	  Iterator    <    String>    it    =    registry.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
234	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
235	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
236	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(orig  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(orig  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(orig	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    start;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
237	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    start;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
238	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  start;  i  <  c.length;  i++)  {  System.arraycopy(origFormats	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    start;    i    <    c.length;    i++)    {    System.arraycopy(origFormats,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
239	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    foundFormats.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
240	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(pattern));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(pattern));  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(pattern));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
241	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
242	[BUG]  [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(foundFormats!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(foundFormats!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
243	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  return;  }	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    to    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
244	[BUG]  [BUGGY]  Int  fmtCount  =  pattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Int  fmtCount  =  pattern.length();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Int  fmtCount  =  pattern.length();	  int    fmtCount    =    pattern.length()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
245	[BUG]  [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length()  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  Pattern.compile(pattern.length()  -  1);  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  Pattern.compile(pattern.length()  -  1);	  int    fmtCount    =    pattern.length()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
246	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
247	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c	  if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
248	[BUG]  [BUGGY]  int  fmtCount  =  pattern.length()  +  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  pattern.length()  +  2;  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  pattern.length()  +  2;	  int    fmtCount    =    pattern.length()    *    2;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
249	[BUG]  [BUGGY]  if(toPattern!=  null  &&  toPattern.length()  <  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  &&  toPattern.length()  <  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  &&  toPattern.length()  <  0)  {  return;  }	  if(toPattern!=    null    ||    toPattern.length()    <    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
250	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  UnsupportedOperationException( " ");  }	  if(toPattern    ==    null)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
251	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  UnsupportedOperationException( " ");  }	  if(toPattern    ==    null)    {    throw    new    UnsupportedOperationException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
252	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPatterns.entrySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.toPatterns.entrySet().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.toPatterns.entrySet().iterator();	  Iterator    <    String>    it    =    this.toPatterns.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
253	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length;  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    pattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
254	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  >  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  >  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  >  0)  {  return;  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	90	None	replace
255	[BUG]  [BUGGY]  for(Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
256	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(duMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(duMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(duMMY_PATTERN.equals(DUMMY_PATTERN))  {	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
257	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {	  if(toPattern    ==    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	88	None	replace
258	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format.equals(format.getValue()))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
259	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  Iterator  <  Format>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
260	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  fDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  fDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  fDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  Iterator    <    Format>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
261	[BUG]  [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
262	[BUG]  [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
263	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  pattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  1,  toPattern.length());  }	  if(toPattern    ==    null)    {    for(int    i    =    0;    i    <    pattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    0,    toPattern.length());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	92	None	replace
264	[BUG]  [BUGGY]  if(c!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(c!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(c!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append(c[i]);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
265	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(c[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(c[i]);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  0;  ++i)  {  stripCustom.append(c[i]);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	96	None	replace
266	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
267	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(toPattern    ==    null    ||    toPattern.length()    <    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	93	None	replace
268	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Object>  it  =  foundDescriptions.iterator();  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Object>  it  =  foundDescriptions.iterator();	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
269	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  found  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  found  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char[]  c  =  it.next();  for(int  i  =  0;  i  <  c.length;  i++)  {  System.arraycopy(registry,  0,  found	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    char[]    c    =    it.next();    for(int    i    =    0;    i    <    c.length;    i++)    {    System.arraycopy(registry,    0,    foundDe    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
270	[BUG]  [BUGGY]  Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
271	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalStateException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
272	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( " "))  {  throw  new  IllegalStateException( " ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
273	[BUG]  [BUGGY]  Iterator  <  String>  it  =  registry.getFormat().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  registry.getFormat().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  registry.getFormat().iterator();	  Iterator    <    String>    it    =    pattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
274	[BUG]  [BUGGY]  new  IllegalArgumentException( " ")  :  pattern;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  new  IllegalArgumentException( " ")  :  pattern;  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	new  IllegalArgumentException( " ")  :  pattern;	  new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
275	[BUG]  [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(formatDescription!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
276	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.toPattern.entrySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.toPattern.entrySet().iterator();  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.toPattern.entrySet().iterator();	  Iterator    <    String>    it    =    this.toPattern.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
277	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
278	[BUG]  [BUGGY]  Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
279	[BUG]  [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  toPattern  =  new  Format[fmtCount];  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
280	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  toPattern  =  new  Format[1];  }	  if(toPattern    ==    null)    {    toPattern    =    new    Format[fmtCount];    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	97	None	replace
281	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  nu  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  nu  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  nu	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
282	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
283	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( " "))  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
284	[BUG]  [BUGGY]  Throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throw  new  RuntimeException( "Formats  are  not  supported  in  -source  1: "  +  pattern);	  throw    new    RuntimeException(   "Formats    are    not    supported    in    -source    1:   "    +    pattern);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
285	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append('/');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append('/');  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  start;  i  <  fmtCount;  ++i)  {  stripCustom.append('/');  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    ++i)    {    stripCustom.append(c);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	95	None	replace
286	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( ", ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  RuntimeException( ", ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  RuntimeException( ", ");	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
287	[BUG]  [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  RuntimeException( " ")  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  RuntimeException( " ")	  Throwables.throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
288	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.substring(i  +  1);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.substring(i    +    1);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
289	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  char  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN!=    null)    {    toP    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
290	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( ". ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
291	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  IllegalArgumentException( " ".);  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
292	[BUG]  [BUGGY]  if(toPattern!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(toPattern    ==    null)    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
293	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()!=  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()!=  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()!=  0)  {  return;  }	  if(toPattern    ==    null    ||    toPattern.length()!=    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	91	None	replace
294	[BUG]  [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(format!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  }	  if(toPattern!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
295	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  if(it.hasNext())  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  if(it.hasNext())  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  if(it.hasNext())  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
296	[BUG]  [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  while(it.hasNext())  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  Format>  it  =  foundDescriptions.iterator();  while(it.hasNext())  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  Format>  it  =  foundDescriptions.iterator();  while(it.hasNext())  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    if(format!=    null)    {    toPattern    =    it.next();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
297	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
298	[BUG]  [BUGGY]  Iterator  <  String>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
299	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalArgumentException( " ".);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
300	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Throwables.throw  new  IllegalArgumentException( ", ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
301	[BUG]  [BUGGY]  Iterator  <  String>  it  =  generics.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  generics.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  generics.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
302	[BUG]  [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(duMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(duMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(duMMY_PATTERN.equals(DUMMY_PATTERN))  {	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMMY_PATTERN))    {    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
303	[BUG]  [BUGGY]  if(toPattern!=  null  &&  toPattern.length()  ==  0)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  &&  toPattern.length()  ==  0)  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  &&  toPattern.length()  ==  0)  {  return;  }	  if(toPattern!=    null    ||    toPattern.length()    ==    0)    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
304	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  <  0)  {  throw  new  RuntimeException( " ");  }	  if(toPattern    ==    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
305	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.length()  ==  0)  {  throw  new  RuntimeException( " ");  }	  if(toPattern    ==    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
306	[BUG]  [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null  ||  toPattern.length()  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(toPattern!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
307	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalStateException( " ".);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  throw  new  IllegalStateException( " ".);  }	  if(toPattern!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
308	[BUG]  [BUGGY]  if(generics  ==  null)  {  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(generics  ==  null)  {  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(generics  ==  null)  {  if(foundDescriptions!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMM	  if(foundDescriptions!=    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMM    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
309	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Thread.currentThread().interrupt();	  if(toPattern!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
310	[BUG]  [BUGGY]  int  fmtCount  =  pattern.lastIndexOf('.')-  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  int  fmtCount  =  pattern.lastIndexOf('.')-  1;  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	int  fmtCount  =  pattern.lastIndexOf('.')-  1;	  int    fmtCount    =    pattern.length()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
311	[BUG]  [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( ". "))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null  ||  toPattern.equals( ". "))  {  return;  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null  ||  toPattern.equals( ". "))  {  return;  }	  if(toPattern!=    null    ||    toPattern.equals(   "   "))    {    return;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
312	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(	  if(toPattern    ==    null)    {    for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    String    DUMMY_PATTERN    =    it.next();    if(DUMMY_PATTERN.equals(DUMM    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
313	[BUG]  [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  c  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,	  for(Iterator    it    =    foundDescriptions.iterator();    it.hasNext();)    {    Format    format    =    it.next();    char[]    c    =    pattern.toCharArray();    System.arraycopy(c,    0,    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
314	[BUG]  [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }  [BUGGY]      }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(fmtCount  ==  0)  {  for(int  i  =  start;  i  <  fmtCount;  i++)  {  toPattern[i]  =  pattern.charAt(i);  }	  if(toPattern!=    null)    {    for(int    i    =    start;    i    <    fmtCount;    i++)    {    toPattern[i]    =    pattern.charAt(i);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
315	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  this.foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
316	[BUG]  [BUGGY]  Iterator  <  String>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  Iterator  <  String>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	Iterator  <  String>  it  =  leftDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }	  Iterator    <    String>    it    =    foundDescriptions.iterator();    it.hasNext();)    {    applyPattern(it.next(),    pattern);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
317	[BUG]  [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  1,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              OutOfMemoryError      [CONTEXT]      public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();      [BUGGY]  if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  1,  toPattern.length);  }  [BUGGY]      return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  1,  foundFormats,  1,  toPattern.length);  }	  if(toPattern!=    null)    {    for(int    i    =    0;    i    <    toPattern.length();    i++)    {    System.arraycopy(c,    0,    foundFormats,    1,    toPattern.length);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
