bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	throw  new  IllegalArgumentException( " ");	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
2	[BUG]  [BUGGY]  if(toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  if(toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  throw  new  IllegalArgumentException( " ");  }	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	throw  new  IllegalStateException( " ");	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
4	[BUG]  [BUGGY]  if(toPattern!=  null)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  if(toPattern!=  null)  {  return;  }  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern!=  null)  {  return;  }	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
5	[BUG]  [BUGGY]    [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	  	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
6	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
7	[BUG]  [BUGGY]    if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length);  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
8	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
9	[BUG]  [BUGGY]    if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern!=  null)  {  for(int  i  =  0;  i  <  toPattern.length();  i++)  {  System.arraycopy(c,  0,  foundFormats,  0,  toPattern.length());  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
10	[BUG]  [BUGGY]    int  fmtCount  =  toPattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    int  fmtCount  =  toPattern.length();  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    int  fmtCount  =  toPattern.length();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
11	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
12	[BUG]  [BUGGY]  if(toPattern  ==  null)  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  if(toPattern  ==  null)  {  return;  }  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	if(toPattern  ==  null)  {  return;  }	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
13	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format!=  null)  {  toPattern  =  it.next();  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
14	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
15	[BUG]  [BUGGY]    Iterator  <  String>  it  =  toPattern.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    Iterator  <  String>  it  =  toPattern.iterator();  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    Iterator  <  String>  it  =  toPattern.iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
16	[BUG]  [BUGGY]    if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern!=  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN.equals(DUMMY_PATTERN))  {		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
17	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  String  DUMMY_PATTERN  =  it.next();  if(DUMMY_PATTERN!=  null)  {  toP		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
18	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next());  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
19	[BUG]  [BUGGY]    int  fmtCount  =  pattern.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    int  fmtCount  =  pattern.length();  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    int  fmtCount  =  pattern.length();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
20	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  applyPattern(it.next(),  pattern);  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
21	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  char[]  c  =  pattern.toCharArray();  System.arraycopy(c,  0,		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
22	[BUG]  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }  [BUGGY]  return;  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	    if(toPattern  ==  null)  {  for(Iterator  it  =  foundDescriptions.iterator();  it.hasNext();)  {  Format  format  =  it.next();  if(format.equals(format.getValue()))  {  return;  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	add
23	[BUG]  [BUGGY]  throw  new  RuntimeException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  throw  new  RuntimeException( " ");  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	throw  new  RuntimeException( " ");	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
24	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  public  final  void  applyPattern(String  pattern)  {  if  (registry  ==  null)  {  super.applyPattern(pattern);  toPattern  =  super.toPattern();  [BUGGY]  throw  new  UnsupportedOperationException( " ");  [BUGGY]  }  ArrayList  foundFormats  =  new  ArrayList();  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.3779644730092272	146	146	1	replace	throw  new  UnsupportedOperationException( " ");	return;  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
