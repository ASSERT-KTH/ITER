bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  applyPattern(origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  applyPattern(origFormats[pos.getIndex()  ]);  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(origFormats[pos.getIndex()  ]);	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
2	[BUG]  [BUGGY]  pos  =  insertFormats(origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  pos  =  insertFormats(origFormats);  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	pos  =  insertFormats(origFormats);	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
3	[BUG]  [BUGGY]  applyPattern(stripCustom);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  applyPattern(stripCustom);  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	applyPattern(stripCustom);	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
4	[BUG]  [BUGGY]    [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	  	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
5	[BUG]  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    pos.setIndex(i);  toPattern  =  insertFormats(origFormats[pos.getIndex()]);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
6	[BUG]  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    pos.setIndex(i);  toPattern  =  insertFormats(super.toPattern(),  origFormats);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
7	[BUG]  [BUGGY]    pos.setIndex(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    pos.setIndex(i);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    pos.setIndex(i);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
8	[BUG]  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(origFormats,  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(origFormats,  origFormats);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    pos.setIndex(i);  toPattern  =  insertFormats(origFormats,  origFormats);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
9	[BUG]  [BUGGY]    int  index  =  indexOf(origFormats[pos.getIndex()  ]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    int  index  =  indexOf(origFormats[pos.getIndex()  ]);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    int  index  =  indexOf(origFormats[pos.getIndex()  ]);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
10	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(super.toPattern(),  origFormats);  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
11	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
12	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(pos);  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
13	[BUG]  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(!stripCustom.isEmpty())  {  next(pos);  }  else  {  toPattern  =  insertFormats(origFormats[pos.getIndex()]);  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
14	[BUG]  [BUGGY]    pos.setIndex(index);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    pos.setIndex(index);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    pos.setIndex(index);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
15	[BUG]  [BUGGY]    pos.setIndex(index);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    pos.setIndex(index);  toPattern  =  insertFormats(super.toPattern(),  origFormats);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    pos.setIndex(index);  toPattern  =  insertFormats(super.toPattern(),  origFormats);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
16	[BUG]  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    pos.setIndex(i);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    pos.setIndex(i);  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
17	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
18	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
19	[BUG]  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(pos.getIndex()  >=  END_FE)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  origFormats);  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
20	[BUG]  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]  if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }  [BUGGY]  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	if(stripCustom!=  null)  {  next(pos);  }  else  {  toPattern  =  insertFormats(stripCustom.toString(),  new  Format[]  {  pattern  }  );  }	next(pos);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
21	[BUG]  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append('n');  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
22	[BUG]  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  c.length();  ++i)  {  stripCustom.append(',');  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
23	[BUG]  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append('n');  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
24	[BUG]  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          OutOfMemoryError  [CONTEXT]  foundDescriptions.add(format  ==  null  ?  null  :  formatDescription);  Validate.isTrue(foundFormats.size()  ==  fmtCount);  Validate.isTrue(foundDescriptions.size()  ==  fmtCount);  if  (c[pos.getIndex()]  !=  END_FE)  {  throw  new  IllegalArgumentException(   "Unreadable  format  element  at  position   "  +  start);  }  default:  stripCustom.append(c[pos.getIndex()]);  [BUGGY]    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }  [BUGGY]  next(pos);  }  }  super.applyPattern(stripCustom.toString());  toPattern  =  insertFormats(super.toPattern(),  foundDescriptions);  if  (containsElements(foundFormats))  {  Format[]  origFormats  =  getFormats();    int  i  =  0;  for  (Iterator  it  =  foundFormats.iterator();  it.hasNext();  i++)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	188	188	1	replace	    if(stripCustom!=  null)  {  for(int  i  =  0;  i  <  foundDescriptions.size();  ++i)  {  stripCustom.append(',');  }		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	add
