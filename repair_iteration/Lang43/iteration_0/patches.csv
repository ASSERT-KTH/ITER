bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	new_failing_test_number
1	[BUG]  [BUGGY]  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    stripCustom.append(QUOTE);  [BUGGY]  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	add	    stripCustom.append(QUOTE);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	4	1
2	[BUG]  [BUGGY]    stripCustom.append(QUOTE);  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    stripCustom.append(QUOTE);  [BUGGY]  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	    stripCustom.append(QUOTE);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	4	1
2	[BUG]  [BUGGY]  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    stripCustom.append(QUOTE).append(fmtCount++);  [BUGGY]  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	add	    stripCustom.append(QUOTE).append(fmtCount++);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	4	1
3	[BUG]  [BUGGY]    stripCustom.append(QUOTE).append(fmtCount++);  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    stripCustom.append(QUOTE).append(fmtCount++);  [BUGGY]  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	    stripCustom.append(QUOTE).append(fmtCount++);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	4	1
3	[BUG]  [BUGGY]  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	add	    stripCustom.append(QUOTE).append(fmtCount);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	4	1
4	[BUG]  [BUGGY]    stripCustom.append(QUOTE).append(fmtCount);  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  ArrayList  foundDescriptions  =  new  ArrayList();  StringBuffer  stripCustom  =  new  StringBuffer(pattern.length());  ParsePosition  pos  =  new  ParsePosition(0);  char[]  c  =  pattern.toCharArray();  int  fmtCount  =  0;  while  (pos.getIndex()  <  pattern.length())  {  switch  (c[pos.getIndex()])  {  case  QUOTE:  appendQuotedString(pattern,  pos,  stripCustom,  true);  [BUGGY]    stripCustom.append(QUOTE).append(fmtCount);  [BUGGY]  break;  case  START_FE:  fmtCount++;  seekNonWs(pattern,  pos);  int  start  =  pos.getIndex();  int  index  =  readArgumentIndex(pattern,  next(pos));  stripCustom.append(START_FE).append(index);  seekNonWs(pattern,  pos);  Format  format  =  null;  String  formatDescription  =  null;  if  (c[pos.getIndex()]  ==  START_FMT)  {  [CLASS]  ExtendedMessageFormat  [METHOD]  applyPattern  [RETURN_TYPE]  void  String  pattern  [VARIABLES]  Format[]  origFormats  ArrayList  foundDescriptions  foundFormats  String  DUMMY_PATTERN  ESCAPED_QUOTE  formatDescription  pattern  toPattern  long  serialVersionUID  int  fmtCount  i  index  start  char[]  c  StringBuffer  stripCustom  Format  f  format  boolean  char  END_FE  QUOTE  START_FE  START_FMT  Iterator  it  Map  registry  ParsePosition  pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	    stripCustom.append(QUOTE).append(fmtCount);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	4	1
25	[BUG]  [BUGGY]    String  pattern  =  pos.getPattern();  [CE]  variable  pattern  is  already  defined  in  method  appendQuotedString(String,ParsePosition,StringBuffer,boolean)  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    String  pattern  =  pos.getPattern();  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    String  pattern  =  pos.getPattern();		non-compiled	[CE]  variable  pattern  is  already  defined  in  method  appendQuotedString(String,ParsePosition,StringBuffer,boolean)	6	None
26	[BUG]  [BUGGY]    String  pattern  =  pos.getParent();  [CE]  variable  pattern  is  already  defined  in  method  appendQuotedString(String,ParsePosition,StringBuffer,boolean)  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    String  pattern  =  pos.getParent();  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    String  pattern  =  pos.getParent();		non-compiled	[CE]  variable  pattern  is  already  defined  in  method  appendQuotedString(String,ParsePosition,StringBuffer,boolean)	6	None
27	[BUG]  [BUGGY]    String  pattern  =  getPattern();  [CE]  variable  pattern  is  already  defined  in  method  appendQuotedString(String,ParsePosition,StringBuffer,boolean)  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  [BUGGY]    String  pattern  =  getPattern();  [BUGGY]  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	    String  pattern  =  getPattern();		non-compiled	[CE]  variable  pattern  is  already  defined  in  method  appendQuotedString(String,ParsePosition,StringBuffer,boolean)	6	None
49	[BUG]  [BUGGY]  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c,  start,  pos.getIndex()  -  start);  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	add	    appendTo.append(c,  start,  pos.getIndex()  -  start);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	12	1
50	[BUG]  [BUGGY]    appendTo.append(c,  start,  pos.getIndex()  -  start);  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477  [CONTEXT]  StringBuffer  appendTo,  boolean  escapingOn)  {  int  start  =  pos.getIndex();  char[]  c  =  pattern.toCharArray();  if  (escapingOn  &&  c[start]  ==  QUOTE)  {  [BUGGY]    appendTo.append(c,  start,  pos.getIndex()  -  start);  [BUGGY]  return  appendTo  ==  null  ?  null  :  appendTo.append(QUOTE);  }  int  lastHold  =  start;  for  (int  i  =  pos.getIndex();  i  <  pattern.length();  i++)  {  if  (escapingOn  &&  pattern.substring(i).startsWith(ESCAPED_QUOTE))  {  appendTo.append(c,  lastHold,  pos.getIndex()  -  lastHold).append(  QUOTE);  pos.setIndex(i  +  ESCAPED_QUOTE.length());  lastHold  =  pos.getIndex();  continue;  }  [CLASS]  ExtendedMessageFormat  [METHOD]  appendQuotedString  [RETURN_TYPE]  StringBuffer  String  pattern  ParsePosition  pos  StringBuffer  appendTo  boolean  escapingOn  [VARIABLES]  StringBuffer  appendTo  boolean  escapingOn  char  END_FE  QUOTE  START_FE  START_FMT  c  String  DUMMY_PATTERN  ESCAPED_QUOTE  args  customPattern  desc  formatDescription  name  pattern  toPattern  Map  registry  long  serialVersionUID  int  i  lastHold  start  ParsePosition  pos  char[]  c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	    appendTo.append(c,  start,  pos.getIndex()  -  start);		compilable	  [FE]  OutOfMemoryError  testEscapedQuote_LANG_477	12	1
