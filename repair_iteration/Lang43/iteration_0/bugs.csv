bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] appendQuotedString(pattern, pos, stripCustom, true); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: [BUGGY] appendQuotedString(pattern, pos, stripCustom, true); [BUGGY] break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	158	158	1	replace	
2	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: [BUGGY] [BUGGY] appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	158	158	1	add	
3	[BUG] [BUGGY] break; [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [BUGGY] break; [BUGGY] case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; if (c[pos.getIndex()] == START_FMT) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	replace	
4	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [BUGGY] [BUGGY] break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; if (c[pos.getIndex()] == START_FMT) { [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	159	159	1	add	
5	[BUG] [BUGGY] int start = pos.getIndex(); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { [BUGGY] int start = pos.getIndex(); [BUGGY] char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	replace	
6	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { [BUGGY] [BUGGY] int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	419	419	1	add	
7	[BUG] [BUGGY] char[] c = pattern.toCharArray(); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); [BUGGY] char[] c = pattern.toCharArray(); [BUGGY] if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	420	420	1	replace	
8	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); [BUGGY] [BUGGY] char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	420	420	1	add	
9	[BUG] [BUGGY] if (escapingOn && c[start] == QUOTE) { [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); [BUGGY] if (escapingOn && c[start] == QUOTE) { [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	replace	
10	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); [BUGGY] [BUGGY] if (escapingOn && c[start] == QUOTE) { return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	421	421	1	add	
11	[BUG] [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); [BUGGY] } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	replace	
12	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { [BUGGY] [BUGGY] return appendTo == null ? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } [CLASS] ExtendedMessageFormat [METHOD] appendQuotedString [RETURN_TYPE] StringBuffer  String pattern ParsePosition pos StringBuffer appendTo boolean escapingOn [VARIABLES] StringBuffer appendTo boolean escapingOn char END_FE QUOTE START_FE START_FMT c String DUMMY_PATTERN ESCAPED_QUOTE args customPattern desc formatDescription name pattern toPattern Map registry long serialVersionUID int i lastHold start ParsePosition pos char[] c  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	1.0	422	422	1	add	
13	[BUG] [BUGGY] this(pattern, Locale.getDefault(), registry); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public ExtendedMessageFormat(String pattern, Map registry) { [BUGGY] this(pattern, Locale.getDefault(), registry); [BUGGY] } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5773502691896258	112	112	1	replace	
14	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public ExtendedMessageFormat(String pattern, Map registry) { [BUGGY] [BUGGY] this(pattern, Locale.getDefault(), registry); } [CLASS] ExtendedMessageFormat [METHOD] <init> [RETURN_TYPE] Map)  String pattern Map registry [VARIABLES] char END_FE QUOTE START_FE START_FMT String DUMMY_PATTERN ESCAPED_QUOTE pattern toPattern boolean Map registry long serialVersionUID  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5773502691896258	112	112	1	add	
15	[BUG] [BUGGY] ArrayList foundFormats = new ArrayList(); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } [BUGGY] ArrayList foundFormats = new ArrayList(); [BUGGY] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	replace	
16	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } [BUGGY] [BUGGY] ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	148	148	1	add	
17	[BUG] [BUGGY] ArrayList foundDescriptions = new ArrayList(); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); [BUGGY] ArrayList foundDescriptions = new ArrayList(); [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	149	149	1	replace	
18	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); [BUGGY] [BUGGY] ArrayList foundDescriptions = new ArrayList(); StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	149	149	1	add	
19	[BUG] [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); [BUGGY]  ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	150	150	1	replace	
20	[BUG] [BUGGY] [FE] OutOfMemoryError testEscapedQuote_LANG_477 [CONTEXT] public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList foundFormats = new ArrayList(); ArrayList foundDescriptions = new ArrayList(); [BUGGY] [BUGGY] StringBuffer stripCustom = new StringBuffer(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: [CLASS] ExtendedMessageFormat [METHOD] applyPattern [RETURN_TYPE] void  String pattern [VARIABLES] Format[] origFormats ArrayList foundDescriptions foundFormats String DUMMY_PATTERN ESCAPED_QUOTE formatDescription pattern toPattern long serialVersionUID int fmtCount i index start char[] c StringBuffer stripCustom Format f format boolean char END_FE QUOTE START_FE START_FMT Iterator it Map registry ParsePosition pos  	projects/Lang43/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java	0.5	150	150	1	add	
