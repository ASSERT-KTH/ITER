bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!newRecord  ||  value.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  ||  value.isEmpty())  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  ||  value.isEmpty())  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  if(!newRecord  &&  value!=  null  &&  value.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value!=  null  &&  value.isEmpty())  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value!=  null  &&  value.isEmpty())  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  if(!newRecord  &&  object.isEmpty())  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  object.isEmpty())  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  object.isEmpty())  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  if(!newRecord  &&  value.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  if(!newRecord  &&  value.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  if  (!newRecord  &&  value  ==  null)  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  value  ==  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  value  ==  null)  {	  if    (!newRecord    &&    value!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  if  (!newRecord  ||  value!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  ||  value!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  ||  value!=  null)  {	  if    (!newRecord    &&    value!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  if  (!newRecord  &&  object!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  object!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  object!=  null)  {	  if    (!newRecord    &&    value!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  if(!newRecord  &&  value.equals(object.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.equals(object.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.equals(object.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  if(!newRecord  &&  value.equals(value.getName()))  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.equals(value.getName()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.equals(value.getName()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  if(value!=  null  ||!newRecord  &&  value.equals(value.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value!=  null  ||!newRecord  &&  value.equals(value.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value!=  null  ||!newRecord  &&  value.equals(value.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  if(!newRecord  &&  value.equals(format.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.equals(format.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.equals(format.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  if(!newRecord  ||  value.equals(value.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  ||  value.equals(value.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  ||  value.equals(value.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  if(!newRecord  &&  value.equals(value.getRawClass()))  {  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.equals(value.getRawClass()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.equals(value.getRawClass()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append(value.charAt(i));  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append(value.charAt(i));  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append(value.charAt(i));  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append(value[i]);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append(value[i]);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append(value[i]);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset  +  len,  value.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset  +  len,  value.length);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset  +  len,  value.length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len  +  1);  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len  +  1);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len  +  1);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(newRecord)  {  for(final  Appendable  format  :  object.getRecords())  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  for(final  Appendable  format  :  object.getRecords())  {  out.append(format.getDelimiter());  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  for(final  Appendable  format  :  object.getRecords())  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len  +  1);  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len  +  1);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  printAndEscape(object,  offset,  len  +  1);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if(!newRecord  &&  value.getDelimiter()  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.getDelimiter()  ==  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.getDelimiter()  ==  null)  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  if(!newRecord  &&  object.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  object.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  object.getDelimiter()!=  null)  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  if(!newRecord  ||  value.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  ||  value.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  ||  value.getDelimiter()!=  null)  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
25	[BUG]  [BUGGY]  if(!newRecord  &&  value!=  null  &&  value.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value!=  null  &&  value.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value!=  null  &&  value.getDelimiter()!=  null)  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
26	[BUG]  [BUGGY]  if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  if(!newRecord  &&  value.equals(value.toString()))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.equals(value.toString()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.equals(value.toString()))  {	  if    (!newRecord    &&    value.equals(value))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  if  (!newRecord  ||  value.equals(value))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  ||  value.equals(value))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  ||  value.equals(value))  {	  if    (!newRecord    &&    value.equals(value))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  if  (!newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  if(newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  if  (!newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  if(newRecord  ||  value.isEmpty())  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord  ||  value.isEmpty())  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord  ||  value.isEmpty())  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  if(value!=  null  ||!newRecord  &&  value.isEmpty())  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value!=  null  ||!newRecord  &&  value.isEmpty())  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value!=  null  ||!newRecord  &&  value.isEmpty())  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
40	[BUG]  [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append('n');  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
41	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  out.append(object);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  out.append(object);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
42	[BUG]  [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append( "n ");  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append( "n ");  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append( "n ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  printAndEscape(object,  offset,  offset  +  len);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append( ", ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append( ", ");  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord)  {  printAndEscape(object,  offset,  offset  +  len);  }  else  {  out.append( ", ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  Appendable  format  =  getFormat();  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  Appendable  format  =  getFormat();  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	Appendable  format  =  getFormat();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  if  (!newRecord  &&  value.equals(object))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  value.equals(object))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  value.equals(object))  {	  if    (!newRecord    &&    value.equals(value))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
47	[BUG]  [BUGGY]  if(newRecord  ||  value.equals(value))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord  ||  value.equals(value))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord  ||  value.equals(value))  {	  if    (!newRecord    &&    value.equals(value))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  if  (!newRecord  &&  object.equals(value))  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  object.equals(value))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  object.equals(value))  {	  if    (!newRecord    &&    value.equals(value))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  if(value  ==  null  ||!newRecord  &&  value.equals(value.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value  ==  null  ||!newRecord  &&  value.equals(value.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value  ==  null  ||!newRecord  &&  value.equals(value.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
50	[BUG]  [BUGGY]  if(newRecord  ||  value.equals(value.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord  ||  value.equals(value.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord  ||  value.equals(value.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  if(!newRecord  &&  value.equals(value.getEmptyValue()))  {  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.equals(value.getEmptyValue()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.equals(value.getEmptyValue()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  if  (newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (newRecord  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
53	[BUG]  [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  value.equals(value)))  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  value.equals(value)))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  value.equals(value)))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
55	[BUG]  [BUGGY]  if(value  ==  null  ||!newRecord  &&  value.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value  ==  null  ||!newRecord  &&  value.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value  ==  null  ||!newRecord  &&  value.getDelimiter()!=  null)  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
56	[BUG]  [BUGGY]  if(newRecord  ||  value.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(newRecord  ||  value.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(newRecord  ||  value.getDelimiter()!=  null)  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
57	[BUG]  [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
58	[BUG]  [BUGGY]  if(value!=  null  &&!newRecord  &&  value.equals(value.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value!=  null  &&!newRecord  &&  value.equals(value.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value!=  null  &&!newRecord  &&  value.equals(value.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
59	[BUG]  [BUGGY]  if(!newRecord  &&  object.equals(value.getDelimiter()))  {  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  object.equals(value.getDelimiter()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  object.equals(value.getDelimiter()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
60	[BUG]  [BUGGY]  if(!newRecord  &&  value.equals(value.getLength()))  {  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.equals(value.getLength()))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.equals(value.getLength()))  {	  if(!newRecord    &&    value.equals(value.getDelimiter()))    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
61	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  offset  +  len);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  offset  +  len);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
62	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  offset  +  len,  value.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  offset  +  len,  value.length);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndEscape(object,  offset,  offset  +  len,  value.length);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append('n');  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  out.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
64	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  if(format!=  null)  {  out.append(format.getName());  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  if(format!=  null)  {  out.append(format.getName());  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  if(format!=  null)  {  out.append(format.getName());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
65	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  out.append(format.getDelimiter());  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
66	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  if(format!=  null)  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  if(format!=  null)  {  out.append(format.getDelimiter());  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  CharSequence  format  =  object.getFormat();  if(format!=  null)  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
67	[BUG]  [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndRecord(object,  offset,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndRecord(object,  offset,  offset  +  len);  }  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(object!=  null)  {  for(int  i  =  0,  len  =  value.length();  i  <  len;  ++i)  {  if(!format.isEscaping())  {  printAndRecord(object,  offset,  offset  +  len);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
68	[BUG]  [BUGGY]  if  (!newRecord  &&  value!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if  (!newRecord  &&  value!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if  (!newRecord  &&  value!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!newRecord    &&    value!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
69	[BUG]  [BUGGY]  if(!newRecord  &&  value!=  null  &&  object.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value!=  null  &&  object.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value!=  null  &&  object.getDelimiter()!=  null)  {	  if    (!newRecord    &&    value!=    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
70	[BUG]  [BUGGY]  if(!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_QUOTE_FIELD_NAMES))  {	  if    (!newRecord    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
71	[BUG]  [BUGGY]  if(value!=  null  &&!newRecord  &&  value.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value!=  null  &&!newRecord  &&  value.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value!=  null  &&!newRecord  &&  value.getDelimiter()!=  null)  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
72	[BUG]  [BUGGY]  if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.getDelimiter()!=  null  &&  isEnabled(Feature.QUOTE_NON_NULL_VALUE))  {	  if(!newRecord    &&    value.getDelimiter()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
73	[BUG]  [BUGGY]  if(value!=  null  &&!newRecord  &&  value.equals(value))  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(value!=  null  &&!newRecord  &&  value.equals(value))  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(value!=  null  &&!newRecord  &&  value.equals(value))  {	  if    (!newRecord    &&    value.equals(value))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
74	[BUG]  [BUGGY]  if(!newRecord  &&  value.isEmpty()  &&  object.getDelimiter()!=  null)  {  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    private  void  print(final  Object  object,  final  CharSequence  value,  final  int  offset,  final  int  len)  throws  IOException  {    [BUGGY]  if(!newRecord  &&  value.isEmpty()  &&  object.getDelimiter()!=  null)  {  [BUGGY]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	111	111	1	replace	if(!newRecord  &&  value.isEmpty()  &&  object.getDelimiter()!=  null)  {	  if(!newRecord    &&    value.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
