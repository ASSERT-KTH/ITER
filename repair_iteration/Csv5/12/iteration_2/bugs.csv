bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  strValue  =  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  null?  Constants.EMPTY  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.EMPTY  :  value.toString();	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString();	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  strValue  =  null  ||  value  ==  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  null  ||  value  ==  null?  Constants.EMPTY  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null  ||  value  ==  null?  Constants.EMPTY  :  value.toString();	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
7	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
9	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
10	[BUG]  [BUGGY]  strValue  =  null?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  null?  Constants.NULL  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NULL  :  value.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  value.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NULL  :  value.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  null?  Constants.NONE  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NONE  :  value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
20	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
21	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  key.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  key.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  key.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  nullString  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  nullString  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  nullString  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  1?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  null  :  value.toString();	  strValue    =    value    ==    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  strValue  =  null?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  null?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  null  :  value.toString();	  strValue    =    value    ==    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Null.EMPTY  :  value.toString();	  strValue    =    value    ==    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  print(nullString,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  print(nullString,  null,  0,  strValue.length());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(nullString,  null,  0,  strValue.length());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  print(strValue,  nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  print(strValue,  nullString,  0,  strValue.length());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(strValue,  nullString,  0,  strValue.length());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
32	[BUG]  [BUGGY]  this.print(nullString,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  this.print(nullString,  null,  0,  strValue.length());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(nullString,  null,  0,  strValue.length());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  strValue  =  nullString  +  format.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  format.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  format.toString();	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(value);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(value);  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toString(value);	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  String.valueOf(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value.toString());	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  strValue  =  nullString  +  this.value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  this.value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.value.toString();	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  strValue  =  nullString  +  length.toString();  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  length.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  length.toString();	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value.toString());  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value.toString());	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
50	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
51	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  >=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  >=  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  >=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
52	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
53	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
54	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
55	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString!=  null?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  null  :  value.toString();	  strValue    =    value!=    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
56	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
57	[BUG]  [BUGGY]  strValue  =  nullString  >=  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  >=  null?  Constants.EMPTY  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >=  null?  Constants.EMPTY  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
58	[BUG]  [BUGGY]  strValue  =  nullString  >>  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  >>  null?  Constants.EMPTY  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >>  null?  Constants.EMPTY  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
59	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  nullString;	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
63	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
64	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?   "null "  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?   "null "  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  0?   "null "  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
68	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
69	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Null  :  value.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Null  :  value.toString();	  strValue    =    value    ==    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
71	[BUG]  [BUGGY]  strValue  =  value  +  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  +  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  nullString.toString();	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value);  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value);	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  nullString.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NULL  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
74	[BUG]  [BUGGY]  strValue  =  value  ==  null?  NullString  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  NullString  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  NullString  :  value.toString();	  strValue    =    value!=    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
75	[BUG]  [BUGGY]  strValue  =  values  ==  null?  nullString  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  values  ==  null?  nullString  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  values  ==  null?  nullString  :  value.toString();	  strValue    =    value!=    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
76	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
77	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
78	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  nullString.toString();	  strValue    =    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
79	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
80	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  nullString.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NONE  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
81	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value.toString());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  print(null,  nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  print(null,  nullString,  0,  strValue.length());  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  nullString,  0,  strValue.length());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
83	[BUG]  [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  out.print(nullString);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
84	[BUG]  [BUGGY]  if(strValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
85	[BUG]  [BUGGY]  out.print(nullString);  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  out.print(nullString);  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(nullString);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
86	[BUG]  [BUGGY]  if(strValue  ==  null)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue  ==  null)  {  out.print(nullString);  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  out.print(nullString);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
87	[BUG]  [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  else  {  printNull();  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  else  {  printNull();  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  out.print(nullString);  }  else  {  printNull();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
88	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NullString  :  value.toString();	  strValue    =    value!=    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  strValue  =  nullString  +  format.getName();  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  +  format.getName();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  format.getName();	  strValue    =    nullString    +    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
90	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.EMPTY  :  value.toString();	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
91	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.UNKNOWN  :  value.toString();	  strValue    =    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
92	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  key.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  key.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  key.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
94	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  strValue  =  nullString  ||  format.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ||  format.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  format.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
96	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;	  strValue    =    nullString;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
97	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
99	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
100	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
101	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
102	[BUG]  [BUGGY]  if(strValue!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  if(strValue!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
103	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  this.value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  this.value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  this.value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
104	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
105	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {    [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  value.toString();  [BUGGY]    }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
