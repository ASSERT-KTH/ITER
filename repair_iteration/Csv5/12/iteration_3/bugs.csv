bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;	  if(strValue!=    null)    {    out.print(nullString);    }    else    {    printNull();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
2	[BUG]  [BUGGY]  final  String  strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString!=  null?  Constants.EMPTY  :  nullString;	  if(strValue!=    null)    {    out.print(nullString);    }    else    {    printNull();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
3	[BUG]  [BUGGY]  if(strValue  ==  null)  {  out.print(nullString);  }  else  {  printNull();  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  out.print(nullString);  }  else  {  printNull();  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  out.print(nullString);  }  else  {  printNull();  }	  if(strValue!=    null)    {    out.print(nullString);    }    else    {    printNull();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
4	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
5	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.trim();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.trim();	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
6	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
7	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.substring(1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.substring(1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.substring(1);	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
8	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  new  String(value.toString());	  strValue    =    nullString    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
10	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NONE  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NONE  :  value.toString();	  strValue    =    nullString    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
11	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NONE  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
12	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  String.valueOf(value.toString());	  strValue    =    nullString    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
13	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NUMBER  :  nullString;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NUMBER  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NUMBER  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
14	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  String.valueOf(nullString);	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
15	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
16	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  new  String(nullString);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  new  String(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  new  String(nullString);	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
17	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
18	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NONE  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
19	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
20	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  null;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  null;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  null;	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
21	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
22	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
23	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
24	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
25	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  String.valueOf(strValue):  nullString.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  String.valueOf(strValue):  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  String.valueOf(strValue):  nullString.toString();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
26	[BUG]  [BUGGY]  final  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toString();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
27	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(nullString):  nullString.toString();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(nullString):  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  String.valueOf(nullString):  nullString.toString();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
28	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
29	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
30	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  NoSuchElement.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  NoSuchElement.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  NoSuchElement.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
31	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
32	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
33	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  String.valueOf(nullString);	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
34	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  new  String(nullString);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  new  String(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  new  String(nullString);	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
35	[BUG]  [BUGGY]  strValue  =  null?  Constants.EMPTY  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.EMPTY  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.EMPTY  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
36	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
37	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
38	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.EMPTY  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
39	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.EMPTY  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
40	[BUG]  [BUGGY]  strValue  =  null?  Constants.EMPTY  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.EMPTY  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.EMPTY  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
41	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.getName(value);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.getName(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.getName(value);	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
42	[BUG]  [BUGGY]  strValue  =  nullString  +  this.format.getName();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.format.getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.format.getName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
43	[BUG]  [BUGGY]  strValue  =  nullString  +  format.getQualifiedName();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  format.getQualifiedName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  format.getQualifiedName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
44	[BUG]  [BUGGY]  strValue  =  nullString  +  value.getName();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  value.getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  value.getName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
45	[BUG]  [BUGGY]  strValue  =  nullString  +  format.getSimpleName();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  format.getSimpleName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  format.getSimpleName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
47	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
48	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString;	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
49	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  print(nullString);  }  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  print(nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
50	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NullString);  }  [CE]  <identifier>  expected  [FE]                                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NullString);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
51	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NUMBER_STRING);  }  [CE]  <identifier>  expected  [FE]                                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NUMBER_STRING);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NUMBER_STRING);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
52	[BUG]  [BUGGY]  print(strValue,  nullString,  0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(strValue,  nullString,  0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(strValue,  nullString,  0,  strValue.length()  -  1);	  print(strValue,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
53	[BUG]  [BUGGY]  print(nullString,  nullValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(nullString,  nullValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(nullString,  nullValue,  0,  strValue.length());	  print(strValue,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
54	[BUG]  [BUGGY]  print(strValue,  nullString,  0,  strValue.length()  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(strValue,  nullString,  0,  strValue.length()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(strValue,  nullString,  0,  strValue.length()  +  1);	  print(strValue,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
55	[BUG]  [BUGGY]  print(nullString,  strValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(nullString,  strValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(nullString,  strValue,  0,  strValue.length());	  print(strValue,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
56	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
57	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
58	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  1?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
59	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
60	[BUG]  [BUGGY]  ||(strValue!=  null  &&  strValue.length()  >  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null  &&  strValue.length()  >  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null  &&  strValue.length()  >  0))  {  throw  new  IllegalStateException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
61	[BUG]  [BUGGY]  ||(strValue!=  null  &&  strValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null  &&  strValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null  &&  strValue.equals( " ")))  {  throw  new  IllegalStateException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
62	[BUG]  [BUGGY]  ||(strValue  ==  null  &&  strValue.length()  >  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue  ==  null  &&  strValue.length()  >  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue  ==  null  &&  strValue.length()  >  0))  {  throw  new  IllegalStateException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
63	[BUG]  [BUGGY]  ||(strValue!=  null?  nullString  :  strValue.length()))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null?  nullString  :  strValue.length()))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null?  nullString  :  strValue.length()))  {  throw  new  IllegalStateException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
64	[BUG]  [BUGGY]  ||(strValue!=  null  &&  value.equals(strValue)))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null  &&  value.equals(strValue)))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null  &&  value.equals(strValue)))  {  throw  new  IllegalStateException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
65	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NULL  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NULL  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NULL  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
66	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(nullString);	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
67	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.trim();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.trim();	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
68	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(nullString).toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(nullString).toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(nullString).toString();	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
69	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.substring(1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.substring(1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.substring(1);	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
70	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
71	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
73	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.isEmpty())  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.isEmpty())  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.isEmpty())  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
74	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
75	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
76	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
77	[BUG]  [BUGGY]  strValue  =  nullString  {  null  &&  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null  &&  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null  &&  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
78	[BUG]  [BUGGY]  strValue  =  nullString  >>  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >>  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >>  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
79	[BUG]  [BUGGY]  strValue  =  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
80	[BUG]  [BUGGY]  strValue  =  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.EMPTY  :  nullString;	  strValue    =    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
81	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NULL  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
82	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
83	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
84	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  new  String(nullString);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  new  String(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  new  String(nullString);	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
85	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
86	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Null  :  nullString.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Null  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Null  :  nullString.toString();	  strValue    =    nullString    ==    null?    Null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
87	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
88	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
89	[BUG]  [BUGGY]  strValue  =  value!=  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  nullString  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
90	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  >  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  >  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().length()  >  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
91	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ==    null?    nullString    :    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
92	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  nullString.toString();	  strValue    =    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
93	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NONE  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  new  String(value.toString());	  strValue    =    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
94	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  key.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NONE  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  key.toString();	  strValue    =    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
95	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  name.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NONE  :  name.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  name.toString();	  strValue    =    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
96	[BUG]  [BUGGY]  strValue  =  null?  NullString  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  NullString  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  NullString  :  value.toString();	  strValue    =    value    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
97	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
98	[BUG]  [BUGGY]  strValue  =  value!=  null?  NullString  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  NullString  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  NullString  :  value.toString();	  strValue    =    value    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
99	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
101	[BUG]  [BUGGY]  out.print(nullString,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(nullString,  null,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(nullString,  null,  0,  strValue.length());	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
102	[BUG]  [BUGGY]  if(strValue!=  null  ||  strValue.length()  ==  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null  ||  strValue.length()  ==  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null  ||  strValue.length()  ==  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
103	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
104	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(value,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(value,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(value,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
105	[BUG]  [BUGGY]  strValue  =  key  ==  null?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key  ==  null?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key  ==  null?  Constants.NULL  :  value.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
106	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  key.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  key.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
107	[BUG]  [BUGGY]  strValue  =  null?  Constants.NULL  :  key.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NULL  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NULL  :  key.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
108	[BUG]  [BUGGY]  strValue  =  key!=  null?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key!=  null?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key!=  null?  Constants.NULL  :  value.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
109	[BUG]  [BUGGY]  strValue  =  key  ==  null?  Constants.NULL  :  key.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key  ==  null?  Constants.NULL  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key  ==  null?  Constants.NULL  :  key.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
110	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  null  :  value.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  null  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null?  null  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
111	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value!=  null?  null  :  value.toString());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value!=  null?  null  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value!=  null?  null  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
112	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(nullString.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
113	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NULL  :  value.toString());  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NULL  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NULL  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
114	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null? " "  :  value.toString());  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null? " "  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null? " "  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
115	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.EMPTY  :  value.toString());  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.EMPTY  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.EMPTY  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
116	[BUG]  [BUGGY]  strValue  =  null?  Constants.NULL  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NULL  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NULL  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
117	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
118	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
119	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NULL  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
120	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NULL  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
121	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?   "null "  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?   "null "  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().trim().length()  ==  0?   "null "  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?       "null   "    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
122	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?   "null "  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?   "null "  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()!=  0?   "null "  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?       "null   "    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
123	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Context.NAME  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Context.NAME  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Context.NAME  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
124	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString).toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString).toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString).toString();	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
125	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString.toString());	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
126	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
127	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.trim();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  nullString.trim();	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
128	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  String.valueOf(nullString);	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
129	[BUG]  [BUGGY]  strValue  =  value  ==  null?  NullString  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  NullString  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  NullString  :  nullString.toString();	  strValue    =    nullString    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
130	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NullString  :  nullString.toString();	  strValue    =    nullString    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
131	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
132	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
133	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
134	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Context.NAME  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Context.NAME  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.trim().length()  ==  0?  Context.NAME  :  value.toString();	  strValue    =    nullString    ||    value.trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
135	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
136	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
138	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
139	[BUG]  [BUGGY]  out.print(null,  nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(null,  nullString,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(null,  nullString,  0,  strValue.length());	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
140	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length()  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length()  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length()	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
141	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
142	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
143	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  nullString.length();  ++i)  {  out.print(null,  nullString);  }  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  nullString.length();  ++i)  {  out.print(null,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0,  strValue.length();  i  <  nullString.length();  ++i)  {  out.print(null,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
146	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
147	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
148	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  >=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
149	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NULL  :  value.toString();	  strValue    =    value!=    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	73	None	replace
150	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  1?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  1?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()!=  1?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
151	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
152	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  2?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  2?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  2?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
153	[BUG]  [BUGGY]  strValue  =  nullString  +  format.toUpperCase();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  format.toUpperCase();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  format.toUpperCase();	  strValue    =    nullString    +    format.toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
154	[BUG]  [BUGGY]  strValue  =  nullString  +  this.format.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.format.toString();	  strValue    =    nullString    +    format.toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
155	[BUG]  [BUGGY]  strValue  =  nullString  +  format.getClass().getName();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  format.getClass().getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  format.getClass().getName();	  strValue    =    nullString    +    format.toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
156	[BUG]  [BUGGY]  strValue  =  nullString  +  this.length.toString();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.length.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.length.toString();	  strValue    =    nullString    +    length.toString();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
157	[BUG]  [BUGGY]  strValue  =  nullString  +  size.toString();  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  size.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  size.toString();	  strValue    =    nullString    +    length.toString();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
158	[BUG]  [BUGGY]  strValue  =  nullString  +  length.trim();  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  length.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  length.trim();	  strValue    =    nullString    +    length.toString();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
159	[BUG]  [BUGGY]  strValue  =  nullString  +  length.substring(1);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  length.substring(1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  length.substring(1);	  strValue    =    nullString    +    length.toString();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
160	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
161	[BUG]  [BUGGY]  strValue  =  nullString  >>  null?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >>  null?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >>  null?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
162	[BUG]  [BUGGY]  strValue  =  nullString  [Delete]  null  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  [Delete]  null  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  [Delete]  null  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
163	[BUG]  [BUGGY]  strValue  =  nullString  >=  null?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >=  null?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >=  null?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
164	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.UNKNOWN  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
165	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
166	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  new  String(value.toString());	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
167	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.UNKNOWN  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.UNKNOWN  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.UNKNOWN  :  value.toString();	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
168	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  String.valueOf(value.toString());	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
169	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  name.toString();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  name.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  name.toString();	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
170	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  >=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  >=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().trim().length()  >=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    >=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
171	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Context.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Context.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Context.NONE  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
172	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString).toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString).toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString).toString();	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
173	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
174	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString.toString());	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
175	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  value.toString();	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
176	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  String.valueOf(nullString);	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
177	[BUG]  [BUGGY]  strValue  =  this.value  +  nullString.toString();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  this.value  +  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  this.value  +  nullString.toString();	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
178	[BUG]  [BUGGY]  strValue  =  nullString  +  this.value.getClass().getName();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.value.getClass().getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.value.getClass().getName();	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
179	[BUG]  [BUGGY]  strValue  =  nullString  +  this.value.substring(0,  this.value.length()  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.value.substring(0,  this.value.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.value.substring(0,  this.value.length()  -  1);	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
180	[BUG]  [BUGGY]  strValue  =  nullString  /  this.value.toString();  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  /  this.value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  /  this.value.toString();	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
181	[BUG]  [BUGGY]  strValue  =  nullString  +  this.value.trim();  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.value.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.value.trim();	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
182	[BUG]  [BUGGY]  strValue  =  nullString  +  this.value.substring(0,  this.value.length()  -  2);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.value.substring(0,  this.value.length()  -  2);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.value.substring(0,  this.value.length()  -  2);	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
183	[BUG]  [BUGGY]  this.print(strValue,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(strValue,  null,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(strValue,  null,  0,  strValue.length());	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
184	[BUG]  [BUGGY]  this.print(nullString,  null,  0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(nullString,  null,  0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(nullString,  null,  0,  strValue.length()  -  1);	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
185	[BUG]  [BUGGY]  this.print(nullString,  null,  0,  strValue.length()  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(nullString,  null,  0,  strValue.length()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(nullString,  null,  0,  strValue.length()  +  1);	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
186	[BUG]  [BUGGY]  this.print(null,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(null,  null,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(null,  null,  0,  strValue.length());	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
187	[BUG]  [BUGGY]  this.print(strValue,  null,  0,  nullString.length());  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(strValue,  null,  0,  nullString.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(strValue,  null,  0,  nullString.length());	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
188	[BUG]  [BUGGY]  this.print(nullString,  null,  0,  strValue.length()  -  2);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(nullString,  null,  0,  strValue.length()  -  2);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(nullString,  null,  0,  strValue.length()  -  2);	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
189	[BUG]  [BUGGY]  ||(strValue!=  null  &&  strValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null  &&  strValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null  &&  strValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
190	[BUG]  [BUGGY]  ||(strValue!=  null  &&  strValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null  &&  strValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null  &&  strValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
191	[BUG]  [BUGGY]  ||(strValue  ==  null  &&  strValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue  ==  null  &&  strValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue  ==  null  &&  strValue.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
192	[BUG]  [BUGGY]  ||(strValue!=  null?  nullString  :  strValue.length()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null?  nullString  :  strValue.length()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null?  nullString  :  strValue.length()))  {  throw  new  IllegalArgumentException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
193	[BUG]  [BUGGY]  ||(strValue!=  null  &&  value.equals(strValue)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null  &&  value.equals(strValue)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null  &&  value.equals(strValue)))  {  throw  new  IllegalArgumentException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
194	[BUG]  [BUGGY]  if(strValue!=  null  ||  strValue.length()  ==  0)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null  ||  strValue.length()  ==  0)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null  ||  strValue.length()  ==  0)  {  out.print(nullString);  }	  if(strValue!=    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
195	[BUG]  [BUGGY]  out.print(strValue);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(strValue);	  if(strValue!=    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
196	[BUG]  [BUGGY]  if(strValue  ==  null  ||  strValue.length()  ==  0)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null  ||  strValue.length()  ==  0)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null  ||  strValue.length()  ==  0)  {  out.print(nullString);  }	  if(strValue!=    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
197	[BUG]  [BUGGY]  if(strValue!=  null  ||  strValue  ==  null)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null  ||  strValue  ==  null)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null  ||  strValue  ==  null)  {  out.print(nullString);  }	  if(strValue!=    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
198	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString();	  strValue    =    value!=    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	90	None	replace
199	[BUG]  [BUGGY]  strValue  =  this.value  ==  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  this.value  ==  null?  Constants.NONE  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  this.value  ==  null?  Constants.NONE  :  value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	103	None	replace
200	[BUG]  [BUGGY]  strValue  =  this.value!=  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  this.value!=  null?  Constants.NONE  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  this.value!=  null?  Constants.NONE  :  value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	103	None	replace
201	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  this.value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  this.value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  this.value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	103	None	replace
202	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  this.value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NONE  :  this.value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  this.value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	103	None	replace
203	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()!=  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
204	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
205	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  >=  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
206	[BUG]  [BUGGY]  strValue  =  nullString|  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString|  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString|  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
207	[BUG]  [BUGGY]  print(strValue,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(strValue,  null,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(strValue,  null,  0,  strValue.length());	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
208	[BUG]  [BUGGY]  print(nullString,  null,  0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(nullString,  null,  0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(nullString,  null,  0,  strValue.length()  -  1);	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
209	[BUG]  [BUGGY]  print(strValue,  null,  0,  nullString.length());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(strValue,  null,  0,  nullString.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(strValue,  null,  0,  nullString.length());	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
210	[BUG]  [BUGGY]  print(nullString,  null,  0,  strValue.length()  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(nullString,  null,  0,  strValue.length()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(nullString,  null,  0,  strValue.length()  +  1);	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
211	[BUG]  [BUGGY]  print(null,  null,  0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  null,  0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  null,  0,  strValue.length()  -  1);	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
212	[BUG]  [BUGGY]  print(nullString,  null,  0,  strValue.length()  -  2);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(nullString,  null,  0,  strValue.length()  -  2);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(nullString,  null,  0,  strValue.length()  -  2);	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
213	[BUG]  [BUGGY]  strValue  =  null  &&  value  ==  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null  &&  value  ==  null?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null  &&  value  ==  null?  Constants.EMPTY  :  value.toString();	  strValue    =    null    ||    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
214	[BUG]  [BUGGY]  strValue  =  nullString  ||  value  ==  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value  ==  null?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value  ==  null?  Constants.EMPTY  :  value.toString();	  strValue    =    null    ||    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
215	[BUG]  [BUGGY]  strValue  =  null  ||  value!=  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null  ||  value!=  null?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null  ||  value!=  null?  Constants.EMPTY  :  value.toString();	  strValue    =    null    ||    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
216	[BUG]  [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
217	[BUG]  [BUGGY]  if(strValue  ==  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
218	[BUG]  [BUGGY]  out.print(nullString,  strValue);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(nullString,  strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(nullString,  strValue);	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
219	[BUG]  [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  out.print(nullString);  }  else  {  throw  new  IllegalStateException( " ");  }	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
220	[BUG]  [BUGGY]  strValue  =  value  +  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  String.valueOf(nullString.toString());	  strValue    =    value    +    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
221	[BUG]  [BUGGY]  strValue  =  value  +  format.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  format.toString();	  strValue    =    value    +    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
222	[BUG]  [BUGGY]  strValue  =  value  +  String.valueOf(nullString).toString();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  String.valueOf(nullString).toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  String.valueOf(nullString).toString();	  strValue    =    value    +    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
223	[BUG]  [BUGGY]  strValue  =  value  +  this.nullString.toString();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  this.nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  this.nullString.toString();	  strValue    =    value    +    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
224	[BUG]  [BUGGY]  strValue  =  value  +  FormatUtils.toString(nullString);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  FormatUtils.toString(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  FormatUtils.toString(nullString);	  strValue    =    value    +    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
225	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  NoSuchElement.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  NoSuchElement.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  NoSuchElement.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
226	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
227	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
228	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  value.toString();	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
229	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  String.valueOf(nullString).toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  String.valueOf(nullString).toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  String.valueOf(nullString).toString();	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
230	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()!=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
231	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
232	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  String.valueOf(value.toString());	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
233	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  1?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  1?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  1?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
234	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()  >=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    >=    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
235	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
236	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
237	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
238	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.isEmpty())  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.isEmpty())  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.isEmpty())  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
239	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
240	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
241	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NONE  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
242	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NONE  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
243	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(nullString.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
244	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value.toString()  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value.toString()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value.toString()  +  1);	  strValue    =    value    ==    null?    Constants.NONE    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
245	[BUG]  [BUGGY]  strValue  =  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.EMPTY  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
246	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
247	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.EMPTY  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
248	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(nullString.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
249	[BUG]  [BUGGY]  String  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
250	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
251	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
252	[BUG]  [BUGGY]  strValue  =  nullString  {  null  &&  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null  &&  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null  &&  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
253	[BUG]  [BUGGY]  strValue  =  nullString  >>  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >>  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >>  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
254	[BUG]  [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
255	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
256	[BUG]  [BUGGY]  strValue  =  value!=  null?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
257	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?   "null "  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?   "null "  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?   "null "  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
258	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  >=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  >=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()  >=  0?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
259	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
260	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()!=    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
261	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  name.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  name.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  name.toString();	  strValue    =    nullString    ==    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
262	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  null;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  null;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  null;	  strValue    =    value    ==    null?    Constants.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
263	[BUG]  [BUGGY]  this.print(null,  nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(null,  nullString,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(null,  nullString,  0,  strValue.length());	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
264	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
265	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(0));  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(0));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(0));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
266	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
267	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
268	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
269	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
270	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Context.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Context.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Context.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
271	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString);	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
272	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
273	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
274	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(strValue);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(strValue);	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
275	[BUG]  [BUGGY]  strValue  =  nullString  ||  format.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  format.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  format.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    ||    format.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
276	[BUG]  [BUGGY]  strValue  =  nullString  &&  format.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  format.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  format.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    format.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
277	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?  null  :  format.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?  null  :  format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()!=  0?  null  :  format.toString();	  strValue    =    nullString    ||    format.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
278	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  format.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  format.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  format.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    format.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
279	[BUG]  [BUGGY]  strValue  =  null?  Constants.NULL  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NULL  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NULL  :  nullString.toString();	  strValue    =    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
280	[BUG]  [BUGGY]  strValue  =  null?  Constants.NULL  :  String.valueOf(value);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NULL  :  String.valueOf(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NULL  :  String.valueOf(value);	  strValue    =    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
281	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(null);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(null);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toString(null);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
282	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(strValue);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toString(strValue);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
283	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(value)+  1;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(value)+  1;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toString(value)+  1;	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
284	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(this.format);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(this.format);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toString(this.format);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
285	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(value,  out);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toString(value,  out);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toString(value,  out);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
286	[BUG]  [BUGGY]  strValue  =  null  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
287	[BUG]  [BUGGY]  strValue  =  null  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null  &&  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
288	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  1?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().length()  ==  1?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().length()  ==  1?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
289	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  1?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()!=  1?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()!=  1?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
290	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  2?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  2?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  2?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
291	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Constants.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Constants.UNKNOWN  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Constants.UNKNOWN  :  nullString;	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
292	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
293	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString;	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
294	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  new  String(nullString);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  new  String(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  new  String(nullString);	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
295	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.UNKNOWN  :  nullString;	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
296	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
298	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  value.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  value.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  value.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
299	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(Null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(Null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(Null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
300	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Null.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Null.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Null.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    Null.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
301	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Null.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    Null.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
302	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Null.EMPTY  :  String.valueOf(value.toString());	  strValue    =    nullString    ==    null?    Null.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
303	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Null.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Null.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Null.EMPTY  :  value.toString();	  strValue    =    nullString    ==    null?    Null.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
304	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Null.EMPTY  :  new  String(value.toString());	  strValue    =    nullString    ==    null?    Null.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
305	[BUG]  [BUGGY]  strValue  =  key  ==  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key  ==  null?  Constants.NONE  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key  ==  null?  Constants.NONE  :  value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
306	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  key.toString();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  key.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
307	[BUG]  [BUGGY]  strValue  =  key  ==  null?  Constants.NONE  :  key.toString();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key  ==  null?  Constants.NONE  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key  ==  null?  Constants.NONE  :  key.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
308	[BUG]  [BUGGY]  strValue  =  key!=  null?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key!=  null?  Constants.NONE  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key!=  null?  Constants.NONE  :  value.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
309	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
310	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
311	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
312	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i)  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i)  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i)	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
313	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
314	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
315	[BUG]  [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
316	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  1?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  1?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()  ==  1?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
317	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  >>  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  >>  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()  >>  0?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
318	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()!=  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()!=  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
319	[BUG]  [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
320	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  1?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  1?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  1?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
321	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  String.valueOf(value.toString());	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
322	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(nullString);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  new  String(nullString);	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
323	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(null);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(null);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(null);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
324	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(this.format);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(this.format);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(this.format);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
325	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(strValue);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(strValue);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
326	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(value);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(value);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
327	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value,  newRecord);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value,  newRecord);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value,  newRecord);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
328	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(nullString,  value);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(nullString,  value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(nullString,  value);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
329	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
330	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NUMBER  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NUMBER  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NUMBER  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
331	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  new  String(value.toString());	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
332	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  String.valueOf(value.toString());	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
333	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  NUMBER.toString();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  NUMBER.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  NUMBER.toString();	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
334	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  this.value.toString();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  this.value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  this.value.toString();	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
335	[BUG]  [BUGGY]  strValue  =  nullString  {  null?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null?  null  :  value.toString();	  strValue    =    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
336	[BUG]  [BUGGY]  String  strValue  =  null?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  null?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  null?  null  :  value.toString();	  strValue    =    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
337	[BUG]  [BUGGY]  strValue  =  null?  Constants.NULL  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NULL  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NULL  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
338	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.NULL  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NULL  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
339	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(nullString.toString());	  strValue    =    value    ==    null?    Constants.NULL    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
340	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString()  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString()  +  1);	  strValue    =    value    ==    null?    Constants.NULL    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
341	[BUG]  [BUGGY]  print(null,  nullString,  0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  nullString,  0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  nullString,  0,  strValue.length()  -  1);	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
342	[BUG]  [BUGGY]  print(null,  nullString,  0,  strValue.length()  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  nullString,  0,  strValue.length()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  nullString,  0,  strValue.length()  +  1);	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
343	[BUG]  [BUGGY]  print(null,  nullString,  0,  strValue.length()  -  2);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  nullString,  0,  strValue.length()  -  2);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  nullString,  0,  strValue.length()  -  2);	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
344	[BUG]  [BUGGY]  print(null,  strValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  strValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  strValue,  0,  strValue.length());	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
345	[BUG]  [BUGGY]  print(null,  nullString,  0,  strValue.length()  -  4);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  nullString,  0,  strValue.length()  -  4);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  nullString,  0,  strValue.length()  -  4);	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
346	[BUG]  [BUGGY]  strValue  =  null?  Constants.UNKNOWN  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.UNKNOWN  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.UNKNOWN  :  value.toString();	  strValue    =    value    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
347	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.UNKNOWN  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.UNKNOWN  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.UNKNOWN  :  value.toString();	  strValue    =    value    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
348	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.UNKNOWN  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
349	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.UNKNOWN  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
350	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NON_OBJECT  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NON_OBJECT  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NON_OBJECT  :  value.toString();	  strValue    =    nullString    ==    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
351	[BUG]  [BUGGY]  strValue  =  nullString!=  null?  Context.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString!=  null?  Context.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString!=  null?  Context.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
352	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString).toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString).toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString).toString();	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
353	[BUG]  [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  final  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	final  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
354	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.EMPTY  :  String.valueOf(nullString.toString());	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
355	[BUG]  [BUGGY]  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	String  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
356	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
357	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NONE  :  new  String(value.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
358	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  new  String(nullString.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.NONE  :  new  String(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NONE  :  new  String(nullString.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
359	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(value.toString());  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
360	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?  null  :  value.toString());  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?  null  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value  ==  null?  null  :  value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
361	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(strValue.toString());  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(strValue.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(strValue.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
362	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value!=  null?  null  :  value.toString());  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value!=  null?  null  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value!=  null?  null  :  value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
363	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(nullString.toString());  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(nullString.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
364	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(nullString.toString());  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(nullString.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
365	[BUG]  [BUGGY]  strValue  =  nullString  +  this.value.getClass();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  this.value.getClass();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  this.value.getClass();	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
366	[BUG]  [BUGGY]  strValue  =  value  +  this.value.toString();  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  this.value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  this.value.toString();	  strValue    =    nullString    +    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
367	[BUG]  [BUGGY]  strValue  =  NULL_STRING  +  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  NULL_STRING  +  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  NULL_STRING  +  value.toString();	  strValue    =    value    +    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
368	[BUG]  [BUGGY]  strValue  =  value  +  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  String.valueOf(nullString);	  strValue    =    value    +    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
369	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.ERROR  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.ERROR  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.ERROR  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
370	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.UNKNOWN  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.UNKNOWN  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
371	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
372	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NULL  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
373	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
374	[BUG]  [BUGGY]  this.print(null,  null,  0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(null,  null,  0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(null,  null,  0,  strValue.length()  -  1);	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
375	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString()  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString()  +  1);	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
376	[BUG]  [BUGGY]  strValue  =  values  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  values  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  values  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
377	[BUG]  [BUGGY]  ||(strValue!=  null  &&  strValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue!=  null  &&  strValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue!=  null  &&  strValue.isEmpty()))  {  throw  new  IllegalArgumentException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
378	[BUG]  [BUGGY]  ||(strValue  ==  null  &&  strValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  ||(strValue  ==  null  &&  strValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	||(strValue  ==  null  &&  strValue.equals( " ")))  {  throw  new  IllegalArgumentException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
379	[BUG]  [BUGGY]  Parchet.checkNotNull(strValue);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Parchet.checkNotNull(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Parchet.checkNotNull(strValue);	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
380	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Thread.currentThread().interrupt();	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
381	[BUG]  [BUGGY]  strValue  =  value?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value?  null  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
382	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
383	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.UNKNOWN  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.UNKNOWN  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
384	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.NULL  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
385	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString  +  1;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString  +  1;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
386	[BUG]  [BUGGY]  strValue  =  nullString  >=  null?  NoSuchElement.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >=  null?  NoSuchElement.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >=  null?  NoSuchElement.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
387	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.substring(1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.substring(1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.substring(1);	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
388	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.trim();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.trim();	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
389	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
390	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
391	[BUG]  [BUGGY]  out.print(null,  nullString,  strValue.charAt(i));  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(null,  nullString,  strValue.charAt(i));  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(null,  nullString,  strValue.charAt(i));	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
392	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i)  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i)  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i)	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
393	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  nullString.trim();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  nullString.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  nullString.trim();	  strValue    =    value    ==    null?    Constants.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
394	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString  +  1;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString  +  1;	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
395	[BUG]  [BUGGY]  out.print(nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(nullString,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(nullString,  0,  strValue.length());	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
396	[BUG]  [BUGGY]  out.println(strValue);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.println(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.println(strValue);	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
397	[BUG]  [BUGGY]  out.print(String.valueOf(strValue));  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(String.valueOf(strValue));  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(String.valueOf(strValue));	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
398	[BUG]  [BUGGY]  out.print(nullString,  null);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(nullString,  null);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(nullString,  null);	  out.print(nullString);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
399	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  +  1;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  +  1;	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
400	[BUG]  [BUGGY]  strValue  =  nullString  >=  null?  Constants.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >=  null?  Constants.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >=  null?  Constants.NONE  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
401	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + "n ";  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + "n ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + "n ";	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
402	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + ". ";  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + ". ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + ". ";	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
403	[BUG]  [BUGGY]  strValue  =  nullString?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  Constants.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  Constants.EMPTY  :  nullString.toString();	  strValue    =    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
404	[BUG]  [BUGGY]  strValue  =  nullString?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  Constants.EMPTY  :  value.toString();	  strValue    =    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
405	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.trim();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.EMPTY  :  nullString.trim();	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
406	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.ERROR  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.ERROR  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.ERROR  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
407	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.UNKNOWN  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.UNKNOWN  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.UNKNOWN  :  nullString.toString();	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
408	[BUG]  [BUGGY]  print(value,  nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(value,  nullString,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(value,  nullString,  0,  strValue.length());	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
409	[BUG]  [BUGGY]  strValue  =  nullString  +  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
410	[BUG]  [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
411	[BUG]  [BUGGY]  strValue  =  nullString|  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString|  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString|  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
412	[BUG]  [BUGGY]  if(nullString!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(nullString!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(nullString!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
413	[BUG]  [BUGGY]  if(nullString  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(nullString  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(nullString  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
414	[BUG]  [BUGGY]  out.append('n');  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.append('n');  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.append('n');	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
415	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.append('N');  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
416	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
417	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(value);  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(value);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(value);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
418	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
419	[BUG]  [BUGGY]  out.print(null,  nullString);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(null,  nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(null,  nullString);	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
420	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(nullString,  nullString);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(nullString,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(nullString,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
421	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(Null,  nullString);  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(Null,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(Null,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
422	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  String.valueOf(strValue):  value.toString();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
423	[BUG]  [BUGGY]  strValue  =  value  ==  null?  String.valueOf(strValue):  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  String.valueOf(strValue):  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  String.valueOf(strValue):  nullString.toString();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
424	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString;	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
425	[BUG]  [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
426	[BUG]  [BUGGY]  strValue  =  nullString  +  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
427	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  String.valueOf(nullString);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  String.valueOf(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  String.valueOf(nullString);	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
428	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(newRecord)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
429	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(NullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
430	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  1,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  1,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  1,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
431	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  +  1;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  +  1;	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
432	[BUG]  [BUGGY]  strValue  =  nullString  >=  null?  Constants.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >=  null?  Constants.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >=  null?  Constants.NULL  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
433	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + ". ";  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + ". ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + ". ";	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
434	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + "n ";  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + "n ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + "n ";	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
435	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + ", ";  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + ", ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString  + ", ";	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
436	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.NUMBER  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.NUMBER  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.NUMBER  :  nullString.toString();	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	105	None	replace
437	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.substring(1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.substring(1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  nullString.substring(1);	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
438	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Null.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Null.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Null.EMPTY  :  value.toString();	  strValue    =    nullString    ==    null?    Null.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
439	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Null.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Null.EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    Null.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
440	[BUG]  [BUGGY]  strValue  =  value  ||  value.toString().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ||  value.toString().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ||  value.toString().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
441	[BUG]  [BUGGY]  strValue  =  format  +  nullString.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  format  +  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  format  +  nullString.toString();	  strValue    =    nullString    +    format.toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
442	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toFormat(format);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toFormat(format);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toFormat(format);	  strValue    =    nullString    +    format.toString();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
443	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value.toString()  + ".* ");  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value.toString()  + ".* ");  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  new  String(value.toString()  + ".* ");	  strValue    =    value    ==    null?    Constants.NONE    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
444	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(value,  nullString);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(value,  nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(value,  nullString);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
445	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(null,  value);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(null,  value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(null,  value);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
446	[BUG]  [BUGGY]  strValue  =  format  +  FormatUtils.print(value);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  format  +  FormatUtils.print(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  format  +  FormatUtils.print(value);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
447	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(null,  nullString);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(null,  nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(null,  nullString);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
448	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(null,  null);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(null,  null);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(null,  null);	  strValue    =    nullString    +    FormatUtils.print(value);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
449	[BUG]  [BUGGY]  strValue  =  nullString  &&  format.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  &&  format.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  &&  format.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    ||    format.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
450	[BUG]  [BUGGY]  strValue  =  value  ||  format.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ||  format.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ||  format.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    format.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
451	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
452	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
453	[BUG]  [BUGGY]  OutputStream  out  =  null.print(strValue);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  OutputStream  out  =  null.print(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	OutputStream  out  =  null.print(strValue);	  if(strValue    ==    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
454	[BUG]  [BUGGY]  if(strValue!=  null)  {  out.print(NullString);  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  out.print(NullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  out.print(NullString);  }	  if(strValue    ==    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
455	[BUG]  [BUGGY]  Output.print(nullString);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Output.print(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Output.print(nullString);	  if(strValue    ==    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
456	[BUG]  [BUGGY]  strValue  =  nullString  +  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
457	[BUG]  [BUGGY]  strValue  =  nullString  {  null?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
458	[BUG]  [BUGGY]  strValue  =  nullString?  Constants.NONE  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  Constants.NONE  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  Constants.NONE  :  value.toString();	  strValue    =    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
459	[BUG]  [BUGGY]  strValue  =  nullString?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  Constants.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  Constants.NONE  :  nullString.toString();	  strValue    =    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
460	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Null  :  value.toString();	  strValue    =    nullString    ==    null?    Null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
461	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  +  1;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  +  1;	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
462	[BUG]  [BUGGY]  strValue  =  nullString  >=  null?  Constants.NUMBER  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >=  null?  Constants.NUMBER  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >=  null?  Constants.NUMBER  :  nullString;	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
463	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  + "n ";  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  + "n ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  + "n ";	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
464	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  null;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  null;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  null;	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
465	[BUG]  [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString.toString();	  strValue    =    value    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
466	[BUG]  [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ||  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString;	  strValue    =    value    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
467	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
468	[BUG]  [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
469	[BUG]  [BUGGY]  if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(newRecord)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(i));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
470	[BUG]  [BUGGY]  this.print(null,  nullString,  0,  strValue.charAt(i));  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(null,  nullString,  0,  strValue.charAt(i));  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(null,  nullString,  0,  strValue.charAt(i));	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
471	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
472	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  >=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  >=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  >=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
473	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  +  1;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  +  1;	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
474	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  + ", ";  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  + ", ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  + ", ";	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
475	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  + "n ";  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  + "n ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  nullString  + "n ";	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
476	[BUG]  [BUGGY]  strValue  =  nullString  >=  null?  Constants.UNKNOWN  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  >=  null?  Constants.UNKNOWN  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  >=  null?  Constants.UNKNOWN  :  nullString;	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    nullString;    	non-compiled	[CE]  <identifier>  expected	96	None	replace
477	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(value,  nullString.toString());  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(value,  nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(value,  nullString.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
478	[BUG]  [BUGGY]  strValue  =  FormatUtils.print(null,  value.toString());  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.print(null,  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.print(null,  value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
479	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?  Constants.EMPTY  :  value.toString());  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?  Constants.EMPTY  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value  ==  null?  Constants.EMPTY  :  value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
480	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?   "null "  :  value.toString());  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?   "null "  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value  ==  null?   "null "  :  value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
481	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?  Constants.NULL  :  value.toString());  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null?  Constants.NULL  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value  ==  null?  Constants.NULL  :  value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
482	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1)?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  1)?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  1)?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
483	[BUG]  [BUGGY]  strValue  =  nullString?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  Constants.NULL  :  value.toString();	  strValue    =    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
484	[BUG]  [BUGGY]  strValue  =  null?  Constants.NULL  :  nullString;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NULL  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NULL  :  nullString;	  strValue    =    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
485	[BUG]  [BUGGY]  strValue  =  format  +  nullString.getName();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  format  +  nullString.getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  format  +  nullString.getName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
486	[BUG]  [BUGGY]  strValue  =  value  +  format.getName();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  +  format.getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  +  format.getName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
487	[BUG]  [BUGGY]  strValue  =  format.getName();  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  format.getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  format.getName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
488	[BUG]  [BUGGY]  strValue  =  FormatUtils.toString(value);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.toString(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.toString(value);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
489	[BUG]  [BUGGY]  strValue  =  FormatUtils.toString(null);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  FormatUtils.toString(null);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  FormatUtils.toString(null);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
490	[BUG]  [BUGGY]  strValue  =  format  +  FormatUtils.toString(value);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  format  +  FormatUtils.toString(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  format  +  FormatUtils.toString(value);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
491	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.trim();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  nullString.trim();	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
492	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.substring(1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.substring(1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  nullString.substring(1);	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
493	[BUG]  [BUGGY]  strValue  =  values  ==  null?  Constants.NONE  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  values  ==  null?  Constants.NONE  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  values  ==  null?  Constants.NONE  :  String.valueOf(value.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
494	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value!=  null?  Constants.NULL  :  value.toString());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value!=  null?  Constants.NULL  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value!=  null?  Constants.NULL  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
495	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?   "null "  :  value.toString());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?   "null "  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null?   "null "  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
496	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NUMBER  :  value.toString());  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NUMBER  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NUMBER  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
497	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NONE  :  value.toString());  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NONE  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null?  Constants.NONE  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
498	[BUG]  [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Integer.MIN_VALUE  :  value.toString());  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  String.valueOf(value  ==  null?  Integer.MIN_VALUE  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  String.valueOf(value  ==  null?  Integer.MIN_VALUE  :  value.toString());	  strValue    =    nullString    +    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
499	[BUG]  [BUGGY]  if(strValue!=  null)  {  out.print(nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  out.print(nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  out.print(nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
500	[BUG]  [BUGGY]  print(null,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  null,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  null,  0,  strValue.length());	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
501	[BUG]  [BUGGY]  print(value,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(value,  null,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(value,  null,  0,  strValue.length());	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
502	[BUG]  [BUGGY]  print(null,  null,  0,  strValue.length()  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  null,  0,  strValue.length()  +  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  null,  0,  strValue.length()  +  1);	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
503	[BUG]  [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString();	  strValue    =    null    ||    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
504	[BUG]  [BUGGY]  strValue  =  null  ||  value  ==  null?  Constants.EMPTY  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null  ||  value  ==  null?  Constants.EMPTY  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null  ||  value  ==  null?  Constants.EMPTY  :  nullString.toString();	  strValue    =    null    ||    value    ==    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
505	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
506	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
507	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?   "null "  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?   "null "  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.trim().length()  ==  0?   "null "  :  value.toString();	  strValue    =    nullString    ||    value.trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
508	[BUG]  [BUGGY]  strValue  =  value?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value?  null  :  value.toString().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString?    null    :    value.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
509	[BUG]  [BUGGY]  strValue  =  key!=  null?  Constants.NONE  :  key.toString();  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key!=  null?  Constants.NONE  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key!=  null?  Constants.NONE  :  key.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
510	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.UNKNOWN  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.UNKNOWN  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.UNKNOWN  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
511	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString()  + ".js ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString()  + ".js ");  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  String.valueOf(value.toString()  + ".js ");	  strValue    =    value    ==    null?    Constants.NULL    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	15	None	replace
512	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
513	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.EMPTY  :  nullString;	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
514	[BUG]  [BUGGY]  strValue  =  nullString?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  null  :  value.toString();	  strValue    =    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
515	[BUG]  [BUGGY]  strValue  =  null?  nullString  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  nullString  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  nullString  :  value.toString();	  strValue    =    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
516	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.getClass());  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.getClass());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.getClass());	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
517	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.toString()  + ".js ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.toString()  + ".js ");  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  new  String(value.toString()  + ".js ");	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
518	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('n');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
519	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
520	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append('N');  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
521	[BUG]  [BUGGY]  Parchet.checkState(strValue!=  null);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Parchet.checkState(strValue!=  null);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Parchet.checkState(strValue!=  null);	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
522	[BUG]  [BUGGY]  attern(strValue!=  null))  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  attern(strValue!=  null))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	attern(strValue!=  null))  {  throw  new  IllegalStateException( " ");  }	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
523	[BUG]  [BUGGY]  MutableFormat.print(null,  strValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  MutableFormat.print(null,  strValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	MutableFormat.print(null,  strValue,  0,  strValue.length());	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
524	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Thread.currentThread().setContextClassLoader(this);	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
525	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRecordClass());  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRecordClass());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Thread.currentThread().setContextClassLoader(getRecordClass());	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
526	[BUG]  [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value!=  null?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value!=  null?  Constants.EMPTY  :  nullString;	  strValue    =    value    ==    null?    Constants.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
527	[BUG]  [BUGGY]  strValue  =  nullString  +  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
528	[BUG]  [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  {  null?  Constants.EMPTY  :  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
529	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULLString  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULLString  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULLString  :  value.toString();	  strValue    =    value    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
530	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(value,  nullString);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(value,  nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(value,  nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
531	[BUG]  [BUGGY]  out.print(strValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(strValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(strValue,  0,  strValue.length());	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
532	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.ELEM  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.ELEM  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.ELEM  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
533	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.TYPE_EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.TYPE_EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.TYPE_EMPTY  :  nullString;	  strValue    =    nullString    ==    null?    Context.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
534	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NULL  :  new  String(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NULL  :  new  String(value);	  strValue    =    value    ==    null?    Constants.NULL    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
535	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.NONE  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
536	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.NOT_OBJECT  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.NOT_OBJECT  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.NOT_OBJECT  :  nullString;	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
537	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL_VALUE  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL_VALUE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL_VALUE  :  nullString;	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
538	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  1,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  1,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  1,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
539	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValueLength();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValueLength();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValueLength();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
540	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null  String,  nullString,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null  String,  nullString,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null  String,  nullString,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
541	[BUG]  [BUGGY]  strValue  =  key!=  null?  Constants.NULL  :  key.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  key!=  null?  Constants.NULL  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  key!=  null?  Constants.NULL  :  key.toString();	  strValue    =    value    ==    null?    Constants.NULL    :    key.toString();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
542	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  nullString;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().trim().length()  ==  0?  Constants.NUMBER  :  nullString;	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
543	[BUG]  [BUGGY]  strValue  =  nullString?  Constants.NULL  :  nullString.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  Constants.NULL  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  Constants.NULL  :  nullString.toString();	  strValue    =    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
544	[BUG]  [BUGGY]  strValue  =  this.value  ==  null?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  this.value  ==  null?  Constants.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  this.value  ==  null?  Constants.NONE  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	103	None	replace
545	[BUG]  [BUGGY]  strValue  =  this.value!=  null?  Constants.NONE  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  this.value!=  null?  Constants.NONE  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  this.value!=  null?  Constants.NONE  :  nullString.toString();	  strValue    =    value    ==    null?    Constants.NONE    :    this.value.toString();    	non-compiled	[CE]  <identifier>  expected	103	None	replace
546	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  format.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  format.toString();	  strValue    =    nullString    ==    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
547	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.substring(0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.substring(0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString.substring(0,  strValue.length()  -  1);	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
548	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString,  format.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString,  format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NoSuchElement.EMPTY  :  nullString,  format.toString();	  strValue    =    nullString    ==    null?    NoSuchElement.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
549	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  new  String(value);	  strValue    =    value    ==    null?    Constants.NONE    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
550	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value,  nullString.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  new  String(value,  nullString.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  new  String(value,  nullString.toString());	  strValue    =    value    ==    null?    Constants.NONE    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
551	[BUG]  [BUGGY]  if(strValue!=  null)  {  out.print(nullString,  strValue);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  out.print(nullString,  strValue);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  out.print(nullString,  strValue);  }	  if(strValue!=    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
552	[BUG]  [BUGGY]  Printer  out  =  null.print(strValue);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Printer  out  =  null.print(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Printer  out  =  null.print(strValue);	  if(strValue!=    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
553	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.trim().length()  ==  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
554	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.NONE  :  String.valueOf(value);	  strValue    =    value    ==    null?    Constants.NONE    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	81	None	replace
555	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  this.value.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  this.value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.UNKNOWN  :  this.value.toString();	  strValue    =    nullString    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	104	None	replace
556	[BUG]  [BUGGY]  strValue  =  nullString?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString?  Constants.EMPTY  :  nullString;	  strValue    =    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
557	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.substring(0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString.substring(0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  nullString.substring(0,  strValue.length()  -  1);	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
558	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString,  format.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NAME  :  nullString,  format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NAME  :  nullString,  format.toString();	  strValue    =    nullString    ==    null?    Context.NAME    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
559	[BUG]  [BUGGY]  strValue  =  value.toString().trim().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value.toString().trim().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value.toString().trim().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().trim().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
560	[BUG]  [BUGGY]  strValue  =  nullString  +  getFormat().getName();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  getFormat().getName();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  getFormat().getName();	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
561	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.getFormatName(value);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.getFormatName(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.getFormatName(value);	  strValue    =    nullString    +    format.getName();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
562	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.EMPTY  :  nullString;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.EMPTY  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  ==  0?  Constants.EMPTY  :  nullString;	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
563	[BUG]  [BUGGY]  strValue  =  nullString  ||  format.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  format.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  format.toString().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
564	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  [Delete]  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	[Delete]	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
565	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().print(strValue);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Thread.currentThread().getContextClassLoader().print(strValue);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Thread.currentThread().getContextClassLoader().print(strValue);	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
566	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().print(nullString);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Thread.currentThread().getContextClassLoader().print(nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Thread.currentThread().getContextClassLoader().print(nullString);	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
567	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().print(this);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Thread.currentThread().getContextClassLoader().print(this);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Thread.currentThread().getContextClassLoader().print(this);	  if(strValue!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
568	[BUG]  [BUGGY]  strValue  =  new  String(nullString  ==  null?  Constants.EMPTY  :  nullString);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  new  String(nullString  ==  null?  Constants.EMPTY  :  nullString);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  new  String(nullString  ==  null?  Constants.EMPTY  :  nullString);	  strValue    =    nullString    >=    null?    Constants.EMPTY    :    nullString;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
569	[BUG]  [BUGGY]  strValue  =  null()?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null()?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null()?  null  :  value.toString();	  strValue    =    null?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
570	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toPaddedString(value);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toPaddedString(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toPaddedString(value);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
571	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toPlainString(value);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toPlainString(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toPlainString(value);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
572	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toBooleanObject(value);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toBooleanObject(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toBooleanObject(value);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
573	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.toPadding(value);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.toPadding(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.toPadding(value);	  strValue    =    nullString    +    FormatUtils.toString(value);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
574	[BUG]  [BUGGY]  Parchet.checkState(strValue  ==  null);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Parchet.checkState(strValue  ==  null);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Parchet.checkState(strValue  ==  null);	  if(strValue!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
575	[BUG]  [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null? " "  :  value.toString());  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  +  FormatUtils.print(value  ==  null? " "  :  value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  +  FormatUtils.print(value  ==  null? " "  :  value.toString());	  strValue    =    nullString    +    FormatUtils.print(value.toString());    	non-compiled	[CE]  <identifier>  expected	42	None	replace
576	[BUG]  [BUGGY]  if(strValue  ==  null  ||  strValue!=  null)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null  ||  strValue!=  null)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null  ||  strValue!=  null)  {  out.print(nullString);  }	  if(strValue    ==    null)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
577	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  nullString;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NullString  :  nullString;	  strValue    =    nullString    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
578	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NullString  :  new  String(value.toString());	  strValue    =    nullString    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
579	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  String.valueOf(value.toString());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  NullString  :  String.valueOf(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  NullString  :  String.valueOf(value.toString());	  strValue    =    nullString    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
580	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Null  :  nullString.toString();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Null  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Null  :  nullString.toString();	  strValue    =    nullString    ==    null?    Null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
581	[BUG]  [BUGGY]  this.print(null,  nullString,  0,  strValue.charAt(0));  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(null,  nullString,  0,  strValue.charAt(0));  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(null,  nullString,  0,  strValue.charAt(0));	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
582	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(0));  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(0));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(null,  nullString,  0,  strValue.charAt(0));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
583	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.charAt(0));  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.charAt(0));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  this.print(nullString,  null,  0,  strValue.charAt(0));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    this.print(null,    nullString,    0,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
584	[BUG]  [BUGGY]  strValue  =  values  ==  null?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  values  ==  null?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  values  ==  null?  Constants.NULL  :  value.toString();	  strValue    =    value!=    null?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
585	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value);	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
586	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value.toString()  + ".* ");  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value.toString()  + ".* ");  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  new  String(value.toString()  + ".* ");	  strValue    =    value    ==    null?    Constants.EMPTY    :    new    String(value.toString());    	non-compiled	[CE]  <identifier>  expected	63	None	replace
587	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.substring(0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.substring(0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.EMPTY  :  nullString.substring(0,  strValue.length()  -  1);	  strValue    =    nullString    ==    null?    Constants.EMPTY    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
588	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.substring(0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString.substring(0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  nullString.substring(0,  strValue.length()  -  1);	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
589	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString,  format.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Context.NONE  :  nullString,  format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Context.NONE  :  nullString,  format.toString();	  strValue    =    nullString    ==    null?    Context.NONE    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	77	None	replace
590	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.substring(0,  strValue.length()  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.substring(0,  strValue.length()  -  1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.substring(0,  strValue.length()  -  1);	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
591	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.toUpperCase();  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.toUpperCase();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NULL  :  nullString.toUpperCase();	  strValue    =    nullString    ==    null?    Constants.NULL    :    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
592	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toUpperCase();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toUpperCase();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.toUpperCase();	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
593	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.substring(1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.substring(1);  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  String.valueOf(strValue):  nullString.substring(1);	  strValue    =    nullString    ==    null?    String.valueOf(strValue):    nullString.toString();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
594	[BUG]  [BUGGY]  strValue  =  nullString  ||  format.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  format.toString().length()  ==  0?  Constants.NULL  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  format.toString().length()  ==  0?  Constants.NULL  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    0?    Constants.NULL    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
595	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  nullString  :  format.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  nullString  :  format.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  nullString  :  format.toString();	  strValue    =    nullString    ==    null?    nullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
596	[BUG]  [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  null  :  value.toString().length()!=  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()!=    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
597	[BUG]  [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  1?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ||  value.toString().length()  ==  1?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ||  value.toString().length()  ==  1?  null  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
598	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
599	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
600	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString,  null,  0,  strValue.length());  }  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString,    null,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
601	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  >  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    >=    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
602	[BUG]  [BUGGY]  Printer  out  =  new  Printer(strValue,  nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Printer  out  =  new  Printer(strValue,  nullString,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Printer  out  =  new  Printer(strValue,  nullString,  0,  strValue.length());	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
603	[BUG]  [BUGGY]  print(null,  nullString,  strValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(null,  nullString,  strValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(null,  nullString,  strValue,  0,  strValue.length());	  print(null,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
604	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + ", ";  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + ", ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NONE  :  nullString  + ", ";	  strValue    =    nullString    ==    null?    Constants.NONE    :    nullString;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
605	[BUG]  [BUGGY]  strValue  =  nullString  ||  format.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  format.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  format.toString().trim().length()  ==  0?  Constants.EMPTY  :  value.toString();	  strValue    =    nullString    ||    value.toString().trim().length()    ==    0?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
606	[BUG]  [BUGGY]  Printer  out  =  new  Printer(strValue,  null,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  Printer  out  =  new  Printer(strValue,  null,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	Printer  out  =  new  Printer(strValue,  null,  0,  strValue.length());	  print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	30	None	replace
607	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
608	[BUG]  [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null  &&  strValue.length()  >  0)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(nullString);  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(nullString);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
609	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(i));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
610	[BUG]  [BUGGY]  out.print(null,  nullString,  strValue.charAt(0));  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  out.print(null,  nullString,  strValue.charAt(0));  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	out.print(null,  nullString,  strValue.charAt(0));	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
611	[BUG]  [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	while(strValue!=  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
612	[BUG]  [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue  ==  null)  {  for(int  i  =  0,  strValue.length();  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  strValue.charAt(0));  }	  if(strValue!=    null)    {    for(int    i    =    0,    strValue.length();    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    strValue.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
613	[BUG]  [BUGGY]  strValue  =  nullString  ||  format.getName().trim().length()!=  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  format.getName().trim().length()!=  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  format.getName().trim().length()!=  0?  null  :  value.toString();	  strValue    =    nullString    ||    format.toString().trim().length()!=    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
614	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  key.toString();  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  key.toString();	  strValue    =    value!=    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	90	None	replace
615	[BUG]  [BUGGY]  strValue  =  values  ==  null?  Constants.EMPTY  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  values  ==  null?  Constants.EMPTY  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  values  ==  null?  Constants.EMPTY  :  value.toString();	  strValue    =    value!=    null?    Constants.EMPTY    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	90	None	replace
616	[BUG]  [BUGGY]  strValue  =  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString.toString();  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value.toString().length()  ==  0?  Constants.NUMBER  :  nullString.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
617	[BUG]  [BUGGY]  strValue  =  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
618	[BUG]  [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  + ", ";  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  + ", ";  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ==  null?  Constants.NUMBER  :  nullString  + ", ";	  strValue    =    nullString    ==    null?    Constants.NUMBER    :    nullString;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
619	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString()).trim();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString()).trim();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.EMPTY  :  String.valueOf(value.toString()).trim();	  strValue    =    value    ==    null?    Constants.EMPTY    :    String.valueOf(value.toString());    	non-compiled	[CE]  <identifier>  expected	62	None	replace
620	[BUG]  [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  null  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  null  :  value.toString().length()  ==  0?  Constants.NUMBER  :  value.toString();	  strValue    =    value    ||    value.toString().length()    ==    0?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
621	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.print(null,  nullString,  0,  strValue.length());  }  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.print(null,    nullString,    0,    strValue.length());    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
622	[BUG]  [BUGGY]  this.print(nullString,  null,  strValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(nullString,  null,  strValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(nullString,  null,  strValue,  0,  strValue.length());	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
623	[BUG]  [BUGGY]  this.print(null,  null,  strValue,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  this.print(null,  null,  strValue,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	this.print(null,  null,  strValue,  0,  strValue.length());	  this.print(nullString,    null,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	32	None	replace
624	[BUG]  [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append( ", ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append( ", ");  }  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	if(strValue!=  null)  {  for(int  i  =  0;  i  <  strValue.length();  ++i)  {  out.append( ", ");  }	  if(strValue!=    null)    {    for(int    i    =    0;    i    <    strValue.length();    ++i)    {    out.append('n');    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
625	[BUG]  [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  key.toString();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  Constants.UNKNOWN  :  key.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  Constants.UNKNOWN  :  key.toString();	  strValue    =    value    ==    null?    Constants.UNKNOWN    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
626	[BUG]  [BUGGY]  strValue  =  value.toString().length()  ==  0?  null  :  value.toString();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value.toString().length()  ==  0?  null  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value.toString().length()  ==  0?  null  :  value.toString();	  strValue    =    nullString    &&    value.toString().length()    ==    0?    null    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
627	[BUG]  [BUGGY]  strValue  =  value  ==  null?  NullString  :  new  String(value.toString());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  NullString  :  new  String(value.toString());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  NullString  :  new  String(value.toString());	  strValue    =    value    ==    null?    NullString    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
628	[BUG]  [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  value  ==  null?  nullString  :  value.toString().length()  ==  1?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
629	[BUG]  [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  1?  Constants.NUMBER  :  value.toString();  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  nullString  ||  value.toString().length()  >=  1?  Constants.NUMBER  :  value.toString();  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  nullString  ||  value.toString().length()  >=  1?  Constants.NUMBER  :  value.toString();	  strValue    =    nullString    ||    value.toString().length()    ==    1?    Constants.NUMBER    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
630	[BUG]  [BUGGY]  strValue  =  null?  Constants.NONE  :  nullString;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  strValue  =  null?  Constants.NONE  :  nullString;  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	strValue  =  null?  Constants.NONE  :  nullString;	  strValue    =    null?    Constants.NONE    :    value.toString();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
631	[BUG]  [BUGGY]  print(nullString,  nullString,  0,  strValue.length());  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  void  print(final  Object  value)  throws  IOException  {  String  strValue;  if  (value  ==  null)  {  final  String  nullString  =  format.getNullString();  strValue  =  nullString  ==  null  ?  Constants.EMPTY  :  nullString;  }  else  {      [BUGGY]  print(nullString,  nullString,  0,  strValue.length());  [BUGGY]      }  this.print(value,  strValue,  0,  strValue.length());  }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  value  [VARIABLES]  CSVFormat  format  Object  value  boolean  newRecord  String  nullString  strValue  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	104	104	1	replace	print(nullString,  nullString,  0,  strValue.length());	  print(strValue,    nullString,    0,    strValue.length());    	non-compiled	[CE]  <identifier>  expected	31	None	replace
