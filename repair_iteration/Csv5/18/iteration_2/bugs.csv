bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  newRecord  =  value.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  value.toString();  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  value.toString();	  newRecord    =   "   ";    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  newRecord  =  ' "';  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  ' "';  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  ' "';	  newRecord    =   "   ";    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  newRecord  =  'n';  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  'n';  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  'n';	  newRecord    =   "   ";    	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  newRecord  =  false;  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  false;  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  ||(newRecord  ==  null  &&  value.equals( " ")))  {  newRecord  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  ||(newRecord  ==  null  &&  value.equals( " ")))  {  newRecord  =  false;  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	||(newRecord  ==  null  &&  value.equals( " ")))  {  newRecord  =  false;  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  out.append(object.getDelimiter());  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  out.append(object.getDelimiter());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	out.append(object.getDelimiter());	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  out.append('n');  }  else  {  out.append(object.getDelimiter());  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  out.append('n');  }  else  {  out.append(object.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  out.append('n');  }  else  {  out.append(object.getDelimiter());  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  if(newRecord!=  null)  {  out.append('n');  }  else  {  out.append(object.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  out.append('n');  }  else  {  out.append(object.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  out.append('n');  }  else  {  out.append(object.getDelimiter());  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  ||(newRecord!=  null  &&  value.length()  >  0)||(newRecord  ==  null  &&  value.charAt(newRecord.length()  -  1)!=  '/'))  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  ||(newRecord!=  null  &&  value.length()  >  0)||(newRecord  ==  null  &&  value.charAt(newRecord.length()  -  1)!=  '/'))  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	||(newRecord!=  null  &&  value.length()  >  0)||(newRecord  ==  null  &&  value.charAt(newRecord.length()  -  1)!=  '/'))  {  out.append(value);  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  ||(newRecord  ==  null  &&  value.length()  >  0)||(newRecord!=  null  &&  value.charAt(newRecord.length()  -  1)!=  '/'))  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  ||(newRecord  ==  null  &&  value.length()  >  0)||(newRecord!=  null  &&  value.charAt(newRecord.length()  -  1)!=  '/'))  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	||(newRecord  ==  null  &&  value.length()  >  0)||(newRecord!=  null  &&  value.charAt(newRecord.length()  -  1)!=  '/'))  {  out.append(value);  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  newRecord  =  Collections.emptyList();  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  Collections.emptyList();  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  Collections.emptyList();	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  newRecord  =  this;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  this;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  this;	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
14	[BUG]  [BUGGY]  newRecord  =  Collections.EMPTY_LIST;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  Collections.EMPTY_LIST;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  Collections.EMPTY_LIST;	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  newRecord  =  value;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  value;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  value;	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  newRecord  =  format;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  format;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  format;	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  newRecord  =  record;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  record;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  record;	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  newRecord  =  DEFAULT_TYPE;  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  DEFAULT_TYPE;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  DEFAULT_TYPE;	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  newRecord  =  format.getRecord();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  format.getRecord();  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  format.getRecord();	  newRecord    =   "null   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
20	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset  +  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len  +  1);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len  +  1);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len  +  1);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset,    len);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len  +  1);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len  +  1);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len  +  1);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset,    len);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object.getName());  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  if(newRecord)  {  out.append(value);  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(value);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(value);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
27	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object,  offset,  len);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object.getName());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(object,  offset,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(object,  offset,  offset  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(object,  offset,  offset  +  len);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object.getDelimiter());  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  if(newRecord  ==  false)  {  newRecord  =  true;  }  else  {  printAndEscape(object,  offset,  len);  }  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  false)  {  newRecord  =  true;  }  else  {  printAndEscape(object,  offset,  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  false)  {  newRecord  =  true;  }  else  {  printAndEscape(object,  offset,  len);  }	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  if(newRecord  ==  false)  {  newRecord  =  true;  }  else  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  false)  {  newRecord  =  true;  }  else  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  false)  {  newRecord  =  true;  }  else  {  out.append(value);  }	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  true;  }  else  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  true;  }  else  {  out.append('n');  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  newRecord  =  true;  }  else  {  out.append('n');  }	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  true;  }  else  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  true;  }  else  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  newRecord  =  true;  }  else  {  out.append(value);  }	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  true;  }  else  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  true;  }  else  {  out.append('n');  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  true;  }  else  {  out.append('n');  }	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  true;  }  else  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  true;  }  else  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  true;  }  else  {  out.append(value);  }	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  newRecord  &=  true;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  true;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  true;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  newRecord  |=  false;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  |=  false;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  |=  false;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  newRecord  &=  DEFAULT_COLLECTION;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  DEFAULT_COLLECTION;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  DEFAULT_COLLECTION;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  newRecord  &=  DEFAULT_RESULT;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  DEFAULT_RESULT;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  DEFAULT_RESULT;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  newRecord  &=  DEFAULT_DESCRIPTOR;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  DEFAULT_DESCRIPTOR;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  DEFAULT_DESCRIPTOR;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  newRecord  =   "exports ".equals(value);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =   "exports ".equals(value);  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =   "exports ".equals(value);	  newRecord    =   "exports   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
43	[BUG]  [BUGGY]  newRecord  =   "export ";  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =   "export ";  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =   "export ";	  newRecord    =   "exports   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
44	[BUG]  [BUGGY]  newRecord  &=  object;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  object;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  object;	  newRecord    &=    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
45	[BUG]  [BUGGY]  newRecord  |=  null;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  |=  null;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  |=  null;	  newRecord    &=    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
46	[BUG]  [BUGGY]  newRecord  &=  value;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  value;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  value;	  newRecord    &=    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  newRecord  &=  this;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  this;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  this;	  newRecord    &=    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  newRecord  &=  offset;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  offset;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  offset;	  newRecord    &=    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  if(newRecord!=  null)  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  out.append(value);  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()).append('n');  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()).append('n');  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()).append('n');  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
51	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()  +  len);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()  +  len);  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
52	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()).append('n');  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()).append('n');  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()).append('n');  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
53	[BUG]  [BUGGY]  if(newRecord!=  null)  {  out.append(value,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  out.append(value,  offset  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  out.append(value,  offset  +  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
54	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  out.append(value,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  out.append(value,  offset  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  out.append(value,  offset  +  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  if(newRecord!=  null)  {  out.append(value,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  out.append(value,  offset,  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  out.append(value,  offset,  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset,    len);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
56	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  out.append(value,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  out.append(value,  offset,  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  out.append(value,  offset,  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset,    len);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
57	[BUG]  [BUGGY]  newRecord  =  out;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  out;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  out;	  newRecord    =    null;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
58	[BUG]  [BUGGY]  newRecord  |=  true;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  |=  true;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  |=  true;	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  out.append(value);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
60	[BUG]  [BUGGY]  newRecord  &=  DEFAULT_DEPRECATED;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  DEFAULT_DEPRECATED;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  DEFAULT_DEPRECATED;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  newRecord  &=  DEFAULT_DESCRIPTION;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  DEFAULT_DESCRIPTION;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  DEFAULT_DESCRIPTION;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
62	[BUG]  [BUGGY]  newRecord  &=  DEFAULT_SOURCE;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  DEFAULT_SOURCE;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  DEFAULT_SOURCE;	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
63	[BUG]  [BUGGY]  newRecord  &=  data;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  data;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  data;	  newRecord    &=    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
64	[BUG]  [BUGGY]  newRecord  =   "exports "  +  value;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =   "exports "  +  value;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =   "exports "  +  value;	  newRecord    =   "exports   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
66	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object);  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
67	[BUG]  [BUGGY]  if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
68	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append('n');  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object);  }  else  {  out.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
69	[BUG]  [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(object,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(object,  offset  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(format.getDelimiter());  }  else  {  out.append(object,  offset  +  len);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
70	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object);  }  else  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object);  }  else  {  out.append(value);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()  +  len);  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter()  +  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
72	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  out.append('n');  }  else  {  out.append(format.getDelimiter());  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
73	[BUG]  [BUGGY]  newRecord  =  DEFAULT_REPORT;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  DEFAULT_REPORT;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  DEFAULT_REPORT;	  newRecord    =   "   ";    	non-compiled	[CE]  <identifier>  expected	9	None	replace
74	[BUG]  [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping())?  false  :  value.toString());  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping())?  false  :  value.toString());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=(value  ==  null  ||  value.isEscaping())?  false  :  value.toString());	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
75	[BUG]  [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping())?  false  :  value.getDelimiter());  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping())?  false  :  value.getDelimiter());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=(value  ==  null  ||  value.isEscaping())?  false  :  value.getDelimiter());	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
76	[BUG]  [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping());  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=(value  ==  null  ||  value.isEscaping());	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping())? "null "  :  value.toString());  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=(value  ==  null  ||  value.isEscaping())? "null "  :  value.toString());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=(value  ==  null  ||  value.isEscaping())? "null "  :  value.toString());	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
78	[BUG]  [BUGGY]  newRecord  &=(value  ==  null  ||  value.equals(value));  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=(value  ==  null  ||  value.equals(value));  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=(value  ==  null  ||  value.equals(value));	  newRecord    &=    false;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
79	[BUG]  [BUGGY]  parent  ==  null  ||  newRecord  =  false;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  parent  ==  null  ||  newRecord  =  false;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	parent  ==  null  ||  newRecord  =  false;	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
80	[BUG]  [BUGGY]  out.append(object,  offset,  offset  +  len);  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  out.append(object,  offset,  offset  +  len);  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	out.append(object,  offset,  offset  +  len);	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
81	[BUG]  [BUGGY]  out.append(value,  offset  +  len);  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  out.append(value,  offset  +  len);  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	out.append(value,  offset  +  len);	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
82	[BUG]  [BUGGY]  out.append(object,  offset,  len);  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  out.append(object,  offset,  len);  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	out.append(object,  offset,  len);	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
83	[BUG]  [BUGGY]  out.append('n');  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  out.append('n');  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	out.append('n');	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
84	[BUG]  [BUGGY]  out.append(value,  offset,  len);  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  out.append(value,  offset,  len);  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	out.append(value,  offset,  len);	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset    +    len);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
85	[BUG]  [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(value);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
86	[BUG]  [BUGGY]  AllRecords(recorded,  false)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  AllRecords(recorded,  false)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	AllRecords(recorded,  false)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  parent!=  null  &&  newRecord  ==  object)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  parent!=  null  &&  newRecord  ==  object)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	parent!=  null  &&  newRecord  ==  object)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
88	[BUG]  [BUGGY]  AllRecords(newRecord,  out.toString(),  object.getDelimiter()));  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  AllRecords(newRecord,  out.toString(),  object.getDelimiter()));  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	AllRecords(newRecord,  out.toString(),  object.getDelimiter()));	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
89	[BUG]  [BUGGY]  AllRecords(recorded,  false)  {  newRecord  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  AllRecords(recorded,  false)  {  newRecord  =  false;  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	AllRecords(recorded,  false)  {  newRecord  =  false;  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
90	[BUG]  [BUGGY]  AllRecords.add(newRecord);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  AllRecords.add(newRecord);  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	AllRecords.add(newRecord);	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
91	[BUG]  [BUGGY]  AllRecords(newRecord,  out.toString(),  object.getDelimiter());  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  AllRecords(newRecord,  out.toString(),  object.getDelimiter());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	AllRecords(newRecord,  out.toString(),  object.getDelimiter());	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
92	[BUG]  [BUGGY]  newRecord  &=  item;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  &=  item;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  &=  item;	  newRecord    &=    null;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
93	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  out.append(format.getDelimiter());  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  else  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  else  {  out.append('n');  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object.getName());  }  else  {  out.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
95	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  out.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  out.append('n');  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object,  offset,  offset  +  len);  }  else  {  out.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
96	[BUG]  [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  else  {  out.append( ", ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord)  {  out.append(object.getName());  }  else  {  out.append( ", ");  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord)  {  out.append(object.getName());  }  else  {  out.append( ", ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
97	[BUG]  [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.toString());  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.toString());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  = " ".equalsIgnoreCase(object.toString());	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
98	[BUG]  [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.getName());  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.getName());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  = " ".equalsIgnoreCase(object.getName());	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
99	[BUG]  [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.getClass());  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.getClass());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  = " ".equalsIgnoreCase(object.getClass());	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
100	[BUG]  [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.getValue());  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  = " ".equalsIgnoreCase(object.getValue());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  = " ".equalsIgnoreCase(object.getValue());	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
101	[BUG]  [BUGGY]  newRecord  = " ".equalsIgnoreCase(value.toString());  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  = " ".equalsIgnoreCase(value.toString());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  = " ".equalsIgnoreCase(value.toString());	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
102	[BUG]  [BUGGY]  newRecord  = " ".equals(value.toString())?  true  :  false;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  = " ".equals(value.toString())?  true  :  false;  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  = " ".equals(value.toString())?  true  :  false;	  newRecord    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
103	[BUG]  [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(object.getDelimiter());  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
104	[BUG]  [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  false)  {  newRecord  =  false;  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
105	[BUG]  [BUGGY]  if(newRecord!=  false)  {  out.append(object.getDelimiter());  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  false)  {  out.append(object.getDelimiter());  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  false)  {  out.append(object.getDelimiter());  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(object.getDelimiter());    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
106	[BUG]  [BUGGY]  ||(newRecord  ==  null  &&  value.equals( " ")))  {  out.append(value);  }  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  ||(newRecord  ==  null  &&  value.equals( " ")))  {  out.append(value);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	||(newRecord  ==  null  &&  value.equals( " ")))  {  out.append(value);  }	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
107	[BUG]  [BUGGY]  ||(newRecord  ==  null  &&  value.equals( " ")))  {  out.append(value);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  ||(newRecord  ==  null  &&  value.equals( " ")))  {  out.append(value);  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	||(newRecord  ==  null  &&  value.equals( " ")))  {  out.append(value);	  if(newRecord!=    null)    {    newRecord    =    false;    }    else    {    out.append(value);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
108	[BUG]  [BUGGY]  newRecord  =   "exports ".equals(value.toString());  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =   "exports ".equals(value.toString());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =   "exports ".equals(value.toString());	  newRecord    =   "exports   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
109	[BUG]  [BUGGY]  newRecord  =   "exports ".equals(value.getText());  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =   "exports ".equals(value.getText());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =   "exports ".equals(value.getText());	  newRecord    =   "exports   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
110	[BUG]  [BUGGY]  newRecord  =   "exports: ";  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =   "exports: ";  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =   "exports: ";	  newRecord    =   "exports   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
111	[BUG]  [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object,  offset,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object,  offset,  offset  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  null)  {  newRecord  =  false;  }  else  {  out.append(object,  offset,  offset  +  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset,    len);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
112	[BUG]  [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord!=  false)  {  newRecord  =  false;  }  else  {  out.append(value,  offset,  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset,    len);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
113	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object,  offset,  offset  +  len);  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object,  offset,  offset  +  len);  }  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	if(newRecord  ==  null)  {  newRecord  =  false;  }  else  {  out.append(object,  offset,  offset  +  len);  }	  if(newRecord    ==    null)    {    newRecord    =    false;    }    else    {    out.append(value,    offset,    len);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
114	[BUG]  [BUGGY]  newRecord  =  value  ==  null? "null "  :  value.toString();  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  value  ==  null? "null "  :  value.toString();  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  value  ==  null? "null "  :  value.toString();	  newRecord    =   "null   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
115	[BUG]  [BUGGY]  newRecord  =  value  ==  null?  value.toString()  : "null ";  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  value  ==  null?  value.toString()  : "null ";  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  value  ==  null?  value.toString()  : "null ";	  newRecord    =   "null   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
116	[BUG]  [BUGGY]  newRecord  =  value  ==  null? "null "  :  value.toString());  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  value  ==  null? "null "  :  value.toString());  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  value  ==  null? "null "  :  value.toString());	  newRecord    =   "null   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
117	[BUG]  [BUGGY]  newRecord  =  value  ==  null? "null "  :  value.getRecord();  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    out.append(format.getDelimiter());  }  if  (format.isQuoting())  {  printAndQuote(object,  value,  offset,  len);  }  else  if  (format.isEscaping())  {  printAndEscape(value,  offset,  len);  }  else  {  out.append(value,  offset,  offset  +  len);  }    [BUGGY]  newRecord  =  value  ==  null? "null "  :  value.getRecord();  [BUGGY]    }  [CLASS]  CSVPrinter  [METHOD]  print  [RETURN_TYPE]  void  Object  object  CharSequence  value  final  int  offset  final  int  len  [VARIABLES]  CharSequence  value  CSVFormat  format  Object  object  boolean  newRecord  int  len  offset  Appendable  out  	projects/Csv5/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	122	122	1	replace	newRecord  =  value  ==  null? "null "  :  value.getRecord();	  newRecord    =   "null   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
