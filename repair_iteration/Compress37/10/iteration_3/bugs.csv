bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits(numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordLimits(numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordLimits(numToRead);	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
2	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  +  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordLimits()  +  1;	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
3	[BUG]  [BUGGY]  Integer  numRecords  =  currEntry.getRecordLimits();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  Integer  numRecords  =  currEntry.getRecordLimits();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	Integer  numRecords  =  currEntry.getRecordLimits();	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
4	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  -  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordLimits()  -  1;	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
5	[BUG]  [BUGGY]  byte  numRecords  =  currEntry.getRecordLimits();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  byte  numRecords  =  currEntry.getRecordLimits();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	byte  numRecords  =  currEntry.getRecordLimits();	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.recordSize()  +  1;	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
7	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize(numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.recordSize(numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.recordSize(numToRead);	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
8	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  numToRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  numToRead;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.recordSize()  +  numToRead;	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
9	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordLimit();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.recordLimit();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.recordLimit();	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
10	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.length();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.length();	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  if(numToRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {	  if(numToRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
12	[BUG]  [BUGGY]  if(entryLimit  >=  0)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  >=  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  >=  0)  {	  if(totalRead    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
13	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
14	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
15	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
16	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
17	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
18	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
19	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(entryOffset!=  0)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(entryOffset!=  0)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(entryOffset!=  0)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
20	[BUG]  [BUGGY]  if(entrySize  >  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  >  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  >  0)  {	  if(entrySize!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
21	[BUG]  [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  0);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.read(buf,  offset,  0);	  int    numRecords    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
22	[BUG]  [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  0);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	byte  numRecords  =  is.read(buf,  offset,  0);	  int    numRecords    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
23	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0L);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  0L);	  int    numRecords    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
24	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  0,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
25	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  1);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  1);	  int    numRecords    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
26	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  -1)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  -1  &&  totalRead!=  -1)  {	  if(totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
27	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  -1  &&  totalRead!=  0)  {	  if(totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
28	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  restLen)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  -1  &&  totalRead!=  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  -1  &&  totalRead!=  restLen)  {	  if(totalRead!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
29	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  +  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordCount()  +  1;	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
30	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  -  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordCount()  -  1;	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
31	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  *  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  *  2;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordCount()  *  2;	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
32	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLength();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordLength();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordLength();	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
33	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimit();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordLimit();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordLimit();	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
34	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
35	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >=  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >=  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
36	[BUG]  [BUGGY]  if(entrySize  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  <  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
37	[BUG]  [BUGGY]  if(entryLimit  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  <  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
38	[BUG]  [BUGGY]  if(offset  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(offset  <  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(offset  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
39	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
40	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
41	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
42	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
43	[BUG]  [BUGGY]  if(numToRead  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >=  entryOffset)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >=  entryOffset)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
44	[BUG]  [BUGGY]  if(numToRead!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead!=  entryOffset)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead!=  entryOffset)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
45	[BUG]  [BUGGY]  if(entryOffset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  numToRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  numToRead)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
46	[BUG]  [BUGGY]  if(offset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(offset  >=  numToRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(offset  >=  numToRead)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
47	[BUG]  [BUGGY]  if(entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  numToRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  numToRead)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;	  ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;	  ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  0,  numToRead);  hasHitEOF  =  true;	  ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  if(entryOffset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  numToRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  numToRead)  {	  if(entryOffset!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
55	[BUG]  [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  totalRead.length)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  totalRead.length)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  <  0  ||  entryOffset  >  totalRead.length)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
56	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  totalRead.length)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  totalRead.length)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  >  totalRead.length)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
57	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  numRecords)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  numRecords)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  >  numRecords)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
58	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  0)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  >  0)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
59	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  totalRead)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  totalRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  >  totalRead)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
60	[BUG]  [BUGGY]  if(entryLimit  <  0  ||  entrySize  >  restLen)  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  <  0  ||  entrySize  >  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  <  0  ||  entrySize  >  restLen)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
61	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	byte  numRecords  =  is.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  totalRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  length);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  length);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  totalRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  true);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  if(entryLimit!=  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit!=  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit!=  0)  {	  if(entryLimit!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
69	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  ==  0  ||  hasHitEOF)  {	  if(entryOffset    ==    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  if(entryOffset  ==  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  0  &&  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  0  &&  hasHitEOF)  {	  if(entryOffset    ==    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  if(entryOffset!=  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  0  ||  hasHitEOF)  {	  if(entryOffset    ==    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
72	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  ==  0  ||  hasHitEOF)  {	  if(entryOffset    ==    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  if(entryOffset!=  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  0  &&  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  0  &&  hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  if(numToRead!=  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead!=  -1  &&  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead!=  -1  &&  hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
75	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  -1  &&  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  -1  &&  hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
76	[BUG]  [BUGGY]  if(entryOffset  >=  0  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >=  0  &&  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >=  0  &&  hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
77	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  -1  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  -1  ||  hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
78	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.length  -  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.length  -  1;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.length  +  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.length  +  1;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
80	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.length  -  2;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.length  -  2;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
81	[BUG]  [BUGGY]  byte  numRecords  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  byte  numRecords  =  currEntry.length;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	byte  numRecords  =  currEntry.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
82	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  offset;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.length  -  offset;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.length  -  offset;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
83	[BUG]  [BUGGY]  int  numRecords  =  totalRead.length;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  totalRead.length;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  totalRead.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
84	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  restLen)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0  ||  totalRead  ==  restLen)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
85	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  numToRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead  ==  numToRead)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
86	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  totalRead  ==  restLen)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >=  0  ||  totalRead  ==  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >=  0  ||  totalRead  ==  restLen)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
87	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  restLen)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead  >  restLen)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
88	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  restLen)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  0  ||  totalRead  ==  restLen)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
89	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  ==  restLen)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  ==  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  ==  restLen)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
90	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
91	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
92	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
93	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
94	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(entryOffset  >=  0)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
95	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
96	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
97	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  1;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
98	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  -  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  -  1;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordSize()  -  1;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
99	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize(numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordSize(numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordSize(numToRead);	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
100	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  *  numToRead;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  *  numToRead;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordSize()  *  numToRead;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
101	[BUG]  [BUGGY]  Integer  numRecords  =  currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  Integer  numRecords  =  currEntry.getRecordSize();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	Integer  numRecords  =  currEntry.getRecordSize();	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
102	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
104	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
105	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  0,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
106	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  length);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  numToRead,  length);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
107	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  numToRead,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
108	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  numToRead    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
109	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  numToRead    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
110	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
111	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;	  numToRead    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
112	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;	  numToRead    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
113	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
114	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  totalRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  totalRead);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
115	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  true);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  false);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
117	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  length);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  length);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
118	[BUG]  [BUGGY]  if(entryLimit  <  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  <  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  <  0)  {	  if(totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
119	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead  <  0)  {	  if(totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
120	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  <  numToRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead  <  numToRead)  {	  if(totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
121	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  <  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0  ||  totalRead  <  0)  {	  if(totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
122	[BUG]  [BUGGY]  if(totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(totalRead!=  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(totalRead!=  0)  {	  if    (numToRead!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
123	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
124	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
125	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
126	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
127	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
128	[BUG]  [BUGGY]  if(numToRead  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  =  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  =  0)  {	  if(numToRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
129	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  null)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  ==  null)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0  ||  totalRead  ==  null)  {	  if(numToRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
130	[BUG]  [BUGGY]  if(entryLimit  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  ==  -1)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  ==  -1)  {	  if(entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
131	[BUG]  [BUGGY]  if(offset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(offset  ==  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(offset  ==  0)  {	  if(entryLimit    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
132	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
133	[BUG]  [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
134	[BUG]  [BUGGY]  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
135	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  totalRead);  hasHitEOF  =  true;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
136	[BUG]  [BUGGY]  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
137	[BUG]  [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	byte  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
138	[BUG]  [BUGGY]  if(entryLimit  >  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  >  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  >  0)  {	  if(entryOffset    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
139	[BUG]  [BUGGY]  if(numToRead  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {	  if(entrySize    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
140	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  numRecords)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  numRecords)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  <  numRecords)  {	  if(entrySize    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
141	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  <  SMALL_BUFFER_SIZE)  {	  if(entrySize    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
142	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
143	[BUG]  [BUGGY]  Integer  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  Integer  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	Integer  numRecords  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
144	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  -1);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  -1);	  int    numRecords    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
145	[BUG]  [BUGGY]  if(hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(hasHitEOF)  {	  if(entryOffset    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
146	[BUG]  [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  restLen.length)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  restLen.length)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  <  0  ||  entryOffset  >  restLen.length)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
147	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  restLen.length)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  restLen.length)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  entrySize  >  restLen.length)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
148	[BUG]  [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  restLen)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  <  0  ||  entryOffset  >  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  <  0  ||  entryOffset  >  restLen)  {	  if(entryOffset    <    0    ||    entrySize    >    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
149	[BUG]  [BUGGY]  if(entrySize  >  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  >  -1)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  >  -1)  {	  if(entrySize    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
150	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  numToRead  +  1);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
151	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  numToRead,  len);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
152	[BUG]  [BUGGY]  if(totalRead  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(totalRead  <  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(totalRead  <  0  ||  hasHitEOF)  {	  if(totalRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
153	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
154	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >=  restLen)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >=  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead  >=  restLen)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
155	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  restLen)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead!=  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead!=  restLen)  {	  if(entryOffset    <    0    ||    totalRead    ==    restLen)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
156	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
157	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
158	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
159	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
160	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
161	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
162	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
163	[BUG]  [BUGGY]  if(entryOffset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >  numToRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >  numToRead)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
164	[BUG]  [BUGGY]  if(entryOffset  +  numToRead  >  restLen)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  +  numToRead  >  restLen)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  +  numToRead  >  restLen)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
165	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  +  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.length  +  2;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.length  +  2;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
166	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
167	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordStart();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordStart();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordStart();	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
168	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;	  ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
169	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  is.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  -1  &&  is.hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  -1  &&  is.hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
170	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  totalRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  totalRead;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.recordSize()  +  totalRead;	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
171	[BUG]  [BUGGY]  if(numToRead  >  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  -1)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  -1)  {	  if(numToRead    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
172	[BUG]  [BUGGY]  if(totalRead  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(totalRead  >=  -1)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(totalRead  >=  -1)  {	  if(numToRead    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
173	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  totalRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  totalRead;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  totalRead;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
174	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  numToRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  numToRead;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  numToRead;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
175	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  length;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  length;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
176	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
177	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
178	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
179	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
180	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
181	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
182	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  0,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
183	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  is.read(buf,  offset,  0);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  is.read(buf,  offset,  0);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
184	[BUG]  [BUGGY]  if(numToRead  <  0  ||  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0  ||  totalRead  >  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0  ||  totalRead  >  0)  {	  if(numToRead    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
185	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  0)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead  >  0)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
186	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0  ||  totalRead  >  hasHitEOF)  {	  if(entryOffset    <    0    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
187	[BUG]  [BUGGY]  if(entryLimit  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  ==  0  ||  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  ==  0  ||  hasHitEOF)  {	  if(entryLimit    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
188	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
189	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
190	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  padding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  padding);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  padding);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
191	[BUG]  [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
192	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
193	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
194	[BUG]  [BUGGY]  if(entryOffset  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >=  totalRead)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >=  totalRead)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
195	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >=  entrySize)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >=  entrySize)  {	  if(entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
196	[BUG]  [BUGGY]  int  numRecords  =  currEntry.readRecordCount();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  currEntry.readRecordCount();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  currEntry.readRecordCount();	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
197	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
198	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Unknown  entry  size: "  +  numToRead);  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Unknown    entry    size:   "    +    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
199	[BUG]  [BUGGY]  int  numRecords  =  this.currEntry.length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  this.currEntry.length;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  this.currEntry.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
200	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;	  int    numRecords    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
201	[BUG]  [BUGGY]  if(entryLimit  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryLimit  >=  -1)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryLimit  >=  -1)  {	  if(numToRead    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
202	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entryOffset  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entryOffset  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
203	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( "Tar  archive  must  be  initialized.   ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF    ||    hasHitEOF)    {    throw    new    IOException(   "Tar    archive    must    be    initialized.   ");    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
204	[BUG]  [BUGGY]  numToRead  =  currEntry.getHeaders().read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  currEntry.getHeaders().read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  currEntry.getHeaders().read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  numToRead    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
205	[BUG]  [BUGGY]  numToRead  =  currEntry.bytes.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  numToRead  =  currEntry.bytes.read(buf,  offset,  numToRead);  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	numToRead  =  currEntry.bytes.read(buf,  offset,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
206	[BUG]  [BUGGY]  int  numRecords  =  is.getRecordLimits();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  int  numRecords  =  is.getRecordLimits();  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	int  numRecords  =  is.getRecordLimits();	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
207	[BUG]  [BUGGY]  if(entrySize!=  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);      [BUGGY]  if(entrySize!=  -1  &&  hasHitEOF)  {  [BUGGY]      if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  return  totalRead;  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	656	656	1	replace	if(entrySize!=  -1  &&  hasHitEOF)  {	  if(entryOffset!=    -1    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
