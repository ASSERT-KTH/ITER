projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead==-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead==-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead!=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=-1&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize!=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize>restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead!=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordLimits();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.recordSize();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordCount();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize==-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead==restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit!=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordLimits(numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordLimits()+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656IntegernumRecords=currEntry.getRecordLimits();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordLimits()-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656bytenumRecords=currEntry.getRecordLimits();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.recordSize()+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.recordSize(numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.recordSize()+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.recordLimit();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.length();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(entryOffset>=0){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead==0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead!=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(entryOffset!=0){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656bytenumRecords=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,0L);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,0,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=-1&&totalRead!=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=-1&&totalRead!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=-1&&totalRead!=restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordCount()+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordCount()-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordCount()*2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordLength();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordLimit();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize<0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit<0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(offset<0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(entryOffset>=0){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead==0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(offset>=numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead);hasHitEOF=false;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=currEntry.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,totalRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead+1);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,0,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize>SMALL_BUFFER_SIZE){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize<0||entryOffset>totalRead.length){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize>totalRead.length){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize>numRecords){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize>totalRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit<0||entrySize>restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656bytenumRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead==0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize==0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=0&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead!=-1&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==-1&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=-1||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.length-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.length+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.length-2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656bytenumRecords=currEntry.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.length-offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=totalRead.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0||totalRead==restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead==numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0||totalRead==restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead>restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0||totalRead==restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize==restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead==0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=0){if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(entryOffset>=0){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead!=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize()+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize()-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize(numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize()*numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656IntegernumRecords=currEntry.getRecordSize();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=currEntry.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,0,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead);hasHitEOF=false;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=currEntry.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=currEntry.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,totalRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,0);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead<numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0||totalRead<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead==0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead!=0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0||totalRead==null){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit==-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(offset==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead);hasHitEOF=false;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numRecords=is.read(buf,offset,numToRead);hasHitEOF=false;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,totalRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numRecords=is.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656bytenumRecords=is.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0||entrySize<SMALL_BUFFER_SIZE){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize<numRecords){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize<SMALL_BUFFER_SIZE){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,0);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656IntegernumRecords=is.read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize<0||entryOffset>restLen.length){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||entrySize>restLen.length){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize<0||entryOffset>restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,numToRead,len);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead<0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead>=restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead!=restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset+numToRead>restLen){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.length+2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordStart();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656ch=is.read(buf,offset,0);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=-1&&is.hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.recordSize()+totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(totalRead>=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize()+totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize()+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.getRecordSize()+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=0){if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset!=0){if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,0,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0||totalRead>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0||totalRead>hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit==0||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0){if(hasHitEOF||hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset<0){if(hasHitEOF||hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead,padding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead<0){if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0){if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=totalRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=currEntry.readRecordCount();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize>0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset==0){if(hasHitEOF||hasHitEOF){thrownewIOException("Unknownentrysize:"+numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=this.currEntry.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.read(buf,offset,numToRead+1);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryLimit>=-1){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entryOffset>0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(numToRead>0){if(hasHitEOF||hasHitEOF){thrownewIOException("Tararchivemustbeinitialized.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=currEntry.getHeaders().read(buf,offset,numToRead);hasHitEOF=true;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656numToRead=currEntry.bytes.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656intnumRecords=is.getRecordLimits();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java656if(entrySize!=-1&&hasHitEOF){
