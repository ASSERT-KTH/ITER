projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.clone();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getGlobalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(compiler);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(tr);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(null);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getParent();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextPaxHeaders();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getName());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,headers,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,headers,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(record,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers.put(currEntry.getName(),currEntry.getName());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers.put(currEntry.getName(),currEntry.getName());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Entry<K,V>currEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getName());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextEntry();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry(entrySize);if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getName());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.clone();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)headers.clone();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.clear();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)super.paxHeaders.clone();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.pax();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)getGlobalPaxHeaders().clone();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize/1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize+2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize*1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(recordSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize+4);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize+3);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(encoding,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(paxHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(is,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(this.globalPaxHeaders());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.paxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getPaxHeaders();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentPaxHeaders();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=this.globalPaxHeaders;if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextPaxHeaders();if(currEntry==null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getPaxHeaders();if(currEntry==null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(true,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(true,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(true,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(compiler);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(compiler,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(compiler,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(recordSize,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(recordSize,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(recordLimit);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(recordSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(recordSize,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(recordSize,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(record,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(record,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=map.parsePaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(record.getHeaders());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(record,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseGlobalPaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(recordSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.get(recordSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(recordSize-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(recordLimit);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.get(recordSize-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextEntry();if(currEntry!=null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers=currEntry.getHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Entry<K,V>currEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.get(entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(entrySize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.get(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=paxHeaders.parsePaxHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers.put(currEntry.getKey(),currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Entry<K,V>currEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(this,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,this.headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,getPaxHeaders());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,headers.length-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,headers.length+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,recordHeaders.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,0,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),receiver);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders()+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),file);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,headers,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,this.headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers,recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers.put(currEntry.getName(),currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers.put(currEntry.getName(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Entry<K,V>currEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getKey());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(this.globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(globalPaxHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.size()-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.get(encoding));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.size()+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.size()-2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(paxHeaders.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.get(0));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)headers.get(this.globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(headers+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(0,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(paxHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(paxHeaders,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding,is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding,isHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,this.headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,headers,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,headers,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=this.globalPaxHeaders;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders().getInputStream();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders(true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders().readNow();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(paxHeaders,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(compiler,headers,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(headers,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntryInput();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry(entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry(0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry(null);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry().getValue();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(paxHeaders,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.zipEncoding.parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.get(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(encoding+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(encoding,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(encoding,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.remove(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextEntry();if(currEntry!=null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers=currEntry.getPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=this.globalPaxHeaders;if(currEntry!=null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(this,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(record,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.headers.parsePaxHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.headers.parsePaxHeaders(is,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getGlobalPaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getGlobalHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getGlobalPaxHeaders(true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize-2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(recordSize-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(0,recordSize-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseHeaders(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parseHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.headers.parseHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)paxHeaders.get(this.globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.get(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers.length-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers.length+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers,globalPaxHeaders.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers.length-2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers.length-4);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(paxHeaders,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){skipPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextEntry();if(currEntry!=null){skipPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry(0);if(currEntry!=null){skipPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.paxHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(globalPaxHeaders.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newLinkedHashMap<String,String>();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(256);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(encoding,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,globalPaxHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,fileEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,globalPaxHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,encoding,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(map);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(tr);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(tr,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(tr,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(tr.getKey());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(globalPaxHeaders());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=encoding.globalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,fileEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,encoding,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,encoding,isHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(record,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(globalPaxHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(globalPaxHeaders,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(globalPaxHeaders,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers=currEntry.getNextEntry();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Entry<K,V>currEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(encoding,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.getPaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.getPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getNext();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers=currEntry.getParent();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();headers=currEntry.getNext();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers=currEntry.getNext();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getNextEntry();if(currEntry!=null){headers=currEntry.getParent();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=getPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(zipEncoding,is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseCurrentHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(zipEncoding,isHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseRawHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parsePaxHeaders(globalPaxHeaders,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(compiler,globalPaxHeaders,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,true,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.zipEncoding.parsePaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=is.parsePaxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(headers,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(headers,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers!=null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=createCurrentEntry();if(currEntry!=null){headers=currEntry.getPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(encoding,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(padding,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(urlEncoding,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers!=null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers==null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(urlEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(this.zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=createCurrentEntry();if(currEntry!=null){skipPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=is.getCurrentEntry();if(currEntry!=null){skipPaxHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders(null);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers!=null){headers=currEntry.getParent();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers!=null){headers=currEntry.getNext();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getParent();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers==null){headers=currEntry.getParent();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(globalPaxHeaders,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)globalPaxHeaders.get(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(entrySize-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.remove(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(encoding,is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders(false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,this.headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=mapEncoding.getPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.paxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getNextPaxHeaders();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=is.getNextPaxHeaders();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getNextPaxHeaders();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers!=null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntry();if(headers==null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(urlEncoding,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseCurrentHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=encoding.parsePaxHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=hasHitEOF?zipEncoding.parsePaxHeaders(encoding):null;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=hasHitEOF?zipEncoding.parsePaxHeaders(headers):null;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(null,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(mapEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(headers,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(headers-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(headers.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.get(encoding).size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.get(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.keySet());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(record,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globals,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,4);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.headers.parsePaxHeaders(globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalHeaders(this,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,globalPaxHeaders,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,globalPaxHeaders.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getRecordHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getGlobalPaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(compiler);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseTarHeaders(tr);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(globalPaxHeaders,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(globalPaxHeaders,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),headerSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseZipHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseTarHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=createCurrentEntry();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,this.globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,globalPaxHeaders.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(padding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(this.headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers.put(currEntry.getName(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getKey());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=encoding.parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(headers.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=newHashMap<String,String>(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=mapEncoding();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(0,recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize-4);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(encoding,record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record,ZipEncoding.UTF8);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getName());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers.put(currEntry.getName(),currEntry.getName());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.paxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.paxHeaders(encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.remove(paxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=record.parsePaxHeaders(is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=record.parsePaxHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize,headers.length,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=getGlobalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getGlobalPaxHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(entrySize-1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(recordSize*2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.values());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders.peek());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(this,globalPaxHeaders,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(headers,this.zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(encoding,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parseGlobalPaxHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(recordSize,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers.size);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(zipEncoding,record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(encoding,recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parsePaxHeaders(record,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(globalPaxHeaders,headers,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.keySet();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.values();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.headers.parsePaxHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.pop();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=createCurrentEntry();if(currEntry!=null){headers=currEntry.getNextEntry();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(this);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parsePaxHeaders(headers,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(encoding,this.zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444(TarArchiveEntry)this.globalPaxHeaders.get(encoding,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parseHeaders(recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(globalPaxHeaders,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalPaxHeaders(globalPaxHeaders,headers.size());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getCurrentEntry();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers.put(currEntry.getName(),currEntry.getName());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(trimHeaders,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(is,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.globalPaxHeaders.parsePaxHeaders(is,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(padding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444InputStreamis=getGlobalPaxHeaders().pax();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(compiler,headers.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=this.headers.parsePaxHeaders(this,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=is.parsePaxHeaders(this,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(this,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=headers.parsePaxHeaders(this,is);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(this,headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=mapEncoding.globalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=this.globalPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseGlobalHeaders(record);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parseHeaders(this,globalPaxHeaders);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parseHeaders(this,GlobalPaxHeaders.DEFAULT_HEADER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parsePaxHeaders(false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),cache);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(record.getHeaders(),fileEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.readPaxHeaders()?zipEncoding.parsePaxHeaders(encoding):null;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.readPaxHeaders()?zipEncoding.parsePaxHeaders(encoding):headers;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=createCurrentEntry();if(currEntry!=null){headers=currEntry.getHeaders();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=newHashMap<String,String>();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntryStart();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=getCurrentEntryCount();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parseHeaders(zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parseHeaders(headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=globalPaxHeaders.parsePaxHeaders(padding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalTarArchiveEntrycurrEntry=getNextPaxHeaders();if(currEntry!=null){headers.put(currEntry.getKey(),currEntry.getValue());}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444Map<String,String>headers=parsePaxHeaders(zipEncoding,headers);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=parsePaxHeaders(g2,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getParent();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444if(headers!=null){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){headers=currEntry.getNext();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444TarArchiveEntrycurrEntry=createCurrentEntry();if(currEntry!=null){headers=currEntry.getParent();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=getPaxHeaders(encoding,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.getPaxHeaders();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=zipEncoding.parsePaxHeaders(headers,encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.parsePaxHeaders(encoding,zipEncoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java444finalMap<String,String>headers=is.readPaxHeaders(encoding);
