bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
2	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
3	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
4	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  headers.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
5	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(record,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
6	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
7	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getName());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getName());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
8	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
9	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
10	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
11	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(entrySize);  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(entrySize);  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(entrySize);  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
12	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.clone();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.clone();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.clone();	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  (TarArchiveEntry)headers.clone();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)headers.clone();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)headers.clone();	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.clear();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.clear();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.clear();	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  (TarArchiveEntry)super.paxHeaders.clone();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)super.paxHeaders.clone();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)super.paxHeaders.clone();	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.pax();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.pax();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.pax();	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  (TarArchiveEntry)getGlobalPaxHeaders().clone();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)getGlobalPaxHeaders().clone();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)getGlobalPaxHeaders().clone();	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(record);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
19	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
20	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
21	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders();	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
22	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
23	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  /  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  /  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  /  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
24	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  2);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  2);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
25	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  *  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  *  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  *  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
26	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(recordSize  +  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
27	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  4);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  4);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  4);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
28	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  3);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  3);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  +  3);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
29	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
30	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
31	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  zipEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
32	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(is,  encoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(is,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(is,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
33	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(this.globalPaxHeaders());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(this.globalPaxHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(this.globalPaxHeaders());	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
34	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.paxHeaders();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.paxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.paxHeaders();	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
35	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(paxHeaders);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
36	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(record);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
37	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getNextPaxHeaders();	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
38	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
39	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
40	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.globalPaxHeaders;  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  this.globalPaxHeaders;  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  this.globalPaxHeaders;  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
41	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
42	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getPaxHeaders();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getPaxHeaders();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getPaxHeaders();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
43	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
44	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
45	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(false);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
46	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
47	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(true,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
48	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(compiler);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(compiler);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(compiler);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(compiler);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(compiler);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  encoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(compiler);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
51	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers);	  final    Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
52	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(recordSize,  headers.length);	  final    Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
53	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordLimit);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(recordLimit);	  final    Map    <    String,    String>    headers    =    parseHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
54	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize  +  1);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize,  headers.length);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize,  headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(recordSize,  headers);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(recordSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(record,  headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(record,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(record,  headers);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(record,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(record,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(record,  headers.length);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(record);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
60	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  map.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  map.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  map.parsePaxHeaders(record);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
61	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(record);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parseHeaders(record);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
62	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record.getHeaders());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record.getHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(record.getHeaders());	  final    Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
63	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  headers.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(record,  headers.length);	  final    Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
64	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
65	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseGlobalPaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseGlobalPaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parseGlobalPaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
66	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(is);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(is);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
67	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(recordSize  +  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(recordSize  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.get(recordSize  +  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(recordSize  -  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordLimit);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordLimit);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(recordLimit);	  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(recordSize  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.get(recordSize  -  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
73	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
74	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getHeaders();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
75	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
76	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
77	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(entryOffset);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(entryOffset);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(entryOffset);	  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(entryOffset);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(entryOffset);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.get(entryOffset);	  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(entrySize  +  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(recordSize);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.get(recordSize);	  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(paxHeaders);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
82	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  paxHeaders.parsePaxHeaders(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  paxHeaders.parsePaxHeaders(globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  paxHeaders.parsePaxHeaders(globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
83	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
84	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getKey(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getKey(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getKey(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
85	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
86	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
87	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
88	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  headers);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
89	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  encoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
90	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(this,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
91	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  this.headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  this.headers);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
92	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  getPaxHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  getPaxHeaders());	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
93	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length  -  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
94	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length  +  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
95	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  recordHeaders.length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  recordHeaders.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  recordHeaders.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
96	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  SMALL_BUFFER_SIZE);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  SMALL_BUFFER_SIZE);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
97	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  0,  headers.length);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  0,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  0,  headers.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
98	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  true);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
99	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  receiver);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  receiver);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  receiver);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
100	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  this);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  this);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  this);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
101	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  false);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
102	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders()  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders()  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders()  +  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
103	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  file);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  file);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  file);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
104	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
105	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
106	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  this.headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  this.headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
107	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  recordSize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  recordSize);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
108	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
109	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getValue());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers.put(currEntry.getName(),  currEntry.getValue());	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
110	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
111	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
112	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
113	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
114	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
115	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
116	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders();	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
117	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
118	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  -  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
119	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding));  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding));  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding));	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
120	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  +  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
121	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  -  2);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.size()  -  2);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
122	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders.size());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
123	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(0));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(0));  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(0));	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
124	[BUG]  [BUGGY]  (TarArchiveEntry)headers.get(this.globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)headers.get(this.globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)headers.get(this.globalPaxHeaders);	  (TarArchiveEntry)this.globalPaxHeaders.get(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
125	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(record);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(record);	  (TarArchiveEntry)this.globalPaxHeaders.get(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
126	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(headers  +  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(0,  headers);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(0,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(0,  headers);	  (TarArchiveEntry)this.globalPaxHeaders.get(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
128	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(paxHeaders,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(paxHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
129	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(paxHeaders,  true);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(paxHeaders,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(paxHeaders,  true);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
130	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  is);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  is);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
131	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  isHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  isHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
132	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
133	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
134	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
135	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  encoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
136	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  this.headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  this.headers);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
137	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  encoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
138	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
139	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  true);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  headers,  true);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
140	[BUG]  [BUGGY]  InputStream  is  =  getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getPaxHeaders();	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
141	[BUG]  [BUGGY]  InputStream  is  =  this.globalPaxHeaders;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  this.globalPaxHeaders;  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  this.globalPaxHeaders;	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
142	[BUG]  [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getGlobalPaxHeaders(headers);	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
143	[BUG]  [BUGGY]  InputStream  is  =  getGlobalPaxHeaders().getInputStream();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getGlobalPaxHeaders().getInputStream();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getGlobalPaxHeaders().getInputStream();	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
144	[BUG]  [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(true);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getGlobalPaxHeaders(true);	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
145	[BUG]  [BUGGY]  InputStream  is  =  getGlobalPaxHeaders().readNow();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getGlobalPaxHeaders().readNow();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getGlobalPaxHeaders().readNow();	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
146	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  false);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
147	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  false);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
148	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
149	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
150	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers,  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
151	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers,  false);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(headers,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
152	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryInput();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryInput();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntryInput();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
153	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(entrySize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(entrySize);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
154	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(0);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
155	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(null);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(null);	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
156	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry().getValue();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
157	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
158	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
159	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
160	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
161	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
162	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(record);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
163	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
164	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(paxHeaders);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
165	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
166	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getHeaders();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getHeaders();	  final    Map    <    String,    String>    headers    =    parseHeaders();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
167	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(encoding);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.get(encoding);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
168	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding  +  1);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(encoding  +  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
169	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(encoding,  hasHitEOF);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
170	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  headers);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(encoding,  headers);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
171	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.remove(encoding);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.remove(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.remove(encoding);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
172	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
173	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
174	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
175	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getPaxHeaders();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
176	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  this.globalPaxHeaders;  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  this.globalPaxHeaders;  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  this.globalPaxHeaders;  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
177	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
178	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(record,  headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(record,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(record,  headers);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
179	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(is);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(is);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
180	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(is,  headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(is,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(is,  headers);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
181	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(this,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(this,  headers);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
182	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this,  headers);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
183	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders;  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders;	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
184	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
185	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalHeaders();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getGlobalHeaders();	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
186	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(true);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(true);	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
187	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  -  2);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  -  2);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
188	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(recordSize  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(recordSize  -  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
189	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(0,  recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(0,  recordSize  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(0,  recordSize  -  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
190	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parseHeaders(paxHeaders);	  final    Map    <    String,    String>    headers    =    is.parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
191	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parseHeaders(is);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parseHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parseHeaders(is);	  final    Map    <    String,    String>    headers    =    is.parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
192	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parseHeaders(is);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parseHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.headers.parseHeaders(is);	  final    Map    <    String,    String>    headers    =    is.parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
193	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(headers);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parseHeaders(headers);	  final    Map    <    String,    String>    headers    =    is.parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
194	[BUG]  [BUGGY]  (TarArchiveEntry)paxHeaders.get(this.globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)paxHeaders.get(this.globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)paxHeaders.get(this.globalPaxHeaders);	  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
195	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.get(paxHeaders);	  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
196	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.length);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.length);	  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
197	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders,  headers);	  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
198	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
199	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  +  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  +  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
200	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  globalPaxHeaders.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
201	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  2);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  2);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
202	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  4);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  4);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.length  -  4);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
203	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  headers.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders,  headers.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
204	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
205	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
206	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
207	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry(0);  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
208	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
209	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(this);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(this);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(this);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
210	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
211	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
212	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
213	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(recordSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(recordSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
214	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  LinkedHashMap  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
215	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(paxHeaders);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(paxHeaders);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
216	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(256);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(256);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(256);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
217	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
218	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  globalPaxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  globalPaxHeaders,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  globalPaxHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
219	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  zipEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
220	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  fileEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
221	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  globalPaxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  globalPaxHeaders,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  globalPaxHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
222	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  encoding,  zipEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
223	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders();	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
224	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(map);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(map);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(map);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
225	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(tr);	  final    Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
226	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr,  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(tr,  headers);	  final    Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
227	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr,  encoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(tr,  encoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
228	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr.getKey());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(tr.getKey());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(tr.getKey());	  final    Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
229	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders());	  final    Map    <    String,    String>    headers    =    globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
230	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.globalPaxHeaders();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.globalPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  encoding.globalPaxHeaders();	  final    Map    <    String,    String>    headers    =    globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
231	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
232	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  is);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  is);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
233	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
234	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  fileEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
235	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
236	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  isHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  encoding,  isHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
237	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  encoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(record,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
238	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
239	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  true);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
240	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  false);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  false);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
241	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNextEntry();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNextEntry();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
242	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
243	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNextEntry();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNextEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNextEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
244	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
245	[BUG]  [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Entry  <  K,  V>  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
246	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parseHeaders(encoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
247	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(encoding,  zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
248	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(is);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(is);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
249	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(headers,  encoding);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(headers,  encoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
250	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.getPaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.getPaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.getPaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
251	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.getPaxHeaders();	  final    Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
252	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
253	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
254	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(record);	  final    Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
255	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
256	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getParent();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getParent();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getParent();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
257	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNext();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNext();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  headers  =  currEntry.getNext();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
258	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
259	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getNextEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
260	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(true);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(true);	  final    Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
261	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  getPaxHeaders();	  final    Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
262	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parseHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
263	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  is);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  is);	  final    Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
264	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseCurrentHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseCurrentHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseCurrentHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
265	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  isHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding,  isHitEOF);	  final    Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
266	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseRawHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseRawHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseRawHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
267	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  false);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
268	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  globalPaxHeaders,  true);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  globalPaxHeaders,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  globalPaxHeaders,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
269	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
270	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  true,  encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  true,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  true,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
271	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.zipEncoding.parsePaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
272	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
273	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
274	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
275	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(headers,  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(headers,  true);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
276	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers,  true);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(headers,  true);	  final    Map    <    String,    String>    headers    =    parseHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
277	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers,  encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(headers,  encoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
278	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
279	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
280	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
281	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  true);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
282	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
283	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(padding,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
284	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(urlEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(urlEncoding,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(urlEncoding,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
285	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
286	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
287	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
288	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(urlEncoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(urlEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(urlEncoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
289	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this.zipEncoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
290	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(true);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
291	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(is);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(is);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
292	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
293	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  is.getCurrentEntry();  if(currEntry!=  null)  {  skipPaxHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipPaxHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
294	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(true);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
295	[BUG]  [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getGlobalPaxHeaders(recordSize);	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
296	[BUG]  [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(null);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getGlobalPaxHeaders(null);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getGlobalPaxHeaders(null);	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
297	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
298	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
299	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
300	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
301	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(headers,  encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(headers,  encoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
302	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
303	[BUG]  [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)globalPaxHeaders.get(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)globalPaxHeaders.get(headers);	  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
304	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(entrySize  -  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
305	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.remove(headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.remove(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.remove(headers);	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
306	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  is);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(encoding,  is);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
307	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
308	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(false);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders(false);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
309	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  this.headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  this.headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    headers);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
310	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  mapEncoding.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  mapEncoding.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  mapEncoding.getPaxHeaders();	  final    Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
311	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    getPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
312	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders();	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
313	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
314	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  is.getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  is.getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  is.getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
315	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValu  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValu	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
316	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNextEntry();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers!=  null)  {  headers  =  currEntry.getNextEntry();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
317	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getNextEntry();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntry();  if(headers  ==  null)  {  headers  =  currEntry.getNextEntry();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
318	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
319	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(urlEncoding,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(urlEncoding,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(urlEncoding,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
320	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getHeaders(encoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
321	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseCurrentHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseCurrentHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseCurrentHeaders(encoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
322	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
323	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(this,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(this,  headers);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
324	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  hasHitEOF?  zipEncoding.parsePaxHeaders(encoding):  null;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  hasHitEOF?  zipEncoding.parsePaxHeaders(encoding):  null;  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  hasHitEOF?  zipEncoding.parsePaxHeaders(encoding):  null;	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
325	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  hasHitEOF?  zipEncoding.parsePaxHeaders(headers):  null;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  hasHitEOF?  zipEncoding.parsePaxHeaders(headers):  null;  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  hasHitEOF?  zipEncoding.parsePaxHeaders(headers):  null;	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
326	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(null,  encoding);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(null,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(null,  encoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
327	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(mapEncoding);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(mapEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(mapEncoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(null);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
328	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(true);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(true);	  final    Map    <    String,    String>    headers    =    parseHeaders();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
329	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers,  0);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(headers,  0);	  (TarArchiveEntry)this.globalPaxHeaders.get(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
330	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(headers  -  1);	  (TarArchiveEntry)this.globalPaxHeaders.get(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
331	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers.size());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers.size());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
332	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding).size());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding).size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding).size());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
333	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.get(encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
334	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.keySet());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.keySet());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.keySet());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
335	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(record,  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(record,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parseHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
336	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  encoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
337	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globals,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globals,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globals,  true);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
338	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  4);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  4);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  4);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
339	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  2);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  2);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
340	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
341	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalHeaders(this,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalHeaders(this,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalHeaders(this,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
342	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders,  headers);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
343	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
344	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getRecordHeaders();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getRecordHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getRecordHeaders();	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
345	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
346	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(compiler);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(compiler);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(compiler);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(compiler);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
347	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseTarHeaders(tr);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseTarHeaders(tr);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseTarHeaders(tr);	  final    Map    <    String,    String>    headers    =    parseHeaders(tr);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
348	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  headers);	  final    Map    <    String,    String>    headers    =    parseHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
349	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  headers.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(globalPaxHeaders,  headers.length);	  final    Map    <    String,    String>    headers    =    parseHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
350	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headers);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
351	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  hasHitEOF);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  hasHitEOF);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
352	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headerSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headerSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  headerSize);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
353	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseZipHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseZipHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseZipHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
354	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseTarHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseTarHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseTarHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
355	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
356	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  this.globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  this.globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  this.globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
357	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
358	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(padding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(padding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(padding);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
359	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this.headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this.headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this.headers);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
360	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
361	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
362	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
363	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getKey());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
364	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  encoding.parsePaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
365	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
366	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
367	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  mapEncoding();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  mapEncoding();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  mapEncoding();	  final    Map    <    String,    String>    headers    =    globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
368	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalHeaders();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalHeaders();	  final    Map    <    String,    String>    headers    =    globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
369	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(0,  recordSize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(0,  recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(0,  recordSize);	  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
370	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  -  4);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  -  4);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  -  4);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
371	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  record);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  record);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
372	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  ZipEncoding.UTF8);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  ZipEncoding.UTF8);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
373	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
374	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
375	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
376	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(headers);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(headers);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
377	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.paxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
378	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders.size());	  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
379	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.remove(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.remove(paxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.remove(paxHeaders);	  (TarArchiveEntry)this.globalPaxHeaders.get(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
380	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  record.parsePaxHeaders(is);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  record.parsePaxHeaders(is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  record.parsePaxHeaders(is);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
381	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  record.parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  record.parsePaxHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  record.parsePaxHeaders(headers);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
382	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize,  headers.length,  headers.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
383	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  getGlobalPaxHeaders();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  getGlobalPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  getGlobalPaxHeaders();	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
384	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getGlobalPaxHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
385	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(entrySize  -  1);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(entrySize  -  1);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
386	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  *  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  *  2);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize  *  2);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(recordSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
387	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.values());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
388	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.peek());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.peek());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders.peek());	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
389	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders,  headers.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this,  globalPaxHeaders,  headers.length);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
390	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers,  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(headers,  this.zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(headers,  this.zipEncoding);	  (TarArchiveEntry)this.globalPaxHeaders.get(headers);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
391	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(encoding,  zipEncoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
392	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
393	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize,  headers.length);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(recordSize,  headers.length);	  (TarArchiveEntry)this.globalPaxHeaders.get(recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
394	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.size);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.size);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers.size);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
395	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  record);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  record);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
396	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  recordSize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding,  recordSize);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
397	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(record,  zipEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record,    encoding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
398	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  false);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders,  headers,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
399	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.keySet();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.keySet();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.keySet();	  final    Map    <    String,    String>    headers    =    globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
400	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.values();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.values();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.values();	  final    Map    <    String,    String>    headers    =    globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
401	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(record);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
402	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.pop();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.pop();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.pop();	  (TarArchiveEntry)this.globalPaxHeaders.clone();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
403	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNextEntry();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getNextEntry();    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
404	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(this);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
405	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  false);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(headers,  false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
406	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(zipEncoding);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
407	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  this.zipEncoding);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  this.zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(encoding,  this.zipEncoding);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
408	[BUG]  [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  (TarArchiveEntry)this.globalPaxHeaders.get(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	(TarArchiveEntry)this.globalPaxHeaders.get(encoding,  zipEncoding);	  (TarArchiveEntry)this.globalPaxHeaders.get(encoding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
409	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parseHeaders(recordSize);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parseHeaders(recordSize);	  final    Map    <    String,    String>    headers    =    is.parseHeaders(this);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
410	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers.length);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
411	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers.size());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers.size());  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(globalPaxHeaders,  headers.size());	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
412	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getCurrentEntry();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getCurrentEntry();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
413	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getName(),  currEntry.getName());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getName(),    currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
414	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(trimHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(trimHeaders,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(trimHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(globalPaxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
415	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(is,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(is,  true);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(is,  true);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
416	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(is,  encoding);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(is,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.globalPaxHeaders.parsePaxHeaders(is,  encoding);	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders.parsePaxHeaders(is);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
417	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(padding);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(padding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(padding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
418	[BUG]  [BUGGY]  InputStream  is  =  getGlobalPaxHeaders().pax();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  InputStream  is  =  getGlobalPaxHeaders().pax();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	InputStream  is  =  getGlobalPaxHeaders().pax();	  InputStream    is    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
419	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers.length);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(compiler,  headers.length);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(compiler);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
420	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(this,  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(this,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  this.headers.parsePaxHeaders(this,  headers);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
421	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
422	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  encoding);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  encoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
423	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  headers.parsePaxHeaders(this,  is);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  headers.parsePaxHeaders(this,  is);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  headers.parsePaxHeaders(this,  is);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
424	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  headers,  encoding);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this,  headers,  encoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
425	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  mapEncoding.globalPaxHeaders();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  mapEncoding.globalPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  mapEncoding.globalPaxHeaders();	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
426	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  this.globalPaxHeaders();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  this.globalPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  this.globalPaxHeaders();	  final    Map    <    String,    String>    headers    =    this.globalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
427	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalHeaders(record);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalHeaders(record);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalHeaders(record);	  final    Map    <    String,    String>    headers    =    parseGlobalPaxHeaders(record);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
428	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
429	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parseHeaders(this,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
430	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  GlobalPaxHeaders.DEFAULT_HEADER_SIZE);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this,  GlobalPaxHeaders.DEFAULT_HEADER_SIZE);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this,  GlobalPaxHeaders.DEFAULT_HEADER_SIZE);	  final    Map    <    String,    String>    headers    =    parseHeaders(this,    headers);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
431	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(false);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(false);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
432	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  cache);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  cache);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  cache);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
433	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  fileEncoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  fileEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record.getHeaders(),  fileEncoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(record.getHeaders());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
434	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.readPaxHeaders()?  zipEncoding.parsePaxHeaders(encoding):  null;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.readPaxHeaders()?  zipEncoding.parsePaxHeaders(encoding):  null;  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.readPaxHeaders()?  zipEncoding.parsePaxHeaders(encoding):  null;	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
435	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.readPaxHeaders()?  zipEncoding.parsePaxHeaders(encoding):  headers;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.readPaxHeaders()?  zipEncoding.parsePaxHeaders(encoding):  headers;  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.readPaxHeaders()?  zipEncoding.parsePaxHeaders(encoding):  headers;	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
436	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getHeaders();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getHeaders();    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
437	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>();	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
438	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryStart();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryStart();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntryStart();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
439	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryCount();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  getCurrentEntryCount();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  getCurrentEntryCount();	  TarArchiveEntry    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
440	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parseHeaders(zipEncoding);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
441	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parseHeaders(headers);	  final    Map    <    String,    String>    headers    =    parseHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
442	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(padding);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(padding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  globalPaxHeaders.parsePaxHeaders(padding);	  final    Map    <    String,    String>    headers    =    globalPaxHeaders.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
443	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  TarArchiveEntry  currEntry  =  getNextPaxHeaders();  if(currEntry!=  null)  {  headers.put(currEntry.getKey(),  currEntry.getValue());  }	  TarArchiveEntry    currEntry    =    getNextPaxHeaders();    if(currEntry!=    null)    {    headers.put(currEntry.getKey(),    currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
444	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	Map  <  String,  String>  headers  =  parsePaxHeaders(zipEncoding,  headers);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
445	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(g2,  encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(g2,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(g2,  encoding);	  final    Map    <    String,    String>    headers    =    parsePaxHeaders(headers,    encoding);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
446	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
447	[BUG]  [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	if(headers!=  null)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getNext();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
448	[BUG]  [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	TarArchiveEntry  currEntry  =  createCurrentEntry();  if(currEntry!=  null)  {  headers  =  currEntry.getParent();  }	  TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    headers    =    currEntry.getParent();    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
449	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  getPaxHeaders(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  getPaxHeaders(encoding,  zipEncoding);	  final    Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
450	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.getPaxHeaders();  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.getPaxHeaders();	  final    Map    <    String,    String>    headers    =    getPaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
451	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers,  encoding);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers,  encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  zipEncoding.parsePaxHeaders(headers,  encoding);	  final    Map    <    String,    String>    headers    =    zipEncoding.parsePaxHeaders(headers);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
452	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding,  zipEncoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(encoding,  zipEncoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
453	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.readPaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      private  void  paxHeaders()  throws  IOException{      [BUGGY]  final  Map  <  String,  String>  headers  =  is.readPaxHeaders(encoding);  [BUGGY]      getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.readPaxHeaders(encoding);	  final    Map    <    String,    String>    headers    =    is.parsePaxHeaders(encoding);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
