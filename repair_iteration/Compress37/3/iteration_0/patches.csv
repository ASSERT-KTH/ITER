bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(record);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(record);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this);  [CE]  illegal  start  of  type  [FE]      NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parseHeaders(this);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseHeaders(this);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders();  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders();  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders();	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parseGlobalPaxHeaders(this);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(recordSize);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  is.parsePaxHeaders(this);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]    [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	  	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(globalPaxHeaders);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding);  [CE]  illegal  start  of  type  [FE]      NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(encoding);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(headers);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  private  void  paxHeaders()  throws  IOException{  [BUGGY]  final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders);  [BUGGY]  getNextEntry();  //  Get  the  actual  file  entry  applyPaxHeadersToCurrentEntry(headers);  }  [CLASS]  TarArchiveInputStream  [METHOD]  paxHeaders  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  length  markLimit  readNow  recordSize  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	444	444	1	replace	final  Map  <  String,  String>  headers  =  parsePaxHeaders(paxHeaders);	final  Map<String,  String>  headers  =  parsePaxHeaders(this);  	non-compiled	[CE]  illegal  start  of  type	5	None	replace
