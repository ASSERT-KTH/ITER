bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  count(entryLimit,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entrySize,  hasHitEOF);	  count(entryLimit,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
8	[BUG]  [BUGGY]  count(entry,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  entrySize,  hasHitEOF);	  count(entryLimit,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
9	[BUG]  [BUGGY]  count(entryOffset  +  numRecords);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numRecords);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
10	[BUG]  [BUGGY]  count(entryLimit  +  numRecords);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  numRecords);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
11	[BUG]  [BUGGY]  count(numToRead  +  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  entrySize);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
12	[BUG]  [BUGGY]  count(offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  numRecords);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
13	[BUG]  [BUGGY]  count(numToRead  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  1,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  1,  totalRead);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
14	[BUG]  [BUGGY]  count(numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  1);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
15	[BUG]  [BUGGY]  count(remainder,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset,  hasHitEOF);	  count(remainder,    entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
16	[BUG]  [BUGGY]  count(entryLimit,  restLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  restLimit,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restLimit,  hasHitEOF);	  count(remainder,    entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
17	[BUG]  [BUGGY]  count(entrySize,  restLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  restLimit,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  restLimit,  hasHitEOF);	  count(remainder,    entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
18	[BUG]  [BUGGY]  count(remainder,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  numToRead,  hasHitEOF);	  count(remainder,    entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
19	[BUG]  [BUGGY]  count(remainder,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entrySize,  hasHitEOF);	  count(remainder,    entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
20	[BUG]  [BUGGY]  count(remainder,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  totalRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  totalRead,  hasHitEOF);	  count(remainder,    entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
21	[BUG]  [BUGGY]  count(numToRead,  offset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  offset);	  count(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
22	[BUG]  [BUGGY]  count(offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  entryOffset,  numToRead);	  count(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
23	[BUG]  [BUGGY]  count(remainder,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  offset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  offset,  numToRead);	  count(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
24	[BUG]  [BUGGY]  count(buffered,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buffered,  offset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buffered,  offset,  numToRead);	  count(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
25	[BUG]  [BUGGY]  count(buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset,  hasHitEOF);	  count(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
26	[BUG]  [BUGGY]  count(entrySize,  buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  buf,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  buf,  entryOffset);	  count(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
27	[BUG]  [BUGGY]  count(entryLimit,  buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  buf,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  buf,  entryOffset);	  count(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
28	[BUG]  [BUGGY]  count(entryOffset,  buf);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  buf);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  buf);	  count(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
29	[BUG]  [BUGGY]  count(entry,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  entryOffset);	  count(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
30	[BUG]  [BUGGY]  count(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entryOffset);	  count(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
31	[BUG]  [BUGGY]  count(buf,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset,  numToRead);	  count(entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
32	[BUG]  [BUGGY]  count(entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  numToRead,  hasHitEOF);	  count(entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
33	[BUG]  [BUGGY]  count(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  numToRead);	  count(entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
34	[BUG]  [BUGGY]  count(remainder,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  numToRead);	  count(entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
35	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getHitEOF()  +  1;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getHitEOF()  +  1;	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF()  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getHitEOF()  -  1;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getHitEOF()  -  1;	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  int  totalRead  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getRecordSize();  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getRecordSize();	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(entryOffset);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getHitEOF(entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getHitEOF(entryOffset);	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  long  totalRead  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  long  totalRead  =  getHitEOF();  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	long  totalRead  =  getHitEOF();	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  int  totalRead  =  getUpperBound();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getUpperBound();  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getUpperBound();	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  count(entryOffset,  0);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  0);	  count(entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
42	[BUG]  [BUGGY]  count(numToRead,  0);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  0);	  count(entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
43	[BUG]  [BUGGY]  count(entrySize,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  0,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  0,  entryOffset);	  count(entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
44	[BUG]  [BUGGY]  count(entryLimit,  0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  0);	  count(entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
45	[BUG]  [BUGGY]  count(entrySize,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  0,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  0,  totalRead);	  count(entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
46	[BUG]  [BUGGY]  count(remainder,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  0,  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  0,  entrySize);	  count(entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
47	[BUG]  [BUGGY]  count(buf,  numToRead,  restLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  numToRead,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  numToRead,  restLimit);	  count(numToRead,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
48	[BUG]  [BUGGY]  count(buf,  offset,  restLimit);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  restLimit);	  count(numToRead,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
49	[BUG]  [BUGGY]  count(entryLimit,  restLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restLimit);	  count(numToRead,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
50	[BUG]  [BUGGY]  count(numToRead,  entryOffset,  restLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  entryOffset,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  entryOffset,  restLimit);	  count(numToRead,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
51	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
53	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
54	[BUG]  [BUGGY]  if(numToRead  >=  restLen)  {  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >=  restLen)  {  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >=  restLen)  {  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
55	[BUG]  [BUGGY]  if(numToRead  ==  restLen)  {  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  ==  restLen)  {  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  ==  restLen)  {  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
56	[BUG]  [BUGGY]  count(entrySize,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset,  hasHitEOF);	  count(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
57	[BUG]  [BUGGY]  count(entrySize,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset  +  numToRead);	  count(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
58	[BUG]  [BUGGY]  count(entrySize,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset  +  1);	  count(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
59	[BUG]  [BUGGY]  count(entrySize,  entryOffset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset  +  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset  +  numRecords);	  count(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
60	[BUG]  [BUGGY]  count(entrySize,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset,  numToRead);	  count(entrySize,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
61	[BUG]  [BUGGY]  count(buf,  entryOffset  +  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryOffset  +  numToRead,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset  +  numToRead,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  count(numToRead  +  entryOffset,  restLen);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  entryOffset,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  entryOffset,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  0,  restLen);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  numToRead,  0,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  0,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  count(entryOffset  +  totalRead,  restLen);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  totalRead,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  totalRead,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  offset,  restLen);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  numToRead,  offset,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  offset,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
67	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
68	[BUG]  [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
70	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
71	[BUG]  [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  ||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
73	[BUG]  [BUGGY]  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
74	[BUG]  [BUGGY]  ||(numToRead  >=  restLen))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||(numToRead  >=  restLen))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||(numToRead  >=  restLen))  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  ||(numToRead  ==  restLen))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||(numToRead  ==  restLen))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||(numToRead  ==  restLen))  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  ||(numToRead  ==  restLen  -  1))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||(numToRead  ==  restLen  -  1))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||(numToRead  ==  restLen  -  1))  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  count(entryOffset  +  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  totalRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  totalRead,  hasHitEOF);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
79	[BUG]  [BUGGY]  count(entryOffset  +  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  totalRead,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  totalRead,  numToRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
80	[BUG]  [BUGGY]  count(entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  1,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  1,  totalRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  count(entryOffset  +  length);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  length);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  length);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]  count(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  hasHitEOF);	  count(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
83	[BUG]  [BUGGY]  count(remainderLimit,  hasHitEOF,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  hasHitEOF,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  hasHitEOF,  totalRead);	  count(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
84	[BUG]  [BUGGY]  count(remainderOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset,  hasHitEOF);	  count(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
85	[BUG]  [BUGGY]  count(entry,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  numToRead);	  count(numToRead,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
86	[BUG]  [BUGGY]  count(entry.length,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry.length,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry.length,  numToRead);	  count(numToRead,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
87	[BUG]  [BUGGY]  count(entryStart,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryStart,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryStart,  numToRead);	  count(numToRead,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
88	[BUG]  [BUGGY]  count(buf,  entryOffset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryOffset  +  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset  +  numToRead,  hasHitEOF);	  count(entryOffset    +    numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
89	[BUG]  [BUGGY]  count(buf,  entryOffset  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryOffset  +  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset  +  numToRead,  totalRead);	  count(entryOffset    +    numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
90	[BUG]  [BUGGY]  count(numToRead  +  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  entryOffset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  entryOffset,  totalRead);	  count(entryOffset    +    numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]  count(numToRead  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  entryOffset,  hasHitEOF);	  count(entryOffset    +    numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  count(offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  numToRead,  hasHitEOF);	  count(entryOffset    +    numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  count(buf,  offset  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  numToRead,  totalRead);	  count(entryOffset    +    numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  count(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entryOffset,  hasHitEOF);	  count(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
95	[BUG]  [BUGGY]  count(buf,  offset,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entryOffset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entryOffset,  totalRead);	  count(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
96	[BUG]  [BUGGY]  count(remainder,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  offset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  offset,  totalRead);	  count(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
97	[BUG]  [BUGGY]  count(entryLimit,  restOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  restOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restOffset);	  count(remainderOffset);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  count(remainderOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset  +  numToRead);	  count(remainderOffset);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
99	[BUG]  [BUGGY]  count(entrySize,  restOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  restOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  restOffset);	  count(remainderOffset);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
102	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
103	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
104	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
105	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
106	[BUG]  [BUGGY]  count(buf,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  numToRead,  totalRead);	  count(numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
107	[BUG]  [BUGGY]  count(entryOffset,  hasHitEOF,  totalRead);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  hasHitEOF,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  hasHitEOF,  totalRead);	  count(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
108	[BUG]  [BUGGY]  count(entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  hasHitEOF);	  count(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
109	[BUG]  [BUGGY]  count(remainder,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  hasHitEOF);	  count(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
110	[BUG]  [BUGGY]  count(remainder,  entryOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset);	  count(remainder);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
111	[BUG]  [BUGGY]  count(entryOffset,  rest);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  rest);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  rest);	  count(remainder);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
112	[BUG]  [BUGGY]  count(entryLimit,  rest);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  rest);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  rest);	  count(remainder);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
113	[BUG]  [BUGGY]  count(entryOffset,  restLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  restLimit,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  restLimit,  hasHitEOF);	  count(entryOffset,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
114	[BUG]  [BUGGY]  count(entryOffset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  1,  hasHitEOF);	  count(entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
115	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  numToRead,  totalRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  totalRead,  hasHitEOF);	  count(entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
116	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  hasHitEOF,  totalRead);	  count(entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
117	[BUG]  [BUGGY]  count(entrySize,  entryOffset,  entryLimit);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset,  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset,  entryLimit);	  count(entrySize,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
118	[BUG]  [BUGGY]  count(remainder,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entrySize);	  count(entrySize,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
119	[BUG]  [BUGGY]  count(buf,  entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryLimit,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryLimit,  numToRead);	  count(entryLimit,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
120	[BUG]  [BUGGY]  count(remainder,  entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryLimit,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryLimit,  numToRead);	  count(entryLimit,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
121	[BUG]  [BUGGY]  count(entryLimit,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  numToRead,  hasHitEOF);	  count(entryLimit,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
122	[BUG]  [BUGGY]  count(remainder,  entryOffset,  entryLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset,  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset,  entryLimit);	  count(entryOffset,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
123	[BUG]  [BUGGY]  count(entryStart,  entryLimit);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryStart,  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryStart,  entryLimit);	  count(entryOffset,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  count(remainderLen  +  1,  restOffset,  rest.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  restOffset,  rest.length);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  restOffset,  rest.length);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
125	[BUG]  [BUGGY]  count(remainderLen  +  1,  restOffset.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  restOffset.length);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  restOffset.length);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
126	[BUG]  [BUGGY]  count(remainderLen  +  1,  totalRead.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  totalRead.length);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  totalRead.length);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
127	[BUG]  [BUGGY]  count(remainderOffset  +  1,  rest.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset  +  1,  rest.length);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset  +  1,  rest.length);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
128	[BUG]  [BUGGY]  count(remainderLen  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  totalRead);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
129	[BUG]  [BUGGY]  count(remainderLen  +  1,  rest.length,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  rest.length,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  rest.length,  totalRead);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
130	[BUG]  [BUGGY]  count(remainderLen  +  1,  rest.length  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  rest.length  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  rest.length  +  1);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
131	[BUG]  [BUGGY]  count(entrySize  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  1);	  count(remainderLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
132	[BUG]  [BUGGY]  count(entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  1);	  count(remainderLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
133	[BUG]  [BUGGY]  count(entryLimit  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  1);	  count(remainderLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
134	[BUG]  [BUGGY]  count(remainderOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset  +  1);	  count(remainderLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
135	[BUG]  [BUGGY]  count(remainder,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset,  numToRead);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
136	[BUG]  [BUGGY]  count(entry,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  entryOffset,  hasHitEOF);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
137	[BUG]  [BUGGY]  count(entryOffset,  restLen,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  restLen,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  restLen,  totalRead);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
138	[BUG]  [BUGGY]  count(remainder,  entryOffset,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset,  0,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset,  0,  totalRead);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
139	[BUG]  [BUGGY]  count(remainder,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  numToRead,  totalRead);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
140	[BUG]  [BUGGY]  count(numToRead,  remainingLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  remainingLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  remainingLimit);	  count(remainderLimit,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
141	[BUG]  [BUGGY]  count(remainderLimit,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  entryOffset,  numToRead);	  count(remainderLimit,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
142	[BUG]  [BUGGY]  count(numToRead,  remainderLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  remainderLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  remainderLimit);	  count(remainderLimit,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
143	[BUG]  [BUGGY]  count(remainderOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset,  totalRead);	  count(remainderLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
144	[BUG]  [BUGGY]  count(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entryOffset,  numToRead);	  count(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
145	[BUG]  [BUGGY]  count(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entrySize,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entrySize,  numToRead);	  count(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
146	[BUG]  [BUGGY]  count(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  numToRead,  hasHitEOF);	  count(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
147	[BUG]  [BUGGY]  count(buf,  offset,  entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entryLimit,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entryLimit,  numToRead);	  count(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
148	[BUG]  [BUGGY]  count(entryOffset,  buf  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  buf  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  buf  +  numToRead);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
149	[BUG]  [BUGGY]  count(numToRead,  entryOffset  +  buf.length);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  entryOffset  +  buf.length);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  entryOffset  +  buf.length);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
150	[BUG]  [BUGGY]  count(buf,  entryOffset  +  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryOffset  +  numToRead,  isHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset  +  numToRead,  isHitEOF);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
151	[BUG]  [BUGGY]  count(entry,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  entryOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  entryOffset  +  numToRead);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
152	[BUG]  [BUGGY]  count(remainder,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset  +  numToRead);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
153	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
154	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
155	[BUG]  [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
156	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  0)  {  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
157	[BUG]  [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
158	[BUG]  [BUGGY]  if(numRecords  ==  entryOffset)  {  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  entryOffset)  {  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  entryOffset)  {  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
159	[BUG]  [BUGGY]  count(entry,  restLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  restLimit);	  count(remainder,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
160	[BUG]  [BUGGY]  count(entryLimit,  remaining);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  remaining);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  remaining);	  count(remainder,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
161	[BUG]  [BUGGY]  count(entrySize,  remainingLimit);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  remainingLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  remainingLimit);	  count(remainder,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
162	[BUG]  [BUGGY]  count(entryOffset,  remainingLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  remainingLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  remainingLimit);	  count(remainderLimit,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  ||!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||!hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
164	[BUG]  [BUGGY]  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
165	[BUG]  [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	while(!hasHitEOF)  {  throw  new  IOException( " ");	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
166	[BUG]  [BUGGY]  while(!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  while(!hasHitEOF)  {  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	while(!hasHitEOF)  {	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
167	[BUG]  [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
168	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buf,  entrySize,  hasHitEOF);	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
170	[BUG]  [BUGGY]  readNow.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	readNow.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
171	[BUG]  [BUGGY]  count(numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  1,  hasHitEOF);	  count(remainderLen    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
172	[BUG]  [BUGGY]  count(entrySize  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  1,  hasHitEOF);	  count(remainderLen    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
173	[BUG]  [BUGGY]  count(entryLimit  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  1,  hasHitEOF);	  count(remainderLen    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
174	[BUG]  [BUGGY]  count(remainderOffset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset  +  1,  hasHitEOF);	  count(remainderLen    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
175	[BUG]  [BUGGY]  count(remainderLen  +  1,  hasHitEOF,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  hasHitEOF,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  hasHitEOF,  totalRead);	  count(remainderLen    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
176	[BUG]  [BUGGY]  count(numToRead  +  entryLimit);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  entryLimit);	  count(entryLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
177	[BUG]  [BUGGY]  count(entryLimit  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  numToRead,  hasHitEOF);	  count(entryLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
178	[BUG]  [BUGGY]  count(buf,  entryLimit  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryLimit  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryLimit  +  numToRead);	  count(entryLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
179	[BUG]  [BUGGY]  count(entryLimit  +  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  totalRead);	  count(entryLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
180	[BUG]  [BUGGY]  count(entryLimit  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  numToRead,  totalRead);	  count(entryLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
181	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
182	[BUG]  [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  <  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
183	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
184	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
185	[BUG]  [BUGGY]  arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
186	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  totalRead);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  totalRead);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
187	[BUG]  [BUGGY]  count(numToRead  +  restLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  restLen);	  count(remainderLen    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
188	[BUG]  [BUGGY]  count(numToRead  +  remainingLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  remainingLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  remainingLen);	  count(remainderLen    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
189	[BUG]  [BUGGY]  count(numToRead  +  remainderLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  remainderLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  remainderLen);	  count(remainderLen    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
190	[BUG]  [BUGGY]  count(entryLimit,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  offset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  offset,  totalRead);	  count(offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
191	[BUG]  [BUGGY]  count(offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  entryOffset);	  count(offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
192	[BUG]  [BUGGY]  count(entrySize,  offset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  offset);	  count(offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
193	[BUG]  [BUGGY]  count(entry.length  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry.length  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry.length  +  numToRead);	  count(numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
194	[BUG]  [BUGGY]  count(entryLimit,  numToRead  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  numToRead  +  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  numToRead  +  entryOffset);	  count(numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
195	[BUG]  [BUGGY]  count(entryLimit,  numToRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  numToRead  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  numToRead  +  numToRead);	  count(numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
196	[BUG]  [BUGGY]  count(entryStart  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryStart  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryStart  +  numToRead);	  count(numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
197	[BUG]  [BUGGY]  count(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  entrySize);	  count(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
198	[BUG]  [BUGGY]  count(buf,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entrySize,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entrySize,  numToRead);	  count(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
199	[BUG]  [BUGGY]  count(remainder,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entrySize,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entrySize,  numToRead);	  count(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
200	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
201	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
202	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
203	[BUG]  [BUGGY]  HashSystem.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  HashSystem.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	HashSystem.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
204	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
205	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
206	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
208	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
209	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
210	[BUG]  [BUGGY]  count(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entrySize,  hasHitEOF);	  count(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
211	[BUG]  [BUGGY]  count(entrySize,  offset,  buf);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  offset,  buf);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  offset,  buf);	  count(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
212	[BUG]  [BUGGY]  count(remainder,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  offset,  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  offset,  entrySize);	  count(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
213	[BUG]  [BUGGY]  count(buf,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entryOffset,  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset,  entrySize);	  count(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
214	[BUG]  [BUGGY]  count(numToRead  +  remainingLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  remainingLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  remainingLimit);	  count(remainderLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
215	[BUG]  [BUGGY]  count(numToRead  +  restLimit);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  restLimit);	  count(remainderLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
216	[BUG]  [BUGGY]  count(numToRead  +  maintienderLimit);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  maintienderLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  maintienderLimit);	  count(remainderLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
217	[BUG]  [BUGGY]  count(remainderLimit  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit  +  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit  +  entryOffset);	  count(remainderLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
218	[BUG]  [BUGGY]  count(entryOffset,  restLen,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  restLen,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  restLen,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
219	[BUG]  [BUGGY]  count(entryOffset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entrySize,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
220	[BUG]  [BUGGY]  count(entryOffset,  totalRead,  hasHitEOF,  markLimit);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  totalRead,  hasHitEOF,  markLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  totalRead,  hasHitEOF,  markLimit);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
221	[BUG]  [BUGGY]  count(entryOffset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  0,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  0,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
223	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
224	[BUG]  [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
225	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
226	[BUG]  [BUGGY]  readNow.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  readNow.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	readNow.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
227	[BUG]  [BUGGY]  count(entrySize  +  totalRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  totalRead);	  count(entrySize    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
228	[BUG]  [BUGGY]  count(entrySize  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numToRead,  hasHitEOF);	  count(entrySize    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
229	[BUG]  [BUGGY]  count(entrySize  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numToRead,  totalRead);	  count(entrySize    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
230	[BUG]  [BUGGY]  count(buf,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  entrySize  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entrySize  +  numToRead);	  count(entrySize    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
231	[BUG]  [BUGGY]  count(buf,  offset  +  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  entryOffset,  numToRead);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
232	[BUG]  [BUGGY]  count(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  entrySize);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
233	[BUG]  [BUGGY]  count(buf,  offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  numToRead,  hasHitEOF);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
234	[BUG]  [BUGGY]  count(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  entryOffset);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
235	[BUG]  [BUGGY]  count(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  entrySize,  numToRead);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
236	[BUG]  [BUGGY]  count(buf,  offset  +  entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  entryLimit,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  entryLimit,  numToRead);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
237	[BUG]  [BUGGY]  count(entrySize,  entryOffset,  restLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset,  restLen);	  count(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
238	[BUG]  [BUGGY]  count(entrySize,  entryOffset,  restLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryOffset,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset,  restLimit);	  count(entrySize,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
239	[BUG]  [BUGGY]  count(entryLimit,  restSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  restSize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restSize);	  count(entrySize,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
240	[BUG]  [BUGGY]  count(remainderLimit,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  0,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  0,  hasHitEOF);	  count(remainderLimit,    0);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
241	[BUG]  [BUGGY]  count(remainderLimit,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  0,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  0,  numToRead);	  count(remainderLimit,    0);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
242	[BUG]  [BUGGY]  count(remainderLimit,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  0,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  0,  totalRead);	  count(remainderLimit,    0);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
243	[BUG]  [BUGGY]  count(remainderLimit,  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  1);	  count(remainderLimit,    0);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
244	[BUG]  [BUGGY]  count(remainderOffset,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset,  0);	  count(remainderLimit,    0);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
245	[BUG]  [BUGGY]  count(entryLimit,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entryOffset,  hasHitEOF);	  count(entryLimit,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
246	[BUG]  [BUGGY]  count(entryLimit,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  entryOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entryOffset  +  numToRead);	  count(entryLimit,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
247	[BUG]  [BUGGY]  count(entryLimit,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  entryOffset  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entryOffset  +  1);	  count(entryLimit,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
248	[BUG]  [BUGGY]  count(entryLimit,  entryOffset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  entryOffset  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entryOffset  +  1,  hasHitEOF);	  count(entryLimit,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
249	[BUG]  [BUGGY]  count(entryLimit,  buf,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  buf,  entryOffset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  buf,  entryOffset,  totalRead);	  count(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
250	[BUG]  [BUGGY]  count(entryOffset,  buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  buf,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  buf,  totalRead);	  count(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
251	[BUG]  [BUGGY]  count(buf,  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  numToRead,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  numToRead,  restLen);	  count(numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
252	[BUG]  [BUGGY]  count(numToRead,  0,  restLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  0,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  0,  restLen);	  count(numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
253	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
254	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
255	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  totalRead);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  totalRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
256	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
257	[BUG]  [BUGGY]  HashSystem.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  HashSystem.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	HashSystem.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
258	[BUG]  [BUGGY]  arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	arraycopy(buf,  0,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
259	[BUG]  [BUGGY]  count(numToRead  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  -  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  -  1);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
260	[BUG]  [BUGGY]  count(entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  -  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  -  1);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
261	[BUG]  [BUGGY]  count(entryOffset  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  -  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  -  1);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
262	[BUG]  [BUGGY]  count(remainderLen  -  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  -  1,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  -  1,  entryOffset);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
263	[BUG]  [BUGGY]  count(entryLimit  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  -  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  -  1);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
264	[BUG]  [BUGGY]  count(remainderLen  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  -  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  -  entryOffset);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
265	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
266	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
267	[BUG]  [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  numRecords)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
268	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
269	[BUG]  [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
270	[BUG]  [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numRecords  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
271	[BUG]  [BUGGY]  count(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  hasHitEOF);	  count(entryLimit,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
272	[BUG]  [BUGGY]  count(remainder,  entryLimit,  offset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryLimit,  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryLimit,  offset);	  count(entryLimit,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
273	[BUG]  [BUGGY]  count(entryLimit,  buf,  offset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  buf,  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  buf,  offset);	  count(entryLimit,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
274	[BUG]  [BUGGY]  count(entryLimit,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  offset,  hasHitEOF);	  count(entryLimit,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
275	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
276	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
277	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
278	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
279	[BUG]  [BUGGY]  count(remainder,  entryOffset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset  +  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset  +  totalRead);	  count(remainder,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
280	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
281	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
282	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buffer,  entrySize,  hasHitEOF);	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
283	[BUG]  [BUGGY]  count(numToRead  +  offset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead  +  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  offset);	  count(offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
284	[BUG]  [BUGGY]  count(offset  +  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  entryOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  entryOffset,  numToRead);	  count(offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
285	[BUG]  [BUGGY]  count(offset  +  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  numToRead,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  numToRead,  entryOffset);	  count(offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
286	[BUG]  [BUGGY]  count(entryLimit,  restLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  restLimit,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restLimit,  numToRead);	  count(remainder,    entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
287	[BUG]  [BUGGY]  count(entryLimit,  restLimit,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  restLimit,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restLimit,  totalRead);	  count(remainder,    entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
288	[BUG]  [BUGGY]  count(entry,  entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  entryLimit,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  entryLimit,  hasHitEOF);	  count(remainder,    entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
289	[BUG]  [BUGGY]  count(entryLimit,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  numToRead,  totalRead);	  count(remainder,    entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
290	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
291	[BUG]  [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
292	[BUG]  [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
293	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
294	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
295	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
296	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
297	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entrySize,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entrySize,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entrySize,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
298	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
299	[BUG]  [BUGGY]  count(entrySize  +  numRecords,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numRecords,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numRecords,  hasHitEOF);	  count(entrySize    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
300	[BUG]  [BUGGY]  count(numRecords  +  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numRecords  +  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numRecords  +  entrySize);	  count(entrySize    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
301	[BUG]  [BUGGY]  count(entrySize  +  numRecords,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numRecords,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numRecords,  totalRead);	  count(entrySize    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
302	[BUG]  [BUGGY]  count(entrySize  +  numRecords,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numRecords,  isHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numRecords,  isHitEOF);	  count(entrySize    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
303	[BUG]  [BUGGY]  count(entryOffset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  entrySize  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entrySize  +  1);	  count(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
304	[BUG]  [BUGGY]  count(entryOffset,  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  entrySize,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entrySize,  totalRead);	  count(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
305	[BUG]  [BUGGY]  count(entryOffset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  entrySize,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entrySize,  0);	  count(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
306	[BUG]  [BUGGY]  count(entryLimit,  entryOffset,  restLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  entryOffset,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entryOffset,  restLen);	  count(entryLimit,    restLen);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
307	[BUG]  [BUGGY]  count(entryOffset  +  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  restLen);	  count(remainderLen    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
308	[BUG]  [BUGGY]  count(entrySize  +  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  restLen);	  count(remainderLen    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
309	[BUG]  [BUGGY]  count(entryOffset  +  remainingLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  remainingLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  remainingLen);	  count(remainderLen    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
310	[BUG]  [BUGGY]  count(entrySize  +  remainingLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  remainingLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  remainingLen);	  count(remainderLen    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
311	[BUG]  [BUGGY]  count(remainder,  offset,  entryLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  offset,  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  offset,  entryLimit);	  count(offset,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
312	[BUG]  [BUGGY]  count(buf,  offset,  entryLimit);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entryLimit);	  count(offset,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
313	[BUG]  [BUGGY]  count(entryLimit,  hasHitEOF,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  hasHitEOF,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  hasHitEOF,  totalRead);	  count(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
314	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
315	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
316	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entrySize,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entrySize,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	System.arraycopy(buf,  offset,  buffer,  entrySize,  hasHitEOF);  return;	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
317	[BUG]  [BUGGY]  count(offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  entryOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  entryOffset  +  numToRead);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
318	[BUG]  [BUGGY]  count(entryLimit,  buf  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  buf  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  buf  +  numToRead);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
319	[BUG]  [BUGGY]  count(numToRead,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  entryOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  entryOffset  +  numToRead);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
320	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
321	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
322	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
323	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
324	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
325	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
326	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
327	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
328	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
329	[BUG]  [BUGGY]  count(remainder,  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  restLen);	  count(entryOffset,    restLen);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
330	[BUG]  [BUGGY]  count(offset,  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  restLen);	  count(entryOffset,    restLen);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
331	[BUG]  [BUGGY]  count(entryLen  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLen  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLen  +  1,  hasHitEOF);	  count(remainderLen    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
332	[BUG]  [BUGGY]  count(offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  1,  hasHitEOF);	  count(remainderLen    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
333	[BUG]  [BUGGY]  count(entryLimit,  buf);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  buf);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  buf);	  count(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
334	[BUG]  [BUGGY]  count(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  1,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  1,  numToRead);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
335	[BUG]  [BUGGY]  count(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  totalRead);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
336	[BUG]  [BUGGY]  count(buf,  offset  /  numToRead);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  /  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  /  numToRead);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
337	[BUG]  [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
338	[BUG]  [BUGGY]  if(numToRead  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(numToRead  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(numToRead  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
339	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
340	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
341	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  totalRead);  return;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  totalRead);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  totalRead);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
342	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
343	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
344	[BUG]  [BUGGY]  count(buf,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  0,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  0,  numToRead);	  count(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
345	[BUG]  [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
346	[BUG]  [BUGGY]  if(remainderSize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(remainderSize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(remainderSize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
347	[BUG]  [BUGGY]  if(remainderSize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(remainderSize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(remainderSize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
348	[BUG]  [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
349	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
350	[BUG]  [BUGGY]  count(remainderLen  -  1,  totalRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  -  1,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  -  1,  totalRead);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
351	[BUG]  [BUGGY]  count(remainderLen  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  -  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  -  1,  hasHitEOF);	  count(remainderLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
352	[BUG]  [BUGGY]  count(remainderLen  +  1,  rest.length  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  rest.length  -  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  rest.length  -  1);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
353	[BUG]  [BUGGY]  count(remainderLen  +  1,  rest.length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  rest.length,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  rest.length,  hasHitEOF);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
354	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
355	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
356	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
357	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
358	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
359	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
360	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
361	[BUG]  [BUGGY]  count(entryOffset  +  offset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  offset);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
362	[BUG]  [BUGGY]  count(offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  totalRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
363	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF()  +  numToRead;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getHitEOF()  +  numToRead;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getHitEOF()  +  numToRead;	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
364	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(entrySize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getHitEOF(entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getHitEOF(entrySize);	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
365	[BUG]  [BUGGY]  count(entryStart,  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryStart,  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryStart,  entrySize);	  count(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
366	[BUG]  [BUGGY]  count(remainder,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  offset,  hasHitEOF);	  count(remainder,    entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
367	[BUG]  [BUGGY]  if(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
368	[BUG]  [BUGGY]  if(!isReset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!isReset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!isReset)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
369	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".equals(numToRead));  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".equals(numToRead));  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".equals(numToRead));  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
370	[BUG]  [BUGGY]  while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
371	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( " ".);  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
372	[BUG]  [BUGGY]  count(buf,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  0,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  0,  totalRead);	  count(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
373	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  totalRead);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  totalRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
374	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
375	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  totalRead,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  totalRead,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  totalRead,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
376	[BUG]  [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(shouldReset)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
377	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	hasHitEOF  =  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
378	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
379	[BUG]  [BUGGY]  count(offset,  numToRead,  restLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  numToRead,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  numToRead,  restLimit);	  count(numToRead,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
380	[BUG]  [BUGGY]  count(remainder,  0);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  0);	  count(remainder);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
381	[BUG]  [BUGGY]  count(remainder,  restLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  restLimit);	  count(entrySize,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
382	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
383	[BUG]  [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
384	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
385	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
386	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
387	[BUG]  [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
388	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
389	[BUG]  [BUGGY]  count(offset,  restLimit);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  restLimit);	  count(entryOffset,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
390	[BUG]  [BUGGY]  count(remainder,  entryOffset,  0);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  entryOffset,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset,  0);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
391	[BUG]  [BUGGY]  count(remainder,  totalRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  totalRead,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  totalRead,  entryOffset);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
392	[BUG]  [BUGGY]  count(entryLimit,  restOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  restOffset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restOffset,  totalRead);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
393	[BUG]  [BUGGY]  count(entrySize  /  numRecords);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  /  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  /  numRecords);	  count(entrySize    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
394	[BUG]  [BUGGY]  count(entrySize  +  numRecords  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numRecords  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numRecords  +  1);	  count(entrySize    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
395	[BUG]  [BUGGY]  if(!isReset)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!isReset)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!isReset)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
396	[BUG]  [BUGGY]  while(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  while(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	while(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
397	[BUG]  [BUGGY]  while(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  while(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IOException( " ");  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	while(!hasHitEOF  &&  restLen  >  0)  {  throw  new  IOException( " ");	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
398	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
399	[BUG]  [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
400	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
401	[BUG]  [BUGGY]  count(remainder,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  0,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  0,  totalRead);	  count(remainder,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
402	[BUG]  [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
403	[BUG]  [BUGGY]  count(remainderLen  +  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  entryOffset);	  count(remainderLen    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
404	[BUG]  [BUGGY]  count(buf,  offset  +  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  numToRead,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  numToRead,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
405	[BUG]  [BUGGY]  count(offset  +  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  numToRead,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  numToRead,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
406	[BUG]  [BUGGY]  count(entrySize  +  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numToRead,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numToRead,  restLen);	  count(entryOffset    +    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
407	[BUG]  [BUGGY]  count(remainderLen,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen,  numToRead);	  count(numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
408	[BUG]  [BUGGY]  count(buf,  offset,  restLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  restLen);	  count(numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
409	[BUG]  [BUGGY]  count(offset  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  numToRead,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  numToRead,  totalRead);	  count(entryOffset    +    numToRead,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
410	[BUG]  [BUGGY]  count(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entrySize  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entrySize  +  1);	  count(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
411	[BUG]  [BUGGY]  count(buf,  offset,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entrySize  -  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entrySize  -  1);	  count(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
412	[BUG]  [BUGGY]  count(entryStart,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryStart,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryStart,  hasHitEOF);	  count(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
413	[BUG]  [BUGGY]  count(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  hasHitEOF);	  count(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
414	[BUG]  [BUGGY]  count(entrySize,  remainderLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  remainderLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  remainderLimit);	  count(remainderLimit,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
415	[BUG]  [BUGGY]  count(remainder,  totalRead,  entryLimit);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  totalRead,  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  totalRead,  entryLimit);	  count(remainder,    entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
416	[BUG]  [BUGGY]  count(remainder,  offset,  entryLimit,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  offset,  entryLimit,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  offset,  entryLimit,  totalRead);	  count(remainder,    entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
417	[BUG]  [BUGGY]  count(remainderLimit  +  numRecords);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit  +  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit  +  numRecords);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
418	[BUG]  [BUGGY]  count(buf,  offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  numRecords);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
419	[BUG]  [BUGGY]  count(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  numToRead  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  numToRead  +  1);	  count(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
420	[BUG]  [BUGGY]  count(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  0,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  0,  numToRead);	  count(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
421	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
422	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
423	[BUG]  [BUGGY]  count(buf,  offset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset);	  count(entryLimit,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
424	[BUG]  [BUGGY]  count(offset,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  entryOffset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  entryOffset,  totalRead);	  count(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
425	[BUG]  [BUGGY]  count(offset,  buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  buf,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  buf,  totalRead);	  count(buf,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
426	[BUG]  [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >=  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >=  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
427	[BUG]  [BUGGY]  count(entryLimit,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  totalRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  totalRead,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
428	[BUG]  [BUGGY]  count(entrySize,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  totalRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  totalRead,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
429	[BUG]  [BUGGY]  count(entryOffset,  totalRead,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  totalRead,  0,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  totalRead,  0,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
430	[BUG]  [BUGGY]  count(entryOffset,  totalRead,  0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  totalRead,  0);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  totalRead,  0);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
431	[BUG]  [BUGGY]  count(numToRead,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  totalRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  totalRead,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
432	[BUG]  [BUGGY]  count(remainderLimit  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit  +  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit  +  totalRead);	  count(remainderLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
433	[BUG]  [BUGGY]  count(remainderLimit  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit  +  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit  +  numToRead,  hasHitEOF);	  count(remainderLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
434	[BUG]  [BUGGY]  count(entrySize,  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  1);	  count(entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
435	[BUG]  [BUGGY]  count(numToRead,  maintienderLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(numToRead,  maintienderLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  maintienderLimit);	  count(remainderLimit,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
436	[BUG]  [BUGGY]  count(entrySize,  restLen,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  restLen,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  restLen,  hasHitEOF);	  count(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
437	[BUG]  [BUGGY]  count(entrySize,  0,  restLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  0,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  0,  restLen);	  count(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
438	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
439	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
440	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
441	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
442	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  0)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
443	[BUG]  [BUGGY]  count(offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  numToRead,  hasHitEOF);	  count(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
444	[BUG]  [BUGGY]  count(entryLimit,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  hasHitEOF,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  hasHitEOF,  restLen);	  count(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
445	[BUG]  [BUGGY]  count(entryLimit,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  hasHitEOF,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  hasHitEOF,  numToRead);	  count(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
446	[BUG]  [BUGGY]  count(remainder,  offset,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  offset,  entryOffset,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  offset,  entryOffset,  totalRead);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
447	[BUG]  [BUGGY]  count(remainder,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  numToRead,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  numToRead,  entryOffset);	  count(remainder,    entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
448	[BUG]  [BUGGY]  count(entryLen  +  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLen  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLen  +  numToRead);	  count(remainderLen    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
449	[BUG]  [BUGGY]  count(entryLimit  +  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  numToRead,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  numToRead,  restLen);	  count(entryLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
450	[BUG]  [BUGGY]  count(entryLimit  +  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit  +  numToRead,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  numToRead,  entryOffset);	  count(entryLimit    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
451	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  hasHitEOF,  restLen);	  count(entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
452	[BUG]  [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
453	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
454	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
455	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
456	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
457	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
458	[BUG]  [BUGGY]  while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
459	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
460	[BUG]  [BUGGY]  count(remainder,  0,  restLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  0,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  0,  restLen);	  count(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
461	[BUG]  [BUGGY]  count(offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset,  numToRead  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  numToRead  +  1);	  count(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
462	[BUG]  [BUGGY]  if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
463	[BUG]  [BUGGY]  count(entryOffset,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  hasHitEOF,  restLen);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  hasHitEOF,  restLen);	  count(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
464	[BUG]  [BUGGY]  count(entry,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  hasHitEOF);	  count(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
465	[BUG]  [BUGGY]  count(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entryOffset  +  numToRead);	  count(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
466	[BUG]  [BUGGY]  count(entryLimit,  remainingLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  remainingLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  remainingLimit);	  count(remainder,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
467	[BUG]  [BUGGY]  count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;	  count(remainder,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
468	[BUG]  [BUGGY]  count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;	  count(remainder,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
469	[BUG]  [BUGGY]  count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  ramane  entryLimit  =  hasHitEOF;	  count(remainder,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
470	[BUG]  [BUGGY]  count(entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  numToRead,  hasHitEOF);	  count(entryOffset,    totalRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
471	[BUG]  [BUGGY]  count(entry,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  offset,  entryOffset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  offset,  entryOffset);	  count(entryLimit,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
472	[BUG]  [BUGGY]  count(entryOffset,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  entrySize  -  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entrySize  -  1);	  count(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
473	[BUG]  [BUGGY]  count(entryOffset,  entrySize  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryOffset,  entrySize  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entrySize  +  1,  hasHitEOF);	  count(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
474	[BUG]  [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  <  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
475	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
476	[BUG]  [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
477	[BUG]  [BUGGY]  if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    else    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
478	[BUG]  [BUGGY]  count(entrySize  +  numToRead,  offset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  numToRead,  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numToRead,  offset);	  count(entrySize    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
479	[BUG]  [BUGGY]  count(remainder,  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  1);	  count(remainder);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
480	[BUG]  [BUGGY]  count(remainder,  -1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder,  -1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  -1);	  count(remainder);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
481	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  totalRead);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  totalRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
482	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  numToRead);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  numToRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    0,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
483	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
484	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  totalRead,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  totalRead,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  totalRead,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
485	[BUG]  [BUGGY]  count(remainderLimit,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  hasHitEOF,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  hasHitEOF,  numToRead);	  count(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
486	[BUG]  [BUGGY]  count(remainderOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderOffset,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset,  numToRead);	  count(remainderOffset);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
487	[BUG]  [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
488	[BUG]  [BUGGY]  if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize!=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
489	[BUG]  [BUGGY]  count(remainder.length,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder.length,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder.length,  numToRead);	  count(numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
490	[BUG]  [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
491	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
492	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
493	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
494	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
495	[BUG]  [BUGGY]  count(remainderLen  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  numToRead,  hasHitEOF);	  count(remainderLen    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
496	[BUG]  [BUGGY]  count(entryLimit,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entryLimit,  entrySize  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entrySize  +  1);	  count(entryLimit,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
497	[BUG]  [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
498	[BUG]  [BUGGY]  if(entryLen  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryLen  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryLen  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
499	[BUG]  [BUGGY]  count(entry.getKey()  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry.getKey()  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry.getKey()  +  numToRead);	  count(numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
500	[BUG]  [BUGGY]  count(entry.offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry.offset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry.offset  +  numToRead);	  count(numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
501	[BUG]  [BUGGY]  count(buf,  offset  +  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  numToRead,  len);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  numToRead,  len);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
502	[BUG]  [BUGGY]  count(buf,  offset  +  length,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset  +  length,  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  length,  numToRead);	  count(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
503	[BUG]  [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  ==  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  ==  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }	  if(entrySize    >    restLen)    {    System.arraycopy(buf,    0,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
504	[BUG]  [BUGGY]  count(offset  +  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(offset  +  numToRead  +  1);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  numToRead  +  1);	  count(offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
505	[BUG]  [BUGGY]  int  totalRead  =  getRemainderLimit();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  int  totalRead  =  getRemainderLimit();  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getRemainderLimit();	  int    totalRead    =    getHitEOF();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
506	[BUG]  [BUGGY]  count(remainder  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder  +  numToRead);	  count(entryOffset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
507	[BUG]  [BUGGY]  count(entry,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  offset  +  numToRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  offset  +  numToRead);	  count(buf,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
508	[BUG]  [BUGGY]  count(entrySize,  entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  entryLimit,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryLimit,  hasHitEOF);	  count(remainder,    entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
509	[BUG]  [BUGGY]  count(entry,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  offset,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  offset,  hasHitEOF);	  count(entryLimit,    offset);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
510	[BUG]  [BUGGY]  count(entrySize,  restLimit,  totalRead);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize,  restLimit,  totalRead);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  restLimit,  totalRead);	  count(remainderLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
511	[BUG]  [BUGGY]  count(remainderLimit,  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLimit,  entrySize);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  entrySize);	  count(remainderLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
512	[BUG]  [BUGGY]  count(remainder  +  numRecords);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainder  +  numRecords);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder  +  numRecords);	  count(numToRead    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
513	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
514	[BUG]  [BUGGY]  count(buf,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  numToRead,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  numToRead,  hasHitEOF);	  count(numToRead,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
515	[BUG]  [BUGGY]  count(entry,  offset,  entryLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  offset,  entryLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  offset,  entryLimit);	  count(entryOffset,    entryLimit);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
516	[BUG]  [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
517	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
518	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
519	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
520	[BUG]  [BUGGY]  count(entry,  offset,  restLimit);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entry,  offset,  restLimit);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entry,  offset,  restLimit);	  count(entryOffset,    restLimit);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
521	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
522	[BUG]  [BUGGY]  count(remainderLen  +  1,  rest.length  -  offset);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(remainderLen  +  1,  rest.length  -  offset);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  rest.length  -  offset);	  count(remainderLen    +    1,    rest.length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
523	[BUG]  [BUGGY]  count(entrySize  +  length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(entrySize  +  length);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  length);	  count(entrySize    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
524	[BUG]  [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	while(!hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
525	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
526	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
527	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
528	[BUG]  [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
529	[BUG]  [BUGGY]  count(buf,  offset,  entrySize  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  count(buf,  offset,  entrySize  -  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entrySize  -  1,  hasHitEOF);	  count(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
530	[BUG]  [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset!=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
531	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
532	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  <  0)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
533	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  totalRead;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	  if(entryOffset    ==    entrySize)    {    for(int    i    =    0,    hasHitEOF;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
534	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }  [BUGGY]      entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
