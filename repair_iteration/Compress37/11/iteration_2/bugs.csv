bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset  +  numToRead,  hasHitEOF);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  hasHitEOF);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  count(buf,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(buf,  entryOffset  +  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset  +  numToRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  count(entryOffset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset  +  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  totalRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset  +  numToRead,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  totalRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  count(numToRead  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(numToRead  +  entryOffset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  entryOffset);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  count(entryOffset  +  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset  +  numToRead,  restLen);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset  +  numToRead,  restLen);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  count(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(buf,  offset  +  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset  +  numToRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  int  totalRead  =  getHitEOF();  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	int  totalRead  =  getHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entryOffset  ==  entrySize)  {  for(int  i  =  0,  hasHitEOF;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  count(entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset,  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  numToRead);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  count(entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryLimit,  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  numToRead);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  count(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize,  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  numToRead);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  count(entryOffset,  entryLimit);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset,  entryLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entryLimit);	  count(entryLimit);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  count(remainder);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainder);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder);	  count(entryLimit);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  count(remainder,  entryLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainder,  entryLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryLimit);	  count(entryLimit);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  count(entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryLimit,  hasHitEOF);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  hasHitEOF);	  count(entryLimit);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  count(entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset,  entrySize);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  entrySize);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  count(entryLimit,  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryLimit,  entrySize);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entrySize);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  count(entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  totalRead);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  count(remainderLen  +  1);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLen  +  1);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
26	[BUG]  [BUGGY]  count(entryOffset,  restLen);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset,  restLen);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  restLen);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  count(numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(numToRead,  restLen);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  restLen);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
28	[BUG]  [BUGGY]  count(remainderLen  +  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLen  +  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  numToRead);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  count(entryOffset,  restLimit);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset,  restLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  restLimit);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  count(numToRead,  restLimit);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(numToRead,  restLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  restLimit);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  count(remainderOffset);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderOffset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderOffset);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  count(entrySize,  restLimit);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize,  restLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  restLimit);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  count(remainderLimit,  entryOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLimit,  entryOffset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  entryOffset);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  count(remainder,  entryLimit,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainder,  entryLimit,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryLimit,  totalRead);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  count(remainder,  entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainder,  entryLimit,  hasHitEOF);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryLimit,  hasHitEOF);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  count(entryLimit,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryLimit,  entryOffset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  entryOffset);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  count(numToRead,  entryLimit);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(numToRead,  entryLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  entryLimit);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  count(entryLimit,  offset);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryLimit,  offset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  offset);	  count(offset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  count(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset,  hasHitEOF);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  hasHitEOF);	  count(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  count(remainder,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainder,  entryOffset,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  entryOffset,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
41	[BUG]  [BUGGY]  count(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(numToRead,  entryOffset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  entryOffset);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  count(buf,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(buf,  entryOffset,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  count(entryOffset,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryOffset,  totalRead,  hasHitEOF);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryOffset,  totalRead,  hasHitEOF);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(entrySize  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(entrySize  >  restLen)  {  System.arraycopy(buf,  0,  buf,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  count(offset,  numToRead);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(offset,  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  numToRead);	  count(offset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
52	[BUG]  [BUGGY]  count(entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize  +  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numToRead);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  count(entrySize  +  numRecords);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize  +  numRecords);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize  +  numRecords);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  count(entrySize,  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize,  restLen);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  restLen);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  count(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(buf,  offset,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  count(offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(offset,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  totalRead);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  count(offset,  entryLimit);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(offset,  entryLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset,  entryLimit);	  count(entryLimit);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  count(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(buf,  entryOffset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  entryOffset);	  count(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  count(offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(offset  +  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(offset  +  numToRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  count(entryLimit  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryLimit  +  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit  +  numToRead);	  count(entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  count(entryLimit,  restLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entryLimit,  restLen);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entryLimit,  restLen);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  count(remainder,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainder,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainder,  totalRead);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  count(numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(numToRead,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead,  totalRead);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  count(remainderLimit,  totalRead);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLimit,  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  totalRead);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  count(remainderLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLimit,  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  numToRead);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  count(remainderLimit,  0);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLimit,  0);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  0);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  count(remainderLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLimit,  hasHitEOF);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit,  hasHitEOF);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  count(remainderLimit  +  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLimit  +  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLimit  +  numToRead);	  count(remainderLimit);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  count(remainderLen  +  1,  rest.length);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLen  +  1,  rest.length);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  rest.length);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  count(remainderLen  +  totalRead);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLen  +  totalRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  totalRead);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
71	[BUG]  [BUGGY]  count(entrySize,  0);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize,  0);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  0);	  count(entrySize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  count(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize,  entryOffset);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryOffset);	  count(entryOffset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  count(entrySize,  entryLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(entrySize,  entryLimit);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(entrySize,  entryLimit);	  count(entryLimit,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  count(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(buf,  offset,  numToRead);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  numToRead);	  count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  count(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(buf,  offset,  entrySize);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(buf,  offset,  entrySize);	  count(entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
76	[BUG]  [BUGGY]  count(remainderLen  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLen  +  1,  hasHitEOF);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  +  1,  hasHitEOF);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  count(remainderLen  -  1);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(remainderLen  -  1);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(remainderLen  -  1);	  count(remainderLen);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  count(numToRead  +  numRecords);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {    [BUGGY]  count(numToRead  +  numRecords);  [BUGGY]    entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	662	662	1	replace	count(numToRead  +  numRecords);	  count(offset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
