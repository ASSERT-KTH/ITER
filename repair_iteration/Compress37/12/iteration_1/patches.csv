bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  entryOffset  -=  numRecords;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords;	  entryOffset    -=    numToRead;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  entryOffset  -=  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  numToRead  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  +  1;	  entryOffset    -=    numToRead;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  entryOffset  -=  offset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  offset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  offset;	  entryOffset    -=    numToRead;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  numRecords;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  numToRead  *  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  numRecords;	  entryOffset    -=    numToRead;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  entryOffset  -=  buf.length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  buf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  buf.length;	  entryOffset    -=    numToRead;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  entryOffset  -=  restLen  +  1;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  restLen  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  restLen  +  1;	  entryOffset    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  entryOffset  -=  length;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  length;	  entryOffset    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  entryOffset  -=  numtoRead;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  numtoRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numtoRead;	  entryOffset    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  entryOffset  +=  length  -  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  length  -  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  -  1;	  entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  entryOffset  +=  length  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  length  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  +  1;	  entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  numToRead  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  +  1;	  entryOffset    +=    numToRead;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  result.add(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  result.add(buf,  offset,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  hasHitEOF);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  entryOffset  +=  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  offset  +  numToRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  +  numToRead;	  entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  entryOffset  +=  offset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  offset  +  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  +  numRecords;	  entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  entryOffset  +=  buf.length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  buf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  buf.length;	  entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  entryOffset  +=  numtoRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  numtoRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numtoRead;	  entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  entryOffset  -=  remainingLen;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  remainingLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  remainingLen;	  entryOffset    +=    remainingLen;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  remainingLen  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  +  1;	  entryOffset    +=    remainingLen;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  +  numRecords;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  remainingLen  +  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  +  numRecords;	  entryOffset    +=    remainingLen;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  -  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  remainingLen  -  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  -  1;	  entryOffset    +=    remainingLen;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  entryOffset  -=  totalRead  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  totalRead  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  totalRead  +  1;	  entryOffset    -=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  entrySize  -=  restLen;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entrySize  -=  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  restLen;	  entryOffset    -=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  entryOffset  +=  restLen  +  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  restLen  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  +  1;	  entryOffset    +=    restLen;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  numRecords  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  1;	  entryOffset    +=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  2;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  numRecords  *  2;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  2;	  entryOffset    +=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  numRecords  +  2;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  2;	  entryOffset    +=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  numRecords  +  length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  length;	  entryOffset    +=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  entryOffset  =  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  =  offset  +  numToRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  offset  +  numToRead;	  entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  entryOffset  +=  count(offset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  count(offset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(offset);	  entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  hasHitEOF;	  entryOffset    +=    restLen;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  entryOffset  -=  0;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  0;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  0;	  entryOffset    -=    numToRead;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  entryOffset  -=  remainderLen;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  remainderLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  remainderLen;	  entryOffset    -=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  entryOffset  -=  resultLimit;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  resultLimit;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  resultLimit;	  entryOffset    -=    totalRead;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  entryOffset  +=  nRecords;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  nRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  nRecords;	  entryOffset    +=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  entryOffset  +=  length  *  restLen;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  length  *  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  *  restLen;	  entryOffset    +=    length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  entryOffset  +=  len;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  len;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  len;	  entryOffset    +=    restLen;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  entryOffset  +=  count(numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  +=  count(numToRead);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(numToRead);	  entryOffset    +=    offset;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  entryOffset  -=  1;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  entryOffset  -=  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  1;	  entryOffset    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  i.remove();  hasHitEOF  =  true;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	i.remove();  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);    [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
