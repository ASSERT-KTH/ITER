bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  record(remainderLen);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  record(remainderLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	record(remainderLen);	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
2	[BUG]  [BUGGY]  count(remainderLen);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  count(remainderLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	count(remainderLen);	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
3	[BUG]  [BUGGY]  int  restLen  =  restLen;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  int  restLen  =  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	int  restLen  =  restLen;	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
4	[BUG]  [BUGGY]  record(remainderLen,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  record(remainderLen,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	record(remainderLen,  offset,  hasHitEOF);	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
5	[BUG]  [BUGGY]  int  remainingLen  =  restLen;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  int  remainingLen  =  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	int  remainingLen  =  restLen;	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
6	[BUG]  [BUGGY]  Integer  remainingLen  =  getRemainderLen();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  Integer  remainingLen  =  getRemainderLen();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	Integer  remainingLen  =  getRemainderLen();	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
7	[BUG]  [BUGGY]  int  restLen  =  restLen.length;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  int  restLen  =  restLen.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	int  restLen  =  restLen.length;	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
8	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
10	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
11	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  numToRead);  return;  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  numToRead);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  numToRead);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
14	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  2  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  *  2  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  2  +  1;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
15	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  4;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  *  4;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  4;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
16	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  2  +  length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  *  2  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  2  +  length;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
17	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  *  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  1;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
18	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  2  +  offset;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  *  2  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  2  +  offset;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
19	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  3;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  *  3;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  3;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
20	[BUG]  [BUGGY]  entryOffset  +=  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  buf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  buf.length  -  1;	  entryOffset    +=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
21	[BUG]  [BUGGY]  entryOffset  +=  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  buf.length  -  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  buf.length  -  offset;	  entryOffset    +=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
22	[BUG]  [BUGGY]  entryOffset  +=  rest.length;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  rest.length;	  entryOffset    +=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
23	[BUG]  [BUGGY]  entryOffset  +=  buf.length  -  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  buf.length  -  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  buf.length  -  1,  hasHitEOF;	  entryOffset    +=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
26	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
27	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  numToRead,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buf,  numToRead,  restLen);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
29	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  totalRead,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  totalRead,  hasHitEOF,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  totalRead,  hasHitEOF,  restLen);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
30	[BUG]  [BUGGY]  entryOffset  -=  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  buf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  buf.length  -  1;	  entryOffset    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  entryOffset  -=  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  buf.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  buf.length  +  1;	  entryOffset    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  entryOffset  -=  rest.length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  rest.length;	  entryOffset    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  entryOffset  -=  buffer.length;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  buffer.length;	  entryOffset    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
35	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  numToRead);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
38	[BUG]  [BUGGY]  entryOffset  =  offset  +  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  offset  +  numToRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  offset  +  numToRead  +  1;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
39	[BUG]  [BUGGY]  entryOffset  =  numToRead  +  offset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  numToRead  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  numToRead  +  offset;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
40	[BUG]  [BUGGY]  entryOffset  =  offset  +  numToRead  +  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  offset  +  numToRead  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  offset  +  numToRead  +  2;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
41	[BUG]  [BUGGY]  entryOffset  =  buf.length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  buf.length  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  buf.length  +  numToRead;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
42	[BUG]  [BUGGY]  entryOffset  =  offset  +  numToRead  *  numRecords;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  offset  +  numToRead  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  offset  +  numToRead  *  numRecords;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
43	[BUG]  [BUGGY]  entryOffset  =  offset  /  numToRead;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  offset  /  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  offset  /  numToRead;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
44	[BUG]  [BUGGY]  entryOffset  +=  numToRead  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  -  1;	  entryOffset    +=    remainingLen    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
45	[BUG]  [BUGGY]  entryOffset  +=  restLen  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLen  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  -  1;	  entryOffset    +=    remainingLen    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
46	[BUG]  [BUGGY]  entryOffset  -=  remainingLen  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  remainingLen  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  remainingLen  -  1;	  entryOffset    +=    remainingLen    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
47	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  /  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  remainingLen  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  /  1;	  entryOffset    +=    remainingLen    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
48	[BUG]  [BUGGY]  entryOffset  +=  totalRead  -  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  totalRead  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  totalRead  -  1;	  entryOffset    +=    remainingLen    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
49	[BUG]  [BUGGY]  entryOffset  +=  count  -  1;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count  -  1;	  entryOffset    +=    remainingLen    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
51	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
52	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
53	[BUG]  [BUGGY]  HashSystem.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  HashSystem.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	HashSystem.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
54	[BUG]  [BUGGY]  entryOffset  +=  count(remainder);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainder);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainder);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
55	[BUG]  [BUGGY]  entryOffset  +=  count(remainderLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainderLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainderLen);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
56	[BUG]  [BUGGY]  entryOffset  +=  count(remainderSize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainderSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainderSize);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
57	[BUG]  [BUGGY]  entryOffset  +=  count(remainder,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainder,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainder,  numToRead);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
58	[BUG]  [BUGGY]  entryOffset  +=  count(recordSize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(recordSize);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
59	[BUG]  [BUGGY]  entryOffset  +=  count(remainingLen);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainingLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainingLen);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
60	[BUG]  [BUGGY]  entryOffset  +=  count(remainder.length);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainder.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainder.length);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
61	[BUG]  [BUGGY]  entryOffset  -=  offset  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  offset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  offset  +  1;	  entryOffset    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
62	[BUG]  [BUGGY]  entrySize  -=  numToRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  numToRead;	  entryOffset    -=    offset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  restLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  *  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  *  restLen;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
64	[BUG]  [BUGGY]  entryOffset  +=  restLen  *  length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLen  *  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  *  length;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
65	[BUG]  [BUGGY]  entryOffset  +=  length  *  numToRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  *  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  *  numToRead;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
66	[BUG]  [BUGGY]  entryOffset  +=  offset  *  restLen;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset  *  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  *  restLen;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
67	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  *  length;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  remainingLen  *  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  *  length;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
68	[BUG]  [BUGGY]  entryOffset  +=  totalRead  *  restLen;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  totalRead  *  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  totalRead  *  restLen;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
69	[BUG]  [BUGGY]  entryOffset  +=  length  *  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  *  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  *  2;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
70	[BUG]  [BUGGY]  entryOffset  +=  offset  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  +  1;	  entryOffset    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  entryOffset  +=  length  /  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  /  1;	  entryOffset    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
72	[BUG]  [BUGGY]  entryOffset  +=  totalRead  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  totalRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  totalRead  +  1;	  entryOffset    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  result.add(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  numToRead);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  result.add(buf,  offset,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  hasHitEOF,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  hasHitEOF,  numToRead);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
75	[BUG]  [BUGGY]  result.add(buf,  offset,  count(numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  count(numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  count(numToRead);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  result.add(buf,  offset,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  count(numToRead),  hasHitEOF);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  result.add(buf,  offset,  count(numToRead));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  count(numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  count(numToRead));	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
78	[BUG]  [BUGGY]  result.add(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  0,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  0,  hasHitEOF);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  result.add(record,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(record,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(record,  offset,  hasHitEOF);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  offset;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  +  offset;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
81	[BUG]  [BUGGY]  entryOffset  +=  buf.length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  buf.length  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  buf.length  +  numToRead;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  entryOffset  +=  offset  +  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset  +  numToRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  +  numToRead  +  1;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  offset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  offset;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  entryOffset  -=  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  offset  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  offset  +  numToRead;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
85	[BUG]  [BUGGY]  entryOffset  +=  length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  +  numToRead;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
86	[BUG]  [BUGGY]  entryOffset  +=  offset  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset  +  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  +  numRecords  +  1;	  entryOffset    +=    offset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
87	[BUG]  [BUGGY]  entryOffset  +=  buf.length  +  numRecords;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  buf.length  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  buf.length  +  numRecords;	  entryOffset    +=    offset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
88	[BUG]  [BUGGY]  entryOffset  +=  offset  +  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset  +  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  +  numRecords  +  length;	  entryOffset    +=    offset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  +  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  remainingLen  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  +  2;	  entryOffset    +=    remainingLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
90	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  +  numToRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  remainingLen  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  +  numToRead;	  entryOffset    +=    remainingLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  numToRead);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
92	[BUG]  [BUGGY]  readNow.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  readNow.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	readNow.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
93	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  hasHitEOF,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  hasHitEOF,  restLen);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
94	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  i.remove();  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	i.remove();  hasHitEOF  =  false;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
95	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
96	[BUG]  [BUGGY]  n.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  n.remove();  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	n.remove();  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
97	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(i.hasMoreElements())  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(i.hasMoreElements())  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
98	[BUG]  [BUGGY]  if(i.hasMoreElement())  {  i.remove();  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(i.hasMoreElement())  {  i.remove();  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(i.hasMoreElement())  {  i.remove();  hasHitEOF  =  true;  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
99	[BUG]  [BUGGY]  entrySize  -=  restLen  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  restLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  restLen  +  1;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
100	[BUG]  [BUGGY]  entrySize  -=  totalRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  totalRead;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
101	[BUG]  [BUGGY]  entrySize  -=  numRecords;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  numRecords;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
102	[BUG]  [BUGGY]  entrySize  -=  offset;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  offset;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
103	[BUG]  [BUGGY]  entrySize  -=  length;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  length;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
104	[BUG]  [BUGGY]  entrySize  -=  remainingOffset;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  remainingOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  remainingOffset;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
105	[BUG]  [BUGGY]  entryOffset  -=  length  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  length  +  1;	  entryOffset    -=    length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
106	[BUG]  [BUGGY]  entryOffset  -=  length  -  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  length  -  1;	  entryOffset    -=    length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
107	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  +  2;	  entryOffset    +=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  1L;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  +  1L;	  entryOffset    +=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  *  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  *  1;	  entryOffset    +=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
110	[BUG]  [BUGGY]  entryOffset  +=  restLen  +  2;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLen  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  +  2;	  entryOffset    +=    restLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
111	[BUG]  [BUGGY]  entryOffset  +=  count(remainderLen  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainderLen  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainderLen  +  1);	  entryOffset    +=    restLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
112	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
113	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
114	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
115	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
116	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
117	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
118	[BUG]  [BUGGY]  entryOffset  -=  numtoRead  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numtoRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numtoRead  +  1;	  entryOffset    -=    numtoRead;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
119	[BUG]  [BUGGY]  entryOffset  -=  restLimit;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  restLimit;	  entryOffset    -=    resultLimit;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  entryOffset  -=  resultLimit  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  resultLimit  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  resultLimit  +  1;	  entryOffset    -=    resultLimit;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
121	[BUG]  [BUGGY]  entryOffset  -=  remainingLimit;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  remainingLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  remainingLimit;	  entryOffset    -=    resultLimit;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
122	[BUG]  [BUGGY]  entryOffset  -=  count;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  count;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  count;	  entryOffset    -=    resultLimit;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
123	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  4;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  4;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  4;	  entryOffset    +=    numRecords    +    2;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
124	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  3;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  3;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  3;	  entryOffset    +=    numRecords    +    2;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
125	[BUG]  [BUGGY]  entryOffset  +=  count(numRecords  +  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(numRecords  +  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(numRecords  +  2);	  entryOffset    +=    numRecords    +    2;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
126	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
127	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
128	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
129	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
130	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
132	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
133	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
134	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
135	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(len);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(len);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(len);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(numToRead);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(numToRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
137	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i  +  1);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i  +  1);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
138	[BUG]  [BUGGY]  entryOffset  -=  remainingLen  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  remainingLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  remainingLen  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
139	[BUG]  [BUGGY]  entryOffset  -=  rest.length  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  rest.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  rest.length  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
140	[BUG]  [BUGGY]  entryOffset  -=  count(totalRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  count(totalRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  count(totalRead  +  1);	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
141	[BUG]  [BUGGY]  entryOffset  -=  remainderLen  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  remainderLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  remainderLen  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
142	[BUG]  [BUGGY]  entryOffset  +=  count(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(offset,  hasHitEOF);	  entryOffset    +=    count(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
143	[BUG]  [BUGGY]  entryOffset  +=  count(entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(entrySize);	  entryOffset    +=    count(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
144	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
145	[BUG]  [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
146	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
147	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
148	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
149	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
150	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
151	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
152	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
154	[BUG]  [BUGGY]  entryOffset  -=  offset  *  numRecords;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  offset  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  offset  *  numRecords;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
155	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  numRecords;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords  *  numRecords;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
156	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  numToRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords  *  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords  *  numToRead;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
157	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  *  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  2;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
158	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  recordSize;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  *  recordSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  recordSize;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
159	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  *  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  numRecords  +  1;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
160	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  length;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  *  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  length;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
161	[BUG]  [BUGGY]  entryOffset  -=  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  2;	  entryOffset    -=    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
162	[BUG]  [BUGGY]  entryOffset  -=  1L;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  1L;	  entryOffset    -=    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
163	[BUG]  [BUGGY]  entrySize  -=  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  1;	  entryOffset    -=    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
164	[BUG]  [BUGGY]  entryOffset  -=  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords  +  1;	  entryOffset    -=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
165	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  2;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords  *  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords  *  2;	  entryOffset    -=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
166	[BUG]  [BUGGY]  entryOffset  -=  numRecords.length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords.length;	  entryOffset    -=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
167	[BUG]  [BUGGY]  entryOffset  -=  numRecords  +  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords  +  2;	  entryOffset    -=    numRecords;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
168	[BUG]  [BUGGY]  entryOffset  -=  restLen  +  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  restLen  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  restLen  +  2;	  entryOffset    -=    restLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
169	[BUG]  [BUGGY]  entryOffset  -=  count(remainderLen  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  count(remainderLen  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  count(remainderLen  +  1);	  entryOffset    -=    restLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
170	[BUG]  [BUGGY]  entryOffset  -=  len;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  len;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  len;	  entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
171	[BUG]  [BUGGY]  entryOffset  +=  len  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  len  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  len  +  1;	  entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
172	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
173	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
174	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
175	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
176	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
177	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  }  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  }  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  }  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
178	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
179	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
181	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
182	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
183	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
184	[BUG]  [BUGGY]  entryOffset  +=  length  +  numRecords;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  +  numRecords;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
185	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  length  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  length  +  1;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
186	[BUG]  [BUGGY]  entryOffset  +=  offset  +  length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  +  length;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
187	[BUG]  [BUGGY]  entryOffset  -=  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords  +  length;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
188	[BUG]  [BUGGY]  entryOffset  +=  numRecords  *  length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  *  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  *  length;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
189	[BUG]  [BUGGY]  entryOffset  +=  count(numRecords  +  length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(numRecords  +  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(numRecords  +  length);	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
190	[BUG]  [BUGGY]  entryOffset  -=  nRecords;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  nRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  nRecords;	  entryOffset    +=    nRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
191	[BUG]  [BUGGY]  entryOffset  +=  nRecords  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  nRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  nRecords  +  1;	  entryOffset    +=    nRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
192	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
193	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
194	[BUG]  [BUGGY]  while(i  <  restLen  &&  restLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen  &&  restLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen  &&  restLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
195	[BUG]  [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
196	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
197	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
198	[BUG]  [BUGGY]  entryOffset  +=  offset  -  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset  -  1;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
199	[BUG]  [BUGGY]  entryOffset  +=  numToRead  *  numRecords;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  *  numRecords;	  entryOffset    +=    numtoRead;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
200	[BUG]  [BUGGY]  entryOffset  -=  numToRead  +  1L;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  +  1L;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
201	[BUG]  [BUGGY]  entryOffset  -=  numToRead  +  2;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  +  2;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
202	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  *  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  1;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
203	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
204	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
205	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
206	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
207	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
208	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
209	[BUG]  [BUGGY]  entryOffset  -=  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  hasHitEOF;	  entryOffset    +=    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
210	[BUG]  [BUGGY]  entrySize  -=  0;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  0;	  entryOffset    -=    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
211	[BUG]  [BUGGY]  entryOffset  -=  0L;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  0L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  0L;	  entryOffset    -=    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
212	[BUG]  [BUGGY]  readNow  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  readNow  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	readNow  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
213	[BUG]  [BUGGY]  readNow  =  System.arraycopy(buf,  offset  +  1,  restLen);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  readNow  =  System.arraycopy(buf,  offset  +  1,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	readNow  =  System.arraycopy(buf,  offset  +  1,  restLen);	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
214	[BUG]  [BUGGY]  readNow  =  System.arraycopy(buf,  offset  +  1,  remainingLen);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  readNow  =  System.arraycopy(buf,  offset  +  1,  remainingLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	readNow  =  System.arraycopy(buf,  offset  +  1,  remainingLen);	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
215	[BUG]  [BUGGY]  while(i  <  restLen)  {  count(remainderLen);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  count(remainderLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  count(remainderLen);	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
216	[BUG]  [BUGGY]  ||!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  ||!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	||!hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
217	[BUG]  [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
218	[BUG]  [BUGGY]  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
219	[BUG]  [BUGGY]  while(!hasHitEOF)  {  count(remainderLimit);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(!hasHitEOF)  {  count(remainderLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(!hasHitEOF)  {  count(remainderLimit);	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
220	[BUG]  [BUGGY]  while(!hasHitEOF)  {  count(totalRead);  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(!hasHitEOF)  {  count(totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(!hasHitEOF)  {  count(totalRead);	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
221	[BUG]  [BUGGY]  while(!hasHitEOF)  {  count(hashToRead);  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(!hasHitEOF)  {  count(hashToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(!hasHitEOF)  {  count(hashToRead);	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
222	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  remainingLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  remainingLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  remainingLen;	  entryOffset    +=    remainingLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
223	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  remainingLen  +  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  +  numRecords  +  1;	  entryOffset    +=    remainingLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
224	[BUG]  [BUGGY]  entryOffset  +=  restLen  +  numRecords;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLen  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  +  numRecords;	  entryOffset    +=    remainingLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
225	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  +  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  remainingLen  +  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  +  numRecords  +  length;	  entryOffset    +=    remainingLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
226	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  remainingLen;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  +  remainingLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  +  remainingLen;	  entryOffset    +=    remainingLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
227	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
228	[BUG]  [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
229	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
230	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
231	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
232	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
233	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  1L;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  1L;	  entryOffset    +=    numRecords    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
234	[BUG]  [BUGGY]  entryOffset  +=  offset.length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset.length;	  entryOffset    +=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
235	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(0);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(0);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(0);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
237	[BUG]  [BUGGY]  remainderLen  =  restLen;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  remainderLen  =  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	remainderLen  =  restLen;	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(len);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(len);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(len);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(numToRead);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(numToRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
241	[BUG]  [BUGGY]  entrySize  -=  remainingLen;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  remainingLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  remainingLen;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
242	[BUG]  [BUGGY]  if(shouldReset)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(shouldReset)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(shouldReset)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
243	[BUG]  [BUGGY]  i.remove(0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  i.remove(0);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	i.remove(0);  hasHitEOF  =  true;	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
244	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  count(numToRead);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  count(numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  count(numToRead);  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
245	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  throw  new  IOException( " ");  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
246	[BUG]  [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
247	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  record(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
248	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen  +  1);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen  +  1);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen  +  1);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
249	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  record(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
250	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  record(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
251	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen.length;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen.length;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen.length;  i  <  len;  ++i)  {  record(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
252	[BUG]  [BUGGY]  EntryOffset  -=  restLen  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  EntryOffset  -=  restLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	EntryOffset  -=  restLen  +  1;	  entryOffset    -=    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
253	[BUG]  [BUGGY]  entryOffset  =  offset  +  numToRead  +  length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  offset  +  numToRead  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  offset  +  numToRead  +  length;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
254	[BUG]  [BUGGY]  entryOffset  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  =  offset  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  =  offset  +  length;	  entryOffset    =    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
255	[BUG]  [BUGGY]  result.add(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  0);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
256	[BUG]  [BUGGY]  result.add(buf,  offset,  count);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  count);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  count);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
257	[BUG]  [BUGGY]  result.add(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  1);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
258	[BUG]  [BUGGY]  entryOffset  -=  offset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  offset  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  offset  +  numRecords;	  entryOffset    +=    offset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
259	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  numRecords;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  +  numRecords;	  entryOffset    +=    offset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
260	[BUG]  [BUGGY]  entryOffset  +=  count(remainderLimit);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  count(remainderLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  count(remainderLimit);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
261	[BUG]  [BUGGY]  entryOffset  -=  count(numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  count(numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  count(numToRead);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
262	[BUG]  [BUGGY]  entryOffset  -=  offset.length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  offset.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  offset.length;	  entryOffset    -=    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
263	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
264	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  restLen);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
265	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
267	[BUG]  [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  hasHitEOF,  restLen);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
268	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i  +  1,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i  +  1,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
269	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  totalRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
270	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  1,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  1,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  1,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
271	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  System.arraycopy(buf,  offset,  buffer,  hasHitEOF,  restLen);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
272	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  restLen);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
273	[BUG]  [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
274	[BUG]  [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
275	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
276	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  HITEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  *  HITEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  HITEOF;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
277	[BUG]  [BUGGY]  entryOffset  -=  numRecords  *  num;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numRecords  *  num;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numRecords  *  num;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
278	[BUG]  [BUGGY]  entryOffset  +=  length  -  2;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  -  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  -  2;	  entryOffset    +=    length    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
279	[BUG]  [BUGGY]  entryOffset  +=  length  *  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  *  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  *  1;	  entryOffset    +=    length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
280	[BUG]  [BUGGY]  entryOffset  -=  remainingLen  +  numRecords;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  remainingLen  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  remainingLen  +  numRecords;	  entryOffset    +=    remainingLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
281	[BUG]  [BUGGY]  entryOffset  +=  remainingLen  +  length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  remainingLen  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  remainingLen  +  length;	  entryOffset    +=    remainingLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
282	[BUG]  [BUGGY]  entryOffset  -=  length  +  numRecords;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  length  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  length  +  numRecords;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
283	[BUG]  [BUGGY]  entryOffset  +=  length  *  numRecords;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  *  numRecords;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
284	[BUG]  [BUGGY]  entryOffset  -=  restLen  *  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  restLen  *  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  restLen  *  1;	  entryOffset    -=    restLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
285	[BUG]  [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
286	[BUG]  [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
287	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
288	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
289	[BUG]  [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
290	[BUG]  [BUGGY]  if(remainderLen  <  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  <  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  <  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
291	[BUG]  [BUGGY]  entryOffset  -=  count(offset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  count(offset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  count(offset);	  entryOffset    +=    count(offset);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
292	[BUG]  [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
293	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  buffer[int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  buffer[int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  buffer[int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
294	[BUG]  [BUGGY]  entryOffset  +=  restLimit  +  numToRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLimit  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLimit  +  numToRead;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
295	[BUG]  [BUGGY]  entryOffset  +=  numToRead  +  buf.length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numToRead  +  buf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numToRead  +  buf.length;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
296	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
297	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
298	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
299	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
300	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
301	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  offset;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
302	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
303	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
304	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
305	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
306	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainingLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
307	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  length);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  length);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  length);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
308	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
309	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
310	[BUG]  [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
311	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	System.arraycopy(buf,  0,  buf,  offset,  hasHitEOF,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
312	[BUG]  [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  ==  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
313	[BUG]  [BUGGY]  entryOffset  +=  restLen  *  numToRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLen  *  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  *  numToRead;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
314	[BUG]  [BUGGY]  entryOffset  +=  restLen  *  numRecords;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLen  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  *  numRecords;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
315	[BUG]  [BUGGY]  entryOffset  -=  length  *  restLen;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  length  *  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  length  *  restLen;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
316	[BUG]  [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
317	[BUG]  [BUGGY]  while(i  <  restLen)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  System.arraycopy(buf,  offset,  buf,  i,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    System.arraycopy(buf,    offset,    buf,    i,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
318	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
319	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
320	[BUG]  [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
321	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
322	[BUG]  [BUGGY]  entrySize  -=  n;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entrySize  -=  n;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entrySize  -=  n;	  entrySize    -=    restLen;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
323	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
324	[BUG]  [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  currEntry.getValue(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    currEntry.getValue(i);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
325	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
326	[BUG]  [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
327	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >  0)  {  for(int  i  =  0,  len  =  remainderLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  1,  totalRead);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    1,    totalRead);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
328	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  restLen;	  entryOffset    +=    numRecords    +    length;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
329	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
330	[BUG]  [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  hasHitEOF,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
331	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
332	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
333	[BUG]  [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(!hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
334	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
335	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
336	[BUG]  [BUGGY]  entryOffset  +=  numRecords  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  -  1;	  entryOffset    +=    remainingLen    -    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
337	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
338	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  numToRead,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  numToRead,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  numToRead,  restLen);  }	  if(hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
339	[BUG]  [BUGGY]  entryOffset  +=  offset(numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  offset(numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  offset(numToRead);	  entryOffset    +=    count(numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
340	[BUG]  [BUGGY]  entryOffset  +=  restLen  *  2;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  restLen  *  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  restLen  *  2;	  entryOffset    +=    numRecords    *    2;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
342	[BUG]  [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
343	[BUG]  [BUGGY]  if(remainderLen  <  =  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  <  =  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  <  =  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    i);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
344	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  totalRead;  i  <  len;  ++i)  {  ensureCapacity(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
345	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  1,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  1,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  1,  len  =  restLen;  i  <  len;  ++i)  {  ensureCapacity(i);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    ensureCapacity(i);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
346	[BUG]  [BUGGY]  entryOffset  +=  n;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  n;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  n;	  entryOffset    +=    len;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
347	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
348	[BUG]  [BUGGY]  while(i  <  restLen)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(i  <  restLen)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(i  <  restLen)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
349	[BUG]  [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(hasHitEOF)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  record(remainderLen);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    record(remainderLen);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
350	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
351	[BUG]  [BUGGY]  if(remainderLen  <  =  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  <  =  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  <  =  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
352	[BUG]  [BUGGY]  entryOffset  -=  numToRead  /  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  /  1;	  entryOffset    -=    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
353	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset  +  offset,  hasHitEOF);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset    +    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
355	[BUG]  [BUGGY]  entryOffset  -=  len  +  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  len  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  len  +  1;	  entryOffset    -=    restLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
356	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  numToRead,  restLen);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    hasHitEOF,    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
357	[BUG]  [BUGGY]  entryOffset  +=  length  /  restLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  length  /  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  length  /  restLen;	  entryOffset    +=    length    *    restLen;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
358	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  count(hashToRead);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  count(hashToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  true;  }  else  {  count(hashToRead);  }	  i.remove();    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
359	[BUG]  [BUGGY]  entryOffset  -=  length  *  numRecords;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  length  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  length  *  numRecords;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
360	[BUG]  [BUGGY]  entryOffset  -=  numToRead  *  restLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  -=  numToRead  *  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  -=  numToRead  *  restLen;	  entryOffset    -=    numToRead    *    numRecords;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
361	[BUG]  [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	while(remainderLen  >  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
363	[BUG]  [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(remainderLen  >=  0)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(remainderLen    >    0)    {    for(int    i    =    0,    len    =    restLen;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
364	[BUG]  [BUGGY]  result.add(buf,  offset,  hasHitEOF,  markLimit);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  hasHitEOF,  markLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  hasHitEOF,  markLimit);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
365	[BUG]  [BUGGY]  result.add(buf,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  numToRead,  hasHitEOF);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
366	[BUG]  [BUGGY]  result.add(buf,  offset,  hasHitEOF,  isRecorded);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  result.add(buf,  offset,  hasHitEOF,  isRecorded);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	result.add(buf,  offset,  hasHitEOF,  isRecorded);	  result.add(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
367	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  offset,  numToRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
368	[BUG]  [BUGGY]  entryOffset  +=  numRecords  +  numToRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);      [BUGGY]  entryOffset  +=  numRecords  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	663	663	1	replace	entryOffset  +=  numRecords  +  numToRead;	  entryOffset    +=    offset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
