bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getName());	  appendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry,  headers);	  appendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeadersToCurrentEntry(headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers);	  appendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry);	  appendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader());	  applyPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers);	  applyPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders);	  applyPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getName());	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry,  headers);	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getMethod());	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getParent());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getParent());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getParent());	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax(),  headers);	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPax());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPax());	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getPax());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getPax());	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeaders(currEntry.getName());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getName());	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers);	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry.getName());	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getParent());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getParent());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getParent());	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getSize());	  applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getString());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getString());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getString());	  applyPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getKey());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getKey());	  applyPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(currEntry);	  applyPaxHeadersToCurrentEntry(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  headers);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName());	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersFromCurrentEntry(globalPaxHeaders);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(globalPaxHeaders);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  currEntry);	  applyPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());	  applyPaxHeadersToCurrentEntry(headerSize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders());	  applyPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeadersFromCurrentEntry(headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(headers);	  appendPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers);	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(globalPaxHeaders);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(globalPaxHeaders);	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers.getPax());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeadersToCurrentEntry(headers.getPax());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers.getPax());	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  appendPaxHeaders(headers.getPax());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeaders(headers.getPax());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(headers.getPax());	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPax());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPax());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getPax());	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(!currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  if(!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  if(!currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(headers);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  AppendPaxHeadersToCurrentEntry(headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers);	  appendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getName());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getName());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getName());	  applyPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getURL());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getURL());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getURL());	  applyPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry);	  applyPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize());	  applyPaxHeadersToCurrentEntry(headerSize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize);	  applyPaxHeadersToCurrentEntry(headerSize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  appendPaxHeaders(currEntry.getSize());  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getSize());	  appendPaxHeaders(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders,  headers);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(globalPaxHeaders,  headers);	  applyPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headerEntry);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers    [BUGGY]  implementPaxHeadersToCurrentEntry(headerEntry);  [BUGGY]    }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headerEntry);	  implementPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
