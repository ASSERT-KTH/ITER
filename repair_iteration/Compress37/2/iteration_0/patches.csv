bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]      NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName());	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  appendPaxHeaders(currEntry.getPax());  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax());	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]    [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	  	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(globalPaxHeaders);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]      NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  appendPaxHeaders();  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  appendPaxHeaders();  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders();	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(paxHeaders);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  applyPaxHeadersToCurrentEntry(paxHeaders);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(paxHeaders);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headerSize);  [CE]  illegal  start  of  type  [FE]      NegativeArraySizeException  [CONTEXT]  return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers  [BUGGY]  applyPaxHeadersToCurrentEntry(headerSize);  [BUGGY]  }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headerSize);	paxHeaders();  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
