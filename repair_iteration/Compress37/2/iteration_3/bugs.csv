bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry,  headers);	  applyPaxHeadersFromCurrentEntry(headers,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
2	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getName(),  headers);	  applyPaxHeadersFromCurrentEntry(headers,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
3	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getKey(),  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getKey(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getKey(),  headers);	  applyPaxHeadersFromCurrentEntry(headers,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
4	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  headers);	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  true);	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  false);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  false);	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  hasHitEOF);	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  longNameData);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  longNameData);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  longNameData);	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	ApplyPaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
10	[BUG]  [BUGGY]  allowPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
11	[BUG]  [BUGGY]  aplicePaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  aplicePaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	aplicePaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
12	[BUG]  [BUGGY]  applicationPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applicationPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applicationPaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
13	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers.getName());	  applyPaxHeadersToCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
14	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
15	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  headers);	  applyPaxHeadersToCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
16	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry.getName(),  true);	  applyPaxHeadersToCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
17	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  headers);	  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getURL());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getURL());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getURL());	  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getString());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getString());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getString());	  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getSize());	  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);	  appendPaxHeadersToCurrentEntry(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
22	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getPax());	  appendPaxHeadersToCurrentEntry(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
23	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getURL());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getURL());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getURL());	  appendPaxHeadersToCurrentEntry(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
24	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);	  appendPaxHeadersToCurrentEntry(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
25	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  hasHitEOF);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
26	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  isHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  isHitEOF);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
27	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  true);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  true);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
28	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  this);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  this);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  this);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
29	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  false);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  false);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
30	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  fileSize);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  fileSize);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  fileSize);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
31	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  fileEncoding);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  fileEncoding);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
32	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());	  implementPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
33	[BUG]  [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
34	[BUG]  [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
35	[BUG]  [BUGGY]  allowSkipPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxHeadersToCurrentEntry(currEntry);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
36	[BUG]  [BUGGY]  allowPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeadersToCurrentEntry(headers);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
37	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ApplyPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	ApplyPaxHeadersToCurrentEntry(headers);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
38	[BUG]  [BUGGY]  applicationPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applicationPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applicationPaxHeadersToCurrentEntry(headers);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
39	[BUG]  [BUGGY]  allowSkipPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxHeadersToCurrentEntry(headers);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
40	[BUG]  [BUGGY]  aplicablesToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  aplicablesToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	aplicablesToCurrentEntry(headers);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
41	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);	  appendPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry,  headers,  true);	  appendPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry,  headers);	  appendPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers,  currEntry);	  appendPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  false);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry,  headers,  false);	  appendPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  0);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry,  headers,  0);	  appendPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  aplicPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  aplicPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	aplicPaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.hasPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
48	[BUG]  [BUGGY]  APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  APPLYPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLYPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLYPaxHeadersToCurrentEntry(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
51	[BUG]  [BUGGY]  APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||  headers.isEmpty())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  ImplementedPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ImplementedPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	ImplementedPaxHeadersToCurrentEntry(currEntry);	  implementPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
53	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders);	  implementPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
54	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getURL(),  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getURL(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getURL(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
55	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getURI());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getURI());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getURI());	  applyPaxHeadersToCurrentEntry(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
56	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders(),  headers);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
57	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getRecordSize());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getRecordSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getRecordSize());	  applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
58	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getName());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
59	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader(),  headers);	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
60	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getURL());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getURL());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getURL());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
61	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getSize());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
62	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getName(),  headers);	  appendPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
63	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getName(),  true);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getName(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getName(),  true);	  appendPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
64	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getName());	  appendPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
65	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getName(),  false);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getName(),  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getName(),  false);	  appendPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
66	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getKey(),  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getKey(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getKey(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getKey());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
67	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getValue());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getValue());	  applyPaxHeadersToCurrentEntry(currEntry.getKey());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
68	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSourceName());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSourceName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getSourceName());	  applyPaxHeadersToCurrentEntry(currEntry.getKey());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
69	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders(),  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders(),  headers);	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
70	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getGlobalPaxHeaders());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getGlobalPaxHeaders());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getGlobalPaxHeaders());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
71	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders(),  headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders(),  headers);	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
72	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders(),  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders(),  true);	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
73	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  headers,  hasHitEOF);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
74	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  fullNameData);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  fullNameData);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  fullNameData);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  zipEncoding);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  zipEncoding);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
76	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  headers,  true);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
77	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  cached);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  cached);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  cached);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
78	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersFromCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(currEntry);	  appendPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
79	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(headers,  true);	  appendPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
80	[BUG]  [BUGGY]  AppendPaxHeadersFromCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersFromCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersFromCurrentEntry(currEntry);	  appendPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
81	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(headers,  headers);	  appendPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
82	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(headers,  currEntry);	  appendPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
83	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  globalPaxHeaders);	  applyPaxHeadersToCurrentEntry(currEntry,    globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
84	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  globalPaxHeaders);	  applyPaxHeadersToCurrentEntry(currEntry,    globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  globalPaxHeaders);	  applyPaxHeadersToCurrentEntry(currEntry,    globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  globalPaxHeaders,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(currEntry,    globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
87	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders,  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(globalPaxHeaders,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
88	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader(),  headers);	  applyPaxHeadersToCurrentEntry(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
89	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
90	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  true);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
91	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  isHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  isHitEOF);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
92	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  false);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
93	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  this);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  this);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  this);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
94	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  fileSize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  fileSize);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  fileSize);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
95	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(currEntry.getName());	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
96	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(currEntry,  headers);	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
97	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getMethod());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(currEntry.getMethod());	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
98	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getParent());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getParent());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(currEntry.getParent());	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
99	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(currEntry.getSize());	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
100	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(currEntry.getKey());	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
101	[BUG]  [BUGGY]  ||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
102	[BUG]  [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
103	[BUG]  [BUGGY]  ||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
104	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPax(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerOffset);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerOffset);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
106	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
107	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  blockSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  blockSize);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  blockSize);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
108	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  entryOffset);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  entryOffset);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
109	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  this.headerSize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  this.headerSize);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  this.headerSize);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
110	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  entrySize);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  entrySize);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
111	[BUG]  [BUGGY]  ||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
112	[BUG]  [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
113	[BUG]  [BUGGY]  allowPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeadersToCurrentEntry(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
114	[BUG]  [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
115	[BUG]  [BUGGY]  allowSkipPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxHeadersToCurrentEntry(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
116	[BUG]  [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	||  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
117	[BUG]  [BUGGY]  allowPaxHeadersFromCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeadersFromCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeadersFromCurrentEntry(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
118	[BUG]  [BUGGY]  aplicablesToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  aplicablesToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	aplicablesToCurrentEntry(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
119	[BUG]  [BUGGY]  executePaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  executePaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	executePaxHeadersToCurrentEntry(currEntry);	  implementPaxHeadersToCurrentEntry(headerEntry);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
120	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry,  headers.getName());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry,  headers.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry,  headers.getName());	  applyPaxHeadersFromCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
121	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  headers);	  applyPaxHeadersFromCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
122	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  hasHitEOF);	  applyPaxHeadersFromCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
123	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  currEntry.getName(),  true);	  applyPaxHeadersFromCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
124	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getName(),  headers);	  appendPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
125	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getName());	  appendPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
126	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getName(),  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getName(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getName(),  true);	  appendPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getKey());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getKey());	  appendPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
128	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getName(),  headers);	  implementPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
129	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getName(),  true);	  implementPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
130	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  false);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getName(),  false);	  implementPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getName(),  longNameData);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getName(),  longNameData);	  implementPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
132	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders()  +  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders()  +  1);	  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
133	[BUG]  [BUGGY]  aplicablesToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  aplicablesToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	aplicablesToCurrentEntry(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
134	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax(),  headers,  hasHitEOF);	  appendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
135	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax(),  headers,  true);	  appendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
136	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  isHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax(),  headers,  isHitEOF);	  appendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
137	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  false);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax(),  headers,  false);	  appendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
138	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  this);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  this);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax(),  headers,  this);	  appendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
139	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  null);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getPax(),  headers,  null);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPax(),  headers,  null);	  appendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
140	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getPaxHeader());	  AppendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
141	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getKey());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getKey());	  AppendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
142	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getSize());	  AppendPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
143	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getParent(),  headers);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getParent(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getParent(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getParent());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
144	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getNext());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getNext());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getNext());	  applyPaxHeadersToCurrentEntry(currEntry.getParent());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
145	[BUG]  [BUGGY]  appendPaxHeaders(headers,  currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(headers,  currEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(headers,  currEntry.getPax());	  appendPaxHeaders(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
146	[BUG]  [BUGGY]  appendPaxHeaders(headers.getPax(),  headers.length);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(headers.getPax(),  headers.length);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(headers.getPax(),  headers.length);	  appendPaxHeaders(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
147	[BUG]  [BUGGY]  AppendPaxHeaders(headers,  currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(headers,  currEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(headers,  currEntry.getPax());	  appendPaxHeaders(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
148	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
149	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  true);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  true);	  applyPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
150	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  false);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers,  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers,  false);	  applyPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
151	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize(),  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getSize(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
152	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize()  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize()  -  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getSize()  -  1);	  applyPaxHeadersToCurrentEntry(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
153	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getSize()  +  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getSize()  +  1);	  applyPaxHeadersToCurrentEntry(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
154	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getString(),  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getString(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getString(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getString());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
155	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getShortName());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getShortName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getShortName());	  applyPaxHeadersToCurrentEntry(currEntry.getString());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
156	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  currEntry);	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
157	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  headers);	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
158	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  headers.length);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  headers.length);	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
159	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  true);	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
160	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  currEntry.getName());	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
161	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
162	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	ApplyPaxHeadersToCurrentEntry(currEntry.getName());	  applyPaxHeadersToCurrentEntry(headers.getName());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
163	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cursorEntry.getName());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(cursorEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(cursorEntry.getName());	  applyPaxHeadersToCurrentEntry(headers.getName());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
164	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.getName());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.getName());	  applyPaxHeadersToCurrentEntry(headers.getName());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
165	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  currEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers,  currEntry.getPax());	  appendPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
166	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  currEntry.getPax());	  appendPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
167	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers,  true);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
168	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers,  headers);	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
169	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  hasHitEOF);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
170	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
171	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers,  true);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
172	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cached);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cached);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  cached);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
173	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry,  headers,  hasHitEOF);	  implementPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
174	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry,  headers,  true);	  implementPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
175	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  false);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry,  headers,  false);	  implementPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
176	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  isHitEOF);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry,  headers,  isHitEOF);	  implementPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
177	[BUG]  [BUGGY]  ImplementedPaxHeadersToCurrentEntry(currEntry,  headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ImplementedPaxHeadersToCurrentEntry(currEntry,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	ImplementedPaxHeadersToCurrentEntry(currEntry,  headers);	  implementPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
178	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getParent(),  headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getParent(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getParent(),  headers);	  implementPaxHeadersToCurrentEntry(currEntry.getParent());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
179	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getNext());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getNext());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getNext());	  implementPaxHeadersToCurrentEntry(currEntry.getParent());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
180	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getSourceName());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getSourceName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getSourceName());	  implementPaxHeadersToCurrentEntry(currEntry.getParent());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
181	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  currEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  currEntry.getPax());	  applyPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
182	[BUG]  [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry.getPax());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  ApplyPaxHeadersToCurrentEntry(currEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	ApplyPaxHeadersToCurrentEntry(currEntry.getPax());	  applyPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
183	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(cursorEntry.getPax());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(cursorEntry.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(cursorEntry.getPax());	  applyPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
184	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.getPax());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.getPax());	  applyPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
185	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPax(),  headers.length);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPax(),  headers.length);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getPax(),  headers.length);	  applyPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
186	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry.getSize());	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
187	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getSize()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getSize()  -  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getSize()  -  1);	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
188	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getSize(),  headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getSize(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getSize(),  headers);	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
189	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getSize()  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getSize()  +  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getSize()  +  1);	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
190	[BUG]  [BUGGY]  aplicePaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  aplicePaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	aplicePaxHeadersToCurrentEntry(headers);	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
191	[BUG]  [BUGGY]  appliquePaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appliquePaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appliquePaxHeadersToCurrentEntry(headers);	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
192	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
193	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize()  +  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize()  +  1);	  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
194	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  false);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  false);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  false);	  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
195	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize(),  true);	  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
196	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getHeaderSize());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getHeaderSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getHeaderSize());	  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
197	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize(),  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize(),  headers);	  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
198	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  longNameData);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  longNameData);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  longNameData);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
199	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getName(),  currEntry);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getName(),  currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getName(),  currEntry);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
200	[BUG]  [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextPaxHeaders();  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	NavigatePaxHeaders  currEntry  =  getNextPaxHeaders();	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
201	[BUG]  [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextTarEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextTarEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	NavigatePaxHeaders  currEntry  =  getNextTarEntry(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
202	[BUG]  [BUGGY]  NavigatePaxHeaders  currEntry  =  getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  NavigatePaxHeaders  currEntry  =  getPaxHeaders();  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	NavigatePaxHeaders  currEntry  =  getPaxHeaders();	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
203	[BUG]  [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextTarEntry();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  NavigatePaxHeaders  currEntry  =  getNextTarEntry();  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	NavigatePaxHeaders  currEntry  =  getNextTarEntry();	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
204	[BUG]  [BUGGY]  appendPaxHeaders(headers.getSize());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(headers.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(headers.getSize());	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
205	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getPaxHeader());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getPaxHeader());	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
206	[BUG]  [BUGGY]  appendPaxHeaders(entry.getSize());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(entry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(entry.getSize());	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
207	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getSize());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getSize());	  applyPaxHeadersToCurrentEntry(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
208	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headerEntry.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headerEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headerEntry.getName());	  implementPaxHeadersToCurrentEntry(headerEntry);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
209	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headerEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headerEntry.getPaxHeader());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headerEntry.getPaxHeader());	  implementPaxHeadersToCurrentEntry(headerEntry);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
210	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  headers.length);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  headers.length);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
211	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  0);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  0);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  0);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
212	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersFromCurrentEntry(headers,  currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(headers,  currEntry.getName());	  appendPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
213	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersFromCurrentEntry(globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(globalPaxHeaders);	  appendPaxHeadersFromCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
214	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(headers);	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
215	[BUG]  [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);	  try    {    applyPaxHeadersToCurrentEntry(currEntry);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
216	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerData);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerData);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerData);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
217	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerBuf);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerBuf);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerBuf);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
218	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getParent());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getParent());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getParent());	  applyPaxHeadersToCurrentEntry(currEntry.getParent());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
219	[BUG]  [BUGGY]  if(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
220	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
221	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getKey());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getKey());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getKey());	  applyPaxHeadersToCurrentEntry(currEntry.getKey());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
222	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  null);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  null);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  null);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
223	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getName(),  headers);	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
224	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers,  currEntry.getName());	  appendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
225	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getGlobalPaxHeaders());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getGlobalPaxHeaders());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getGlobalPaxHeaders());	  applyPaxHeadersToCurrentEntry(currEntry.getGlobalPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
226	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers.getPaxHeader());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers.getPaxHeader());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
227	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPaxHeader());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getPaxHeader());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
228	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers,  currEntry.getName());	  implementPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
229	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  currEntry);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers,  currEntry);	  implementPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
230	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers,  headers);	  implementPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
231	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headers,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers,  true);	  implementPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
232	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers.getName());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers.getName());	  appendPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
233	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(currEntry.getName(),  headers);	  appendPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
234	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  globalPaxHeaders);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
235	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  0);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  0);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
236	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  maxHeaders);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  maxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  maxHeaders);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
237	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers.length);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  headers.length);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
238	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPaxHeaderSize());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPaxHeaderSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getPaxHeaderSize());	  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
239	[BUG]  [BUGGY]  AppendsPaxHeaders  toCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendsPaxHeaders  toCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendsPaxHeaders  toCurrentEntry(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
240	[BUG]  [BUGGY]  AppendsPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendsPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendsPaxHeadersToCurrentEntry(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
241	[BUG]  [BUGGY]  appliquePaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appliquePaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appliquePaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
242	[BUG]  [BUGGY]  implementPaxHeadersFromCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersFromCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersFromCurrentEntry(currEntry);	  implementPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
243	[BUG]  [BUGGY]  appendPaxHeaders(headers.getName());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(headers.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(headers.getName());	  appendPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
244	[BUG]  [BUGGY]  appendPaxHeadersFromCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersFromCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersFromCurrentEntry(currEntry.getName());	  appendPaxHeaders(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
245	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders.getPax());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders.getPax());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(globalPaxHeaders.getPax());	  applyPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
246	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPax(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getPax(),  headers);	  applyPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
247	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  currEntry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  currEntry.getSize());	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
248	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers.getMethod());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headers.getMethod());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers.getMethod());	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
249	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getMethod());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getMethod());	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
250	[BUG]  [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
251	[BUG]  [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
252	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getURL());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getURL());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getURL());	  applyPaxHeadersToCurrentEntry(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
253	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headers.getPaxHeader());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers.getPaxHeader());	  implementPaxHeadersToCurrentEntry(currEntry.getPaxHeader());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
254	[BUG]  [BUGGY]  allowSwitcherPaxingEnabled(true)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSwitcherPaxingEnabled(true)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSwitcherPaxingEnabled(true)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
255	[BUG]  [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
256	[BUG]  [BUGGY]  application  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  application  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	application  applyPaxHeadersToCurrentEntry(headers);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
257	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers,  globalPaxHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers,  globalPaxHeaders);	  applyPaxHeadersToCurrentEntry(globalPaxHeaders,    headers);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
258	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(headers.getName());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(headers.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(headers.getName());	  implementPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
259	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getString());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getString());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getString());	  applyPaxHeadersToCurrentEntry(currEntry.getString());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
260	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF  &&  currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
261	[BUG]  [BUGGY]  allowSwitcherPaxingEnabled(currEntry.getName(),  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSwitcherPaxingEnabled(currEntry.getName(),  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSwitcherPaxingEnabled(currEntry.getName(),  hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
262	[BUG]  [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeader());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
263	[BUG]  [BUGGY]  appendPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(headers);	  appendPaxHeaders(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
264	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers.getPaxHeaders());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers.getPaxHeaders());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
265	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getPaxHeaders());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getPaxHeaders());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
266	[BUG]  [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
267	[BUG]  [BUGGY]  allowHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
268	[BUG]  [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
269	[BUG]  [BUGGY]  allowHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
270	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  null);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  null);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  null);	  applyPaxHeadersFromCurrentEntry(headers,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
271	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPax()  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getPax()  +  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getPax()  +  1);	  applyPaxHeadersToCurrentEntry(currEntry.getPax());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
272	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers.getName());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  headers.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  headers.getName());	  applyPaxHeadersFromCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
273	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getSize());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  currEntry.getSize());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  currEntry.getSize());	  applyPaxHeadersFromCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
274	[BUG]  [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(!currEntry.hasPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
275	[BUG]  [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||!currEntry.hasPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.hasPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
276	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  null);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  null);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headers,  null);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headers);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
277	[BUG]  [BUGGY]  allowSkipPaxHeaders(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxHeaders(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxHeaders(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
278	[BUG]  [BUGGY]  allowHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowHitEOF)  {  applyPaxHeadersToCurrentEntry(headers);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
279	[BUG]  [BUGGY]  allowHitEOF  &&  applyPaxHeadersToCurrentEntry(headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowHitEOF  &&  applyPaxHeadersToCurrentEntry(headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowHitEOF  &&  applyPaxHeadersToCurrentEntry(headers);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(headers);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
280	[BUG]  [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(!currEntry.hasPaxHeaders())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
281	[BUG]  [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||!currEntry.hasPaxHeaders())  {  applyPaxHeadersToCurrentEntry(currEntry);	  if(!currEntry.hasPaxHeaders())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
282	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(globalPaxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(globalPaxHeaders,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(globalPaxHeaders,  headers);	  implementPaxHeadersToCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
283	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(headers.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(headers.getPax(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(headers.getPax(),  headers);	  appendPaxHeadersToCurrentEntry(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
284	[BUG]  [BUGGY]  allowPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeaders();  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeaders();	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
285	[BUG]  [BUGGY]  mockPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  mockPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	mockPaxHeadersToCurrentEntry(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
286	[BUG]  [BUGGY]  allowPaxHeaders(currEntry);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeaders(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeaders(currEntry);	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
287	[BUG]  [BUGGY]  allowPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeaders(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeaders(currEntry.getName());	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
288	[BUG]  [BUGGY]  readPaxHeaders();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  readPaxHeaders();  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	readPaxHeaders();	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
289	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  this);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  this);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getMethod(),  this);	  implementPaxHeadersToCurrentEntry(currEntry.getMethod());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
290	[BUG]  [BUGGY]  allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry.getName());  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
291	[BUG]  [BUGGY]  allowSkipPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkipPaxHeaders(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkipPaxHeaders(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
292	[BUG]  [BUGGY]  allowSwitchPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSwitchPaxHeaders(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSwitchPaxHeaders(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
293	[BUG]  [BUGGY]  readPaxHeaders(currEntry.getName());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  readPaxHeaders(currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	readPaxHeaders(currEntry.getName());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry.getName());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
294	[BUG]  [BUGGY]  APPLICATIONS  ||!currEntry.isPaxHeader();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  APPLICATIONS  ||!currEntry.isPaxHeader();  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	APPLICATIONS  ||!currEntry.isPaxHeader();	  if(!currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
295	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHost());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHost());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getHost());	  applyPaxHeadersToCurrentEntry(currEntry.getURL());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
296	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  cachedHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  cachedHeaders);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
297	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  null);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  null);	  applyPaxHeadersToCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
298	[BUG]  [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  this);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeadersToCurrentEntry(currEntry,  headers,  this);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeadersToCurrentEntry(currEntry,  headers,  this);	  appendPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
299	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry.getKey());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry.getKey());	  implementPaxHeadersToCurrentEntry(currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
300	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers.getPaxHeaders());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry,  headers.getPaxHeaders());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry,  headers.getPaxHeaders());	  applyPaxHeadersToCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
301	[BUG]  [BUGGY]  appendPaxHeaders(headers.getPax(),  headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(headers.getPax(),  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(headers.getPax(),  headers);	  appendPaxHeaders(headers.getPax());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
302	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders.getName());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(globalPaxHeaders.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(globalPaxHeaders.getName());	  applyPaxHeadersToCurrentEntry(headers.getName());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
303	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getLongNameData());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers.getLongNameData());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers.getLongNameData());	  applyPaxHeadersToCurrentEntry(headers.getName());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
304	[BUG]  [BUGGY]  allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
305	[BUG]  [BUGGY]  allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowSkip(hasHitEOF)  {  applyPaxHeadersToCurrentEntry(currEntry);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
306	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headerEntry);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headerEntry);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headerEntry);	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
307	[BUG]  [BUGGY]  appendPaxHeaders(currEntry.getMethod());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  appendPaxHeaders(currEntry.getMethod());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	appendPaxHeaders(currEntry.getMethod());	  appendPaxHeaders(currEntry.getSize());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
308	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize()  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize()  +  1);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize()  +  1);	  applyPaxHeadersToCurrentEntry(currEntry.getHeaderSize());    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
309	[BUG]  [BUGGY]  if(!hasHitEOF  &&  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF  &&  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
310	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeaders().size()  >  0)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  if(!hasHitEOF  &&  currEntry.getPaxHeaders().size()  >  0)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	if(!hasHitEOF  &&  currEntry.getPaxHeaders().size()  >  0)  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
311	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize,  true);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize,  true);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(currEntry.getName(),  headerSize,  true);	  applyPaxHeadersToCurrentEntry(currEntry.getName(),    headerSize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
312	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(globalPaxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(globalPaxHeaders,  headers);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(globalPaxHeaders,  headers);	  applyPaxHeadersFromCurrentEntry(globalPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
313	[BUG]  [BUGGY]  allowPaxHeaders(currEntry.getPaxHeader());  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  allowPaxHeaders(currEntry.getPaxHeader());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	allowPaxHeaders(currEntry.getPaxHeader());	  if(!hasHitEOF)    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
314	[BUG]  [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding.decode(currEntry.getName()));  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersToCurrentEntry(headers,  zipEncoding.decode(currEntry.getName()));  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersToCurrentEntry(headers,  zipEncoding.decode(currEntry.getName()));	  applyPaxHeadersToCurrentEntry(headers,    currEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
315	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  cachedHeaders);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(headers,  cachedHeaders);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(headers,  cachedHeaders);	  applyPaxHeadersFromCurrentEntry(headers,    headers);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
316	[BUG]  [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  this);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  implementPaxHeadersToCurrentEntry(currEntry,  headers,  this);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	implementPaxHeadersToCurrentEntry(currEntry,  headers,  this);	  implementPaxHeadersToCurrentEntry(currEntry,    headers);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
317	[BUG]  [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  currEntry.getName());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeaders(currEntry.getPax(),  headers,  currEntry.getName());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeaders(currEntry.getPax(),  headers,  currEntry.getName());	  AppendPaxHeaders(currEntry.getPax(),    headers);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
318	[BUG]  [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  applyPaxHeadersFromCurrentEntry(currEntry.getKey());  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	applyPaxHeadersFromCurrentEntry(currEntry.getKey());	  applyPaxHeadersFromCurrentEntry(currEntry.getPaxHeaders());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
319	[BUG]  [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  this);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  AppendPaxHeadersToCurrentEntry(headers,  this);  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	AppendPaxHeadersToCurrentEntry(headers,  this);	  AppendPaxHeadersToCurrentEntry(headers);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
320	[BUG]  [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry();  }	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
321	[BUG]  [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
322	[BUG]  [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry()  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry()  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry()	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
323	[BUG]  [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  finally  {  getNextTarEntry();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  finally  {  getNextTarEntry();  }  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  finally  {  getNextTarEntry();  }	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
324	[BUG]  [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      return  null;  }  currEntry.setName(zipEncoding.decode(longNameData));  }  if  (currEntry.isGlobalPaxHeader()){  //  Process  Global  Pax  headers  readGlobalPaxHeaders();  }  if  (currEntry.isPaxHeader()){  //  Process  Pax  headers      [BUGGY]  try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry  [BUGGY]      }  else  if  (!globalPaxHeaders.isEmpty())  {  applyPaxHeadersToCurrentEntry(globalPaxHeaders);  }  if  (currEntry.isOldGNUSparse()){  //  Process  sparse  files  readOldGNUSparse();  }    [CLASS]  TarArchiveInputStream  [METHOD]  getNextTarEntry  [RETURN_TYPE]  TarArchiveEntry  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  markLimit  recordSize  long  available  entryOffset  entrySize  n  skipped  TarArchiveEntry  currEntry  IllegalArgumentException  e  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5773502691896258	319	319	1	replace	try  {  currEntry.setName(zipEncoding.decode(longNameData));  if(currEntry.isPaxHeader())  {  applyPaxHeadersToCurrentEntry(currEntry);  }  else  {  getNextTarEntry	  if(currEntry.isPaxHeader())    {    applyPaxHeadersToCurrentEntry(currEntry);    }    else    {    getNextTarEntry();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
