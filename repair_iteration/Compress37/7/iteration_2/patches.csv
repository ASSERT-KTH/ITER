bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
2	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  &&  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
3	[BUG]  [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
4	[BUG]  [BUGGY]  if(is!=  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(is!=  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(is!=  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
5	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  currEntry.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  &&  currEntry.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  &&  currEntry.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
6	[BUG]  [BUGGY]  if(is  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(is  ==  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(is  ==  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
7	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  entrySize);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
8	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  hasHitEOF);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
9	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  totalRead);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
10	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  totalRead);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  padding);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  padding);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  padding);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
12	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  length);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  length);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
13	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  len);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  len);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
14	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  entrySize);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
15	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  totalRead);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
16	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead,  totalRead);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
17	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead,  entrySize);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
18	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
19	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead,  true);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
20	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead,  false);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
21	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currentEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  0  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  0  ||  isDirectory())  {	  if(currentEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
23	[BUG]  [BUGGY]  if(currentEntry  ==  null  ||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currentEntry  ==  null  ||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry  ==  null  ||  isDirectory()  ||  hasHitEOF)  {	  if(currentEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  if(buf  ==  null  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(buf  ==  null  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(buf  ==  null  ||  isDirectory())  {	  if(currentEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  if(isDirectory())  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory())  {	  if(currentEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead,  totalRead);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
28	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead,  entrySize);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
29	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  entrySize);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
30	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  totalRead);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead,  0);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()!=  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getValue()!=  entryOffset)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
33	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  currEntry.getKey()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryOffset  ==  null  ||  currEntry.getKey()!=  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryOffset  ==  null  ||  currEntry.getKey()!=  entryOffset)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
34	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
35	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
36	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
37	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  &&  isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  &&  isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
38	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  &&  isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  &&  isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
39	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
40	[BUG]  [BUGGY]  if(entrySize!=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
41	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getValue()  >=  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
42	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  <  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()  <  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
43	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsHitEOF  ||  isDirectory())  {	  if(currEntry    ==    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(containsHitEOF  ||  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(containsHitEOF  ||  currEntry  ==  null)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(containsHitEOF  ||  currEntry  ==  null)  {	  if(currEntry    ==    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  if(buf  ==  null  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(buf  ==  null  ||  containsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(buf  ==  null  ||  containsHitEOF)  {	  if(currEntry    ==    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  &&  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  &&  isDirectory())  {	  if(currEntry!=    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  if(currEntry!=  null  ||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  isDirectory()  ||  hasHitEOF)  {	  if(currEntry!=    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  currEntry.length)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  currEntry.length)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  currEntry.length)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  numRecords)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  numRecords)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  currEntry  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryOffset  ==  0  ||  currEntry  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryOffset  ==  0  ||  currEntry  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  isDirectory()  ||  entrySize  >=  currEntry.length)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryOffset  ==  null  ||  isDirectory()  ||  entrySize  >=  currEntry.length)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryOffset  ==  null  ||  isDirectory()  ||  entrySize  >=  currEntry.length)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  currEntry  ==  null  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryOffset  ==  null  ||  currEntry  ==  null  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryOffset  ==  null  ||  currEntry  ==  null  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  isDirectory()  ||  entryOffset  >=  currEntry.length)  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryOffset  ==  entrySize  ||  isDirectory()  ||  entryOffset  >=  currEntry.length)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryOffset  ==  entrySize  ||  isDirectory()  ||  entryOffset  >=  currEntry.length)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  entrySize);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
56	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  hasHitEOF);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
57	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  totalRead);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
58	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  totalRead);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
59	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  length);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  length);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
60	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  len);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  len);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
61	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  currEntry.getKey()!=  entryOffset)  {	  if(entrySize    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
62	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  currEntry.getValue()!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  currEntry.getValue()!=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  currEntry.getValue()!=  entrySize)  {	  if(entrySize    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entryLimit)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entryLimit)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  currEntry.getKey()!=  entryLimit)  {	  if(entrySize    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
64	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()  ==  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  currEntry.getKey()  ==  entryOffset)  {	  if(entrySize    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
65	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entryEnd)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entryEnd)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  currEntry.getKey()!=  entryEnd)  {	  if(entrySize    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
66	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()!=  entryLimit)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()!=  entryLimit)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getValue()!=  entryLimit)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entryLimit)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
67	[BUG]  [BUGGY]  if(entryLimit  ==  null  ||  currEntry.getKey()!=  entryLimit)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryLimit  ==  null  ||  currEntry.getKey()!=  entryLimit)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryLimit  ==  null  ||  currEntry.getKey()!=  entryLimit)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entryLimit)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
68	[BUG]  [BUGGY]  ||(numToRead  <  0  &&  isDirectory()))  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ||(numToRead  <  0  &&  isDirectory()))  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	||(numToRead  <  0  &&  isDirectory()))  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  ||  numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ||  numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	||  numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  ||(numToRead  <  0  &&  hasHitEOF))  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ||(numToRead  <  0  &&  hasHitEOF))  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	||(numToRead  <  0  &&  hasHitEOF))  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  ||(numToRead  <  0  &&  isDirectory()))  {  throw  new  IllegalStateException( "No  current  tar  entry. ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ||(numToRead  <  0  &&  isDirectory()))  {  throw  new  IllegalStateException( "No  current  tar  entry. ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	||(numToRead  <  0  &&  isDirectory()))  {  throw  new  IllegalStateException( "No  current  tar  entry. ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  &&  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  &&  hasHitEOF)  {	  if(currEntry!=    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
73	[BUG]  [BUGGY]  if(currentEntry!=  null  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currentEntry!=  null  &&  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry!=  null  &&  hasHitEOF)  {	  if(currEntry!=    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
74	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.hasHitEOF)  {	  if(currEntry!=    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
75	[BUG]  [BUGGY]  if(record!=  null  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(record!=  null  &&  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(record!=  null  &&  hasHitEOF)  {	  if(currEntry!=    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
76	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize()  +  1;  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize()  +  1;	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
77	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize()  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize()  -  1;  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize()  -  1;	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
78	[BUG]  [BUGGY]  int  numRecords  =  getRecordLimit();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordLimit();  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordLimit();	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
79	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset);	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
80	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf);	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
81	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize().length;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize().length;  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize().length;	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getValue()!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getValue()!=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getValue()!=  entrySize)  {	  if(currEntry!=    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
83	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()!=  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()!=  entryOffset)  {	  if(currEntry!=    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
84	[BUG]  [BUGGY]  if(currentEntry!=  null  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currentEntry!=  null  &&  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry!=  null  &&  isDirectory())  {	  if(currEntry!=    null    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
85	[BUG]  [BUGGY]  if(i!=  null  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(i!=  null  &&  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(i!=  null  &&  isDirectory())  {	  if(currEntry!=    null    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
86	[BUG]  [BUGGY]  if(i  ==  null  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(i  ==  null  &&  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(i  ==  null  &&  isDirectory())  {	  if(currEntry!=    null    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
87	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
88	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
89	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
90	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
91	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry. ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry. ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry. ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
92	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  entrySize);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
93	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  totalRead);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
94	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  numToRead,  totalRead);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
95	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  numToRead,  entrySize);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
96	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  0,  numToRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  0,  numToRead);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
97	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  numToRead,  hasHitEOF);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  entryOffset);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  entryOffset);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
99	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  >=  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  >=  hasHitEOF)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize!=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize!=  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  entrySize!=  hasHitEOF)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
101	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
102	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
103	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
104	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
105	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
106	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
107	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
108	[BUG]  [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
109	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  entrySize);	  int    numRecords    =    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
110	[BUG]  [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	byte  numRecords  =  is.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
111	[BUG]  [BUGGY]  Integer  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  numRecords  =  is.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
112	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead,  numToRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  totalRead,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  0);	  int    numRecords    =    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
114	[BUG]  [BUGGY]  if(entrySize!=  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
115	[BUG]  [BUGGY]  if(entrySize!=  null  ||  currEntry.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  null  ||  currEntry.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  null  ||  currEntry.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
116	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  is.read(buf,  offset,  entrySize))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  &&  is.read(buf,  offset,  entrySize))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  &&  is.read(buf,  offset,  entrySize))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
117	[BUG]  [BUGGY]  if(is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
118	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  entrySize);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
119	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  totalRead);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
120	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  hasHitEOF);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
121	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  totalRead);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
122	[BUG]  [BUGGY]  byte  numRecords  =  getRecordSize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  byte  numRecords  =  getRecordSize(buf,  offset,  numToRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	byte  numRecords  =  getRecordSize(buf,  offset,  numToRead);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
123	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  length);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  length);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
124	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  entrySize);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
125	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
126	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  entrySize);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
127	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
128	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  numToRead,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
129	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  numToRead,  entrySize);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
130	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  numToRead,  true);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
131	[BUG]  [BUGGY]  if(containsHitEOF  ||  currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(containsHitEOF  ||  currEntry!=  null)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(containsHitEOF  ||  currEntry!=  null)  {	  if(currEntry!=    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
132	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  >=  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.length  >=  0)  {	  if(currEntry    ==    null    ||    currEntry.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
133	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  ==  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.length  ==  0)  {	  if(currEntry    ==    null    ||    currEntry.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
134	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  <  0)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  <  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.length  <  0)  {	  if(currEntry    ==    null    ||    currEntry.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
135	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.length!=  0)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.length!=  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.length!=  0)  {	  if(currEntry    ==    null    ||    currEntry.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
136	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  >  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.length  >  0)  {	  if(currEntry    ==    null    ||    currEntry.length!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
137	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
138	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
139	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  numToRead)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  numToRead)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  numToRead)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
140	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
141	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  &&  entryOffset!=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
142	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
143	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
144	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
145	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  &&  entryOffset!=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
146	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
147	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  numToRead)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  numToRead)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
148	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
149	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()  ==  entryOffset)  {	  if(currEntry!=    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
150	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryOffset)  {	  if(currEntry!=    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
151	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()  ==  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getValue()  ==  entrySize)  {	  if(currEntry!=    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
152	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getValue()  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getValue()  ==  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getValue()  ==  entrySize)  {	  if(currEntry!=    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
153	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
154	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
155	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
156	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
157	[BUG]  [BUGGY]  if(entrySize!=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
158	[BUG]  [BUGGY]  if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
159	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsDirectory()  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
160	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
161	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(TarArchiveEntry.class))  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
162	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
163	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsDirectory()  ||  isDirectory())  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
164	[BUG]  [BUGGY]  if(currentEntry  ==  null  ||  containsDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currentEntry  ==  null  ||  containsDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry  ==  null  ||  containsDirectory())  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
165	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
166	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  totalRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
167	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  true);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
168	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  entrySize);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
169	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  false);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
170	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals(key))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals(key))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getName().equals(key))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
171	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.getName().equals(key))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.getName().equals(key))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.getName().equals(key))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
172	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  currEntry.getName().equals(key))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  &&  currEntry.getName().equals(key))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  &&  currEntry.getName().equals(key))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
173	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  key.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  key.getName().equals(currEntry.getName()))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  key.getName().equals(currEntry.getName()))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
174	[BUG]  [BUGGY]  if(currEntry!=  null  ||  key.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  key.getName().equals(currEntry.getName()))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  key.getName().equals(currEntry.getName()))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
175	[BUG]  [BUGGY]  if(currEntry!=  null  ||  key.getName().equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  key.getName().equals(currEntry.getKey()))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  key.getName().equals(currEntry.getKey()))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
176	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
177	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  len);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
178	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  true);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
179	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  false);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
180	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  entrySize);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
181	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  0);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
182	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset  +  numToRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset  +  numToRead);	  int    tarRecords    =    getRecordSize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
183	[BUG]  [BUGGY]  byte  tarRecords  =  getRecordSize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  byte  tarRecords  =  getRecordSize(buf,  offset);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	byte  tarRecords  =  getRecordSize(buf,  offset);	  int    tarRecords    =    getRecordSize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
184	[BUG]  [BUGGY]  Integer  tarRecords  =  getRecordSize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tarRecords  =  getRecordSize(buf,  offset);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tarRecords  =  getRecordSize(buf,  offset);	  int    tarRecords    =    getRecordSize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
185	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.length  >=  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.length  >=  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.length  >=  0)  {	  if(currEntry!=    null    ||    currEntry.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
186	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.length  <  =  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.length  <  =  0)  {	  if(currEntry!=    null    ||    currEntry.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
187	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasAsHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasAsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasAsHitEOF)  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
188	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasRecorded)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasRecorded)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasRecorded)  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
189	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasFinally())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasFinally())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasFinally())  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
190	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasFinallyEmpty())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasFinallyEmpty())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasFinallyEmpty())  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
191	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF,  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF,  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasHitEOF,  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF,    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
192	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  &&  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  hasHitEOF  &&  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF,    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
193	[BUG]  [BUGGY]  if(currEntry!=  null  ||  hasHitEOF,  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  hasHitEOF,  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  hasHitEOF,  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF,    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
194	[BUG]  [BUGGY]  if(isDirectory()  ||  currEntry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isDirectory()  ||  currEntry  ==  null  ||  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory()  ||  currEntry  ==  null  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF,    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
195	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()  >=  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getValue()  >=  entryOffset)  {	  if(currEntry    ==    null    ||    currEntry.getValue()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
196	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasAsHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasAsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasAsHitEOF)  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
197	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasRecorded)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasRecorded)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasRecorded)  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
198	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasFinallyEmpty())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasFinallyEmpty())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasFinallyEmpty())  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
199	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
200	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.isDirectory())  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
201	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
202	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
203	[BUG]  [BUGGY]  if(isDirectory()  ||  currEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isDirectory()  ||  currEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory()  ||  currEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
204	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasHitEOF  ||  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
205	[BUG]  [BUGGY]  if(currEntry!=  null  ||  hasHitEOF  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  hasHitEOF  &&  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  hasHitEOF  &&  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  if(currentEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currentEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
207	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()  ==  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  currEntry.getKey()  ==  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
208	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
209	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasRecorded())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasRecorded())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasRecorded())  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
210	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasRecordSize())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasRecordSize())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasRecordSize())  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
211	[BUG]  [BUGGY]  if(currEntry!=  null  ||  hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  hasHitEOF  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  hasHitEOF  ||  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
212	[BUG]  [BUGGY]  if(currEntry!=  null  ||  containsDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  containsDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  containsDirectory())  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
213	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  containsDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  containsDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  containsDirectory())  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
214	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isEOF)  {	  if(currEntry    >=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
215	[BUG]  [BUGGY]  if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
216	[BUG]  [BUGGY]  if(entrySize  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
217	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
218	[BUG]  [BUGGY]  if(entrySize!=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
219	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
220	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.getKey()!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.getKey()!=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.getKey()!=  entrySize)  {	  if(currEntry!=    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
221	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()  >=  entrySize)  {	  if(currEntry!=    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
222	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entryHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entryHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()  ==  entryHitEOF)  {	  if(currEntry!=    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
223	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entryLimit)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entryLimit)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()  ==  entryLimit)  {	  if(currEntry!=    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
224	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  0);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
225	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead  +  1);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
226	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  totalRead);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
227	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.isDirectory())  {	  if(currEntry!=    null    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
228	[BUG]  [BUGGY]  if(currEntry  ==  null  &&  currEntry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  &&  currEntry.isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  &&  currEntry.isDirectory())  {	  if(currEntry!=    null    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
229	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0,  totalRead);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  0,  totalRead);	  int    numRecords    =    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
230	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().endsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().endsWith( "/ "))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getName().endsWith( "/ "))  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
231	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar "))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().equals( "tar "))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getName().equals( "tar "))  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
232	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().startsWith( "/ "))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().startsWith( "/ "))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getName().startsWith( "/ "))  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
233	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getName().length()!=  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getName().length()!=  0)  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
234	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF,  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF,  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsHitEOF,  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF,    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
235	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  0);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
236	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead  +  1);	  Integer    tar    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
237	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead  +  1);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
238	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  0);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
239	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  is.length);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  is.length);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  is.length);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
240	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals(encoding))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals(encoding))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getName().equals(encoding))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
241	[BUG]  [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  entrySize))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  is.read(buf,  offset,  entrySize))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  is.read(buf,  offset,  entrySize))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
242	[BUG]  [BUGGY]  if(is!=  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(is!=  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(is!=  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
243	[BUG]  [BUGGY]  if(is  ==  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(is  ==  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(is  ==  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
244	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryHitEOF)  {	  if(currEntry    ==    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
245	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasFinally())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasFinally())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasFinally())  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
246	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.canAssignTo(offset))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.canAssignTo(offset))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.canAssignTo(offset))  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
247	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasRecordSize)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasRecordSize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasRecordSize)  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
248	[BUG]  [BUGGY]  if(currentEntry!=  null  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currentEntry!=  null  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry!=  null  ||  isDirectory())  {	  if(currentEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
249	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
250	[BUG]  [BUGGY]  if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
251	[BUG]  [BUGGY]  if(entrySize!=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
252	[BUG]  [BUGGY]  if(entrySize  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
253	[BUG]  [BUGGY]  if(entrySize  ==  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
254	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
255	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.length  >  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.length  >  0)  {	  if(currEntry!=    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
256	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
257	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
258	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
259	[BUG]  [BUGGY]  if(entrySize!=  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  entryOffset)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
260	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  0)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
261	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  entryOffset)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
262	[BUG]  [BUGGY]  if(currEntry!=  null  &&  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  containsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  containsHitEOF)  {	  if(currEntry!=    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
263	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
264	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
265	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
266	[BUG]  [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
267	[BUG]  [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  0)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  0)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
268	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  0);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
269	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  numToRead  +  1);	  Integer    tar    =    getRecord(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
270	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead  +  1);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
271	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  0);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
272	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryLimit)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryLimit)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()  ==  entryLimit)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entryLimit)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
273	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead  +  1);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
274	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  0);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
275	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead,  true);	  int    tarRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
276	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  numToRead  +  1);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
277	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  ch  =  is.read(buf,  offset,  0);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  0);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
278	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize()  +  totalRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize()  +  totalRead;  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize()  +  totalRead;	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
279	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize()  +  offset;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize()  +  offset;  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize()  +  offset;	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
280	[BUG]  [BUGGY]  int  tarRecords  =  is.getRecordSize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  is.getRecordSize(buf,  offset);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.getRecordSize(buf,  offset);	  int    tarRecords    =    getRecordSize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
281	[BUG]  [BUGGY]  int  tarRecords  =  getRecordLimit(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordLimit(buf,  offset);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordLimit(buf,  offset);	  int    tarRecords    =    getRecordSize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
282	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  >  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  >  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  >  0)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
283	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  <  =  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  <  =  0)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
284	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
285	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.read(buf,  offset,  numToRead))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    numToRead))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
286	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  ==  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  ==  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
287	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  >=  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  >=  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
288	[BUG]  [BUGGY]  if(numToRead  >  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  >  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  >  0)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
289	[BUG]  [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  entry   ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  entry   ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  entry   ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
290	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.length  <  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.length  <  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.length  <  0)  {	  if(currEntry!=    null    ||    currEntry.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
291	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.length  >  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.length  >  0)  {	  if(currEntry!=    null    ||    currEntry.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
292	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.length  <  numRecords)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.length  <  numRecords)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.length  <  numRecords)  {	  if(currEntry!=    null    ||    currEntry.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
293	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead  +  1);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  numToRead  +  1);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
294	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
295	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
296	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
297	[BUG]  [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
298	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
299	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
300	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
301	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  totalRead)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
302	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  &&  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
303	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  sourceEnd)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  sourceEnd)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  sourceEnd)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
304	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  access)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  access)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  access)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
305	[BUG]  [BUGGY]  if(currentEntry  ==  null  ||  hasHitEOF,  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currentEntry  ==  null  ||  hasHitEOF,  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry  ==  null  ||  hasHitEOF,  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF,    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
306	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  containsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  containsHitEOF)  {	  if(currEntry    ==    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
307	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  0  ||  containsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  0  ||  containsHitEOF)  {	  if(currEntry    ==    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
308	[BUG]  [BUGGY]  if(isEOF  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(isEOF  ||  containsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isEOF  ||  containsHitEOF)  {	  if(currEntry    ==    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
309	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.getKey()  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.getKey()  ==  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.getKey()  ==  entrySize)  {	  if(currEntry!=    null    ||    currEntry.getKey()    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
310	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
311	[BUG]  [BUGGY]  if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
312	[BUG]  [BUGGY]  if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
313	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
314	[BUG]  [BUGGY]  if(currEntry  >=  null  ||  currEntry.getName().equals(key))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  >=  null  ||  currEntry.getName().equals(key))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  >=  null  ||  currEntry.getName().equals(key))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
315	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  key.getName().equals(currEntry.getKey()))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  key.getName().equals(currEntry.getKey()))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  key.getName().equals(currEntry.getKey()))  {	  if(currEntry!=    null    ||    currEntry.getName().equals(key))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
316	[BUG]  [BUGGY]  if(currEntry!=  null  &&  hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  hasHitEOF  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  hasHitEOF  ||  isDirectory())  {	  if(currEntry!=    null    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
317	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  containsDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    containsDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
318	[BUG]  [BUGGY]  if(currEntry!=  null  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry!=    null    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
319	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
320	[BUG]  [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
321	[BUG]  [BUGGY]  if(entrySize  <  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
322	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  =  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
323	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
324	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
325	[BUG]  [BUGGY]  if(currEntry!=  null  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry!=    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
326	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
327	[BUG]  [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
328	[BUG]  [BUGGY]  if(entrySize  <  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
329	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  =  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  =  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
330	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  entryOffset)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
331	[BUG]  [BUGGY]  if(entrySize  ==  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
332	[BUG]  [BUGGY]  if(entrySize  >=  entryLen)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  entryLen)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  entryLen)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(isDirectory())    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
333	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasMoreElements())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasMoreElements())  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
334	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasNext())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasNext())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasNext())  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
335	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasMoreThanEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.hasMoreThanEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasMoreThanEOF)  {	  if(currEntry!=    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
336	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize()  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize()  +  entryOffset;  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize()  +  entryOffset;	  int    numRecords    =    getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
337	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
338	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  currEntry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  currEntry.isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.isDirectory()  ||  currEntry.isDirectory())  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
339	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.canReadDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.canReadDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.canReadDirectory())  {	  if(currEntry    ==    null    ||    currEntry.isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
340	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead,  entrySize);	  final    int    tarLimit    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
341	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
342	[BUG]  [BUGGY]  if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
343	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
344	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  entrySize))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  is.read(buf,  offset,  entrySize))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  is.read(buf,  offset,  entrySize))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
345	[BUG]  [BUGGY]  if(is  ==  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  entrySize))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(is  ==  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  entrySize))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(is  ==  null  ||  currEntry!=  null  ||  is.read(buf,  offset,  entrySize))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
346	[BUG]  [BUGGY]  if(is.read(buf,  offset,  entrySize))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(is.read(buf,  offset,  entrySize))  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(is.read(buf,  offset,  entrySize))  {	  if(currEntry!=    null    ||    is.read(buf,    offset,    entrySize))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
347	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()!=  entryLimit)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()!=  entryLimit)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()!=  entryLimit)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entryLimit)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
348	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead,  entrySize);	  int    tarRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
349	[BUG]  [BUGGY]  if(entrySize!=  null  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  null  ||  containsHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  null  ||  containsHitEOF)  {	  if(currEntry!=    null    ||    containsHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
350	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
351	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  currEntry.isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryOffset  ==  null  ||  currEntry.isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryOffset  ==  null  ||  currEntry.isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
352	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
353	[BUG]  [BUGGY]  if(entrySize  >=  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
354	[BUG]  [BUGGY]  if(entryOffset  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryOffset  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryOffset  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
355	[BUG]  [BUGGY]  if(entryLimit  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entryLimit  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entryLimit  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
356	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  entryOffset);	  int    numRecords    =    is.read(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
357	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  <  hasHitEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  entrySize  <  hasHitEOF)  {	  if(currEntry    ==    null    ||    isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
358	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  entrySize);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead,  entrySize);	  int    tarRecords    =    getRecordRecords(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
359	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
360	[BUG]  [BUGGY]  if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
361	[BUG]  [BUGGY]  if(entrySize  <  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
362	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  padding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  padding);  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  numToRead,  padding);	  int    numRecords    =    getRecordSize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
363	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  <  0  ||  hasHitEOF)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
364	[BUG]  [BUGGY]  if(numToRead  <  0  ||  isDirectory())  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(numToRead  <  0  ||  isDirectory())  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  <  0  ||  isDirectory())  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }	  if(numToRead    <    0)    {    throw    new    IllegalStateException(   "No    current    tar    entry       ");    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
365	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
366	[BUG]  [BUGGY]  if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  isDirectory()  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
367	[BUG]  [BUGGY]  if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  <  HitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
368	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF  ||  isDirectory())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  0  ||  hasHitEOF  ||  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
369	[BUG]  [BUGGY]  if(currEntry!=  null  &&  currEntry.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry!=  null  &&  currEntry.length  ==  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  currEntry.length  ==  0)  {	  if(currEntry!=    null    ||    currEntry.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
370	[BUG]  [BUGGY]  if(currEntry  >=  null  ||  currEntry.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  >=  null  ||  currEntry.length  ==  0)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  >=  null  ||  currEntry.length  ==  0)  {	  if(currEntry!=    null    ||    currEntry.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
371	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNext())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasNext())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasNext())  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
372	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasMoreElements())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasMoreElements())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasMoreElements())  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
373	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasMoreTokens())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasMoreTokens())  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasMoreTokens())  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
374	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasMoreThanEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasMoreThanEOF)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasMoreThanEOF)  {	  if(currEntry    ==    null    ||    currEntry.hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
375	[BUG]  [BUGGY]  if(entrySize!=  null  ||  currEntry.getKey()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize!=  null  ||  currEntry.getKey()!=  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize!=  null  ||  currEntry.getKey()!=  entryOffset)  {	  if(entrySize    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
376	[BUG]  [BUGGY]  if(entrySize  >=  null  ||  currEntry.getKey()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }      [BUGGY]  if(entrySize  >=  null  ||  currEntry.getKey()!=  entryOffset)  {  [BUGGY]      throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  >=  null  ||  currEntry.getKey()!=  entryOffset)  {	  if(entrySize    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
