projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF,isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry==null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead<0){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getValue()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getKey()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()!=entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.length==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.length!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry>=null||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||is.read(buf,offset,entrySize)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getName().equals(key)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null&&is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(is!=null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null&&currEntry.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(is==null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead,padding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead,len);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==0||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry==null||isDirectory()||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(buf==null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getValue()!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryOffset==null||currEntry.getKey()!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(!hasHitEOF||isDirectory()||entryOffset!=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF&&isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF&&isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize)return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()||entryOffset!=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=numToRead){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getValue()>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()<entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(containsHitEOF||currEntry==null){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(buf==null||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||isDirectory()||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||isDirectory()||entryOffset>=currEntry.length){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||isDirectory()||entryOffset>=numRecords){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryOffset==0||currEntry==null||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryOffset==null||isDirectory()||entrySize>=currEntry.length){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryOffset==null||currEntry==null||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryOffset==entrySize||isDirectory()||entryOffset>=currEntry.length){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||isDirectory()||entryOffset>=numToRead){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead,len);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getKey()!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getValue()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getKey()!=entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getKey()==entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getKey()!=entryEnd){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getValue()!=entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryLimit==null||currEntry.getKey()!=entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648||(numToRead<0&&isDirectory())){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648||numToRead<0){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648||(numToRead<0&&hasHitEOF)){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648||(numToRead<0&&isDirectory())){thrownewIllegalStateException("Nocurrenttarentry.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry!=null&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(record!=null&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize()+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize()-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordLimit();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize().length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getValue()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry!=null&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(i!=null&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(i==null&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()&&entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset!=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry.");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,0,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entrySize>=hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entrySize!=hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(!hasHitEOF||isDirectory()||entryOffset!=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()||entryOffset!=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset==totalRead){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648bytenumRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648IntegernumRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,totalRead,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=null||currEntry.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null&&is.read(buf,offset,entrySize)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648bytenumRecords=getRecordSize(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,numToRead,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(containsHitEOF||currEntry!=null){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.length>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.length==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.length<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.length!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.length>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()&&entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==numToRead){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset!=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()&&entryOffset!=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==totalRead){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()&&entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()&&entryOffset!=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset!=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==numToRead){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF&&isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()==entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()==entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getValue()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getValue()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){if(hasHitEOF||isDirectory()||entryOffset!=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()||isEnabled(TarArchiveEntry.class)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()||isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry==null||containsDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getName().equals(key)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.getName().equals(key)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null&&currEntry.getName().equals(key)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||key.getName().equals(currEntry.getName())){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||key.getName().equals(currEntry.getName())){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||key.getName().equals(currEntry.getKey())){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead,len);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead,false);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset+numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648bytetarRecords=getRecordSize(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648IntegertarRecords=getRecordSize(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.length>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.length<=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasAsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasRecorded){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasFinally()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasFinallyEmpty()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasHitEOF,isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||hasHitEOF,isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()||currEntry==null||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getValue()>=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasAsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasRecorded){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasFinallyEmpty()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()||isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()||isEnabled(TarArchiveEntry.class)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()||currEntry==null||hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||hasHitEOF&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry==null||hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getKey()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasRecorded()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasRecordSize()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||containsDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF||containsDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=isDirectory()||hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<0||hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()&&entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=isDirectory()||hasHitEOF||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.getKey()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()==entryHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()==entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null&&currEntry.isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,0,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getName().endsWith("/")){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getName().equals("tar")){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getName().startsWith("/")){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getName().length()!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsHitEOF,isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead,is.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getName().equals(encoding)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&is.read(buf,offset,entrySize)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(is!=null||currEntry!=null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(is==null||currEntry!=null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()==entryHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasFinally()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.canAssignTo(offset)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasRecordSize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry!=null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>entrySize){if(hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=isDirectory()||hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=isDirectory()||hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<0||hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==isDirectory()||hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.length>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=entryOffset){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=entryOffset){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==0){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==entryOffset){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==-1){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset==totalRead){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset==0){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()==entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,0);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize()+totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize()+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.getRecordSize(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordLimit(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entrySize>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entrySize<=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead==0){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead>=0){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead>0){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead<0){thrownewIllegalStateException("Nocurrententry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.length<0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.length>0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.length<numRecords){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=0){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset==entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF&&isDirectory()&&entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=entryOffset){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==totalRead){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()&&entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||isDirectory()||entryOffset>=sourceEnd){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||isDirectory()||entryOffset>=access){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry==null||hasHitEOF,isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==0||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isEOF||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.getKey()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<HitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset!=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry>=null||currEntry.getName().equals(key)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||key.getName().equals(currEntry.getKey())){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<=entryOffset){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=entryOffset){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(!hasHitEOF||isDirectory()||entryOffset==entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||hasHitEOF||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<=entryOffset){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=entryOffset){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==entrySize){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=entryLen){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasMoreElements()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasNext()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasMoreThanEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize()+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()||currEntry.isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.canReadDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset!=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||is.read(buf,offset,entrySize)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(is==null||currEntry!=null||is.read(buf,offset,entrySize)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(is.read(buf,offset,entrySize)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()!=entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=null||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryOffset==null||currEntry.isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entryOffset==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=null||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryOffset==null||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entryLimit==null||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entrySize<hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<HitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead,padding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead<0||hasHitEOF){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead<0||isDirectory()){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset==entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=isDirectory()||hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize<HitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==0||hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&currEntry.length==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry>=null||currEntry.length==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasNext()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasMoreElements()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasMoreTokens()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasMoreThanEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize!=null||currEntry.getKey()!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize>=null||currEntry.getKey()!=entryOffset){
