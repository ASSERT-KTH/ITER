bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.hasHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF,  isDirectory())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF,  isDirectory())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  hasHitEOF,  isDirectory())  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  containsHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsHitEOF)  {	  if(currEntry    ==    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  hasHitEOF)  {	  if(currEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  if(currEntry!=  null  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  isDirectory())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  isDirectory())  {	  if(currEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.isDirectory())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.isDirectory())  {	  if(currEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {	  if(currEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  if(currentEntry  ==  null  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currentEntry  ==  null  ||  isDirectory())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currentEntry  ==  null  ||  isDirectory())  {	  if(currEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  final  int  tarLimit  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	final  int  tarLimit  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  numRecords  =  getRecordSize(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(numToRead  <  0)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  is.read(buf,  offset,  totalRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  int  numRecords  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  numRecords  =  getRecordSize();  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  numRecords  =  getRecordSize();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()!=  entryOffset)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()!=  entryOffset)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getValue()!=  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getValue()!=  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  ==  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()  ==  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(entrySize  ==  null  ||  currEntry.getKey()!=  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(entrySize  ==  null  ||  currEntry.getKey()!=  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()!=  entryLimit)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()!=  entryLimit)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()!=  entryLimit)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.getKey()  >=  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.getKey()  >=  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.length  ==  0)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.length  ==  0)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry.length!=  0)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  currEntry.length!=  0)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  currEntry.length!=  0)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()  ==  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()  ==  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getKey()!=  entrySize)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getKey()!=  entrySize)  {	  if(currEntry    ==    null    ||    currEntry.getKey()!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  Integer  tar  =  is.read(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  Integer  tar  =  getRecord(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	Integer  tar  =  getRecord(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordRecords(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  int  tarRecords  =  getRecordSize(buf,  offset);  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	int  tarRecords  =  getRecordSize(buf,  offset);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  is.read(buf,  offset,  numToRead))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  containsDirectory())  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  ==  null  ||  containsDirectory())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  ==  null  ||  containsDirectory())  {	  if(currEntry    ==    null    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  if(currEntry!=  null  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  &&  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  if(currEntry  >=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry  >=  null  ||  hasHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry  >=  null  ||  hasHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  if(currEntry!=  null  ||  containsHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  containsHitEOF)  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  containsHitEOF)  {	  if(currEntry!=    null    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset,  entrySize))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  is.read(buf,  offset,  entrySize))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  is.read(buf,  offset,  entrySize))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  if(currEntry!=  null  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  &&  isDirectory())  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  &&  isDirectory())  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals(key))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(currEntry!=  null  ||  currEntry.getName().equals(key))  {  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(currEntry!=  null  ||  currEntry.getName().equals(key))  {	  if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "No  current  tar  entry   ");  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(isDirectory())  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  read(final  byte[]  buf,  final  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }    [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	648	648	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
