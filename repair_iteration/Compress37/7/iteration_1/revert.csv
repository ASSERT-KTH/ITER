projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||hasHitEOF,isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||isDirectory()||entryOffset>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currentEntry==null||isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648finalinttarLimit=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(numToRead<0){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=is.read(buf,offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648intnumRecords=getRecordSize();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()!=entryOffset){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getValue()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(entrySize==null||currEntry.getKey()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()!=entryLimit){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.getKey()>=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.length==0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||currEntry.length!=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()==entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getKey()!=entrySize){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648ch=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=is.read(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648Integertar=getRecord(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordRecords(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648inttarRecords=getRecordSize(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||is.read(buf,offset,numToRead)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry==null||containsDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry>=null||hasHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||containsHitEOF){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||is.read(buf,offset,entrySize)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null&&isDirectory()){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(currEntry!=null||currEntry.getName().equals(key)){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return-1;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("Nocurrenttarentry");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(isDirectory()){if(!hasHitEOF||isDirectory()||entryOffset>=entrySize){return0;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java648if(hasHitEOF||isDirectory()||entryOffset>=entrySize){thrownewIllegalStateException("");}
