bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  numToRead  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  1;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  return  entryOffset  +  numRecords;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  return  entryOffset  /  numToRead;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  /  numToRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  numToRead;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
4	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  numToRead  +  length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  length;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
5	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  offset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  numToRead  +  offset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  offset;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
6	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  buf.length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  numToRead  +  buf.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  buf.length;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  return  entryOffset  -  numToRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  numToRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numToRead;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  return  hasHitEOF  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  hasHitEOF;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  return  hasHitEOF?  true  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  true  :  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  true  :  hasHitEOF;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  entryOffset);	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  return  hasHitEOF  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  +  entryOffset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  entryOffset;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  entrySize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  entrySize);	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  entryOffset);	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  return  entryLen  +  numRecords;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLen  +  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  numRecords;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  return  numToRead;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  numToRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  numToRead;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  return  entryLen  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLen  +  1,  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  hasHitEOF;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  return  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLen;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  return  entryOffset  -  offset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  offset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  offset;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  return  entryOffset  -  restLen;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  restLen;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  return  entryOffset  -  totalRead  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  totalRead  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  totalRead  +  1;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  return  entryOffset  /  totalRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  /  totalRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  totalRead;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  return  entrySize  -  totalRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  -  totalRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  totalRead;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  numToRead);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(numToRead,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  totalRead);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryLimit  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  entryLimit));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset  -  entryLimit));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entryOffset  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  return  entrySize  +  numRecords;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  numRecords;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  return  entrySize  -  restLen;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  -  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  restLen;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  return  entrySize  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  1;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  return  entrySize  -  restOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  -  restOffset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  restOffset;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  return  entrySize  -  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  -  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  1;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.log(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryLimit  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +(int)Math.log(entryLimit  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryLimit  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.log(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.log(numToRead  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.log(numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.log(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.exp(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryOffset  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  return  entryLimit  +  numRecords;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLimit  +  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  numRecords;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLimit  +  1,  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  return  entryLimit  +  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLimit  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryLimit,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entryOffset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  return  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  1;	  return    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
62	[BUG]  [BUGGY]  return  entryOffset  +  totalRead;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  totalRead;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  totalRead;	  return    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  return  entrySize  -  entryOffset;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  -  entryOffset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  entryOffset;	  return    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
64	[BUG]  [BUGGY]  return  entryOffset  -  numRecords;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  numRecords;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numRecords;	  return    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  return  entryOffset  /  entrySize;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  /  entrySize;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  entrySize;	  return    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
66	[BUG]  [BUGGY]  return  entryLimit  -  entrySize;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryLimit  -  entrySize;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  entrySize;	  return    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.ceil(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  return  restLimit;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  restLimit;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLimit;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
70	[BUG]  [BUGGY]  return  i;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  i;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  i;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
71	[BUG]  [BUGGY]  return  isRecord?  rest  :  entryLimit;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  isRecord?  rest  :  entryLimit;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  entryLimit;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  return  entryOffset  +  length;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  length;	  return    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
73	[BUG]  [BUGGY]  return  hasHitEOF  &&  isReset;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  isReset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isReset;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  isRecorded;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset  >  0;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  entryOffset  >  0;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset  >  0;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  return  entrySize  +  restLen;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  +  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  restLen;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  return  entrySize  -  rest.length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entrySize  -  rest.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  rest.length;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  return  totalRead  -  entryOffset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  totalRead  -  entryOffset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  totalRead  -  entryOffset;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  return  entryOffset  -  inputSize;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  inputSize;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  inputSize;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  return  entryOffset  -  count;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  count;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  count;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  return  0;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  0;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  0;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
83	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
85	[BUG]  [BUGGY]  while(i.hasNext())  {  entrySize  +=  i.next();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  while(i.hasNext())  {  entrySize  +=  i.next();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entrySize  +=  i.next();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
86	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  while(i.hasNext())  {  entryOffset  +=  i.next();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  while(i.hasNext())  {  entryOffset  +=  i.next();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entryOffset  +=  i.next();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
89	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(offset  -  entryOffset));  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
90	[BUG]  [BUGGY]  return  entryOffset  -  length;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  length;	  return    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
91	[BUG]  [BUGGY]  return  entryOffset  -  start;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  start;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  start;	  return    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
92	[BUG]  [BUGGY]  return  hasHitEOF  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  ||  hasHitEOF;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  hasHitEOF;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
93	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  ||  isRecorded;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded;	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
94	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF  &&  isRecorded();  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded();	  return    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
95	[BUG]  [BUGGY]  return  entryOffset  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +  numRecords.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords.length;	  return    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
96	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
99	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
100	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
101	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  restLen);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
104	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  restLen;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  entrySize  :  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  restLen;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
105	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  entrySize;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  entryOffset  :  entrySize;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  entrySize;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
106	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  rest.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  entrySize  :  rest.length;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  rest.length;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
107	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  entryLimit;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  entryOffset  :  entryLimit;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  entryLimit;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  entryOffset;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  restLimit  :  entryOffset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  entryOffset;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  return  hasHitEOF?  entryLimit  :  restLimit;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  entryLimit  :  restLimit;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryLimit  :  restLimit;	  return    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
110	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  entryOffset;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  restLen  :  entryOffset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  entryOffset;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
111	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  entryLen;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  entryOffset  :  entryLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  entryLen;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
112	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  entryLen;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  rest  :  entryLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  entryLen;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
113	[BUG]  [BUGGY]  return  hasHitEOF?  entryLen  :  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  hasHitEOF?  entryLen  :  restLen;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryLen  :  restLen;	  return    entryLen;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
114	[BUG]  [BUGGY]  return  entryOffset  -  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  -  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  1;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
115	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }    [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  hasHitEOF);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainderLimit,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
