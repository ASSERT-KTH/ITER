bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
2	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  offset,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
3	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
4	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(buf,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(buf,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
5	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(buf,  offset,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
6	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(buf,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
7	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(numToRead,  entrySize);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
8	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  rest.length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  rest.length;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
9	[BUG]  [BUGGY]  return  hasHitEOF?  rest.length  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest.length  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest.length  :  hasHitEOF;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
10	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  rest.length  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  rest.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  rest.length  +  1;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
11	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  hasHitEOF;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
12	[BUG]  [BUGGY]  return  hasHitEOF?  rest.length  :  entrySize;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest.length  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest.length  :  entrySize;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
13	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  entrySize;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  entrySize;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
16	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
17	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
18	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
19	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
20	[BUG]  [BUGGY]  return  entryOffset  +  numRecords.length  -  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords.length  -  1;	  return    entryOffset    +    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
21	[BUG]  [BUGGY]  return  entryOffset  /  numRecords.length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  numRecords.length;	  return    entryOffset    +    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
22	[BUG]  [BUGGY]  return  entryOffset  -  numRecords.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numRecords.length;	  return    entryOffset    +    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
23	[BUG]  [BUGGY]  return  entryOffset  +  numRecords.length  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords.length  +  1;	  return    entryOffset    +    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
24	[BUG]  [BUGGY]  return  entryOffset  +  numRecords.length,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords.length,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords.length,  hasHitEOF;	  return    entryOffset    +    numRecords.length;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
25	[BUG]  [BUGGY]  return  entrySize  +(long)Math.log(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(long)Math.log(entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(long)Math.log(entryOffset  -  entryOffset));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
26	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.log(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.log(entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.log(entryOffset  -  entryOffset));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
27	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  numToRead));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryOffset  -  numToRead));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
28	[BUG]  [BUGGY]  return  entrySize  +(int)Math.exp(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.exp(entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.exp(entryOffset  -  entryOffset));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
29	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  +  entryOffset));  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  +  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryOffset  +  entryOffset));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
30	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  2;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  2;	  return    entryOffset    +    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  return  entryOffset  /  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  numToRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  numToRead  +  1;	  return    entryOffset    +    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  return  entryOffset  +  totalRead  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  totalRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  totalRead  +  1;	  return    entryOffset    +    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  4;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  4;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  4;	  return    entryOffset    +    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  *  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  *  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  *  1;	  return    entryOffset    +    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  1L;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  1L;	  return    entryOffset    +    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  return  numToRead  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  numToRead  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  numToRead  +  entryOffset;	  return    numToRead;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  return  numToRead  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  numToRead  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  numToRead  +  1,  hasHitEOF;	  return    numToRead;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  return  entryOffset  +  buf.length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  buf.length  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  buf.length  +  numToRead;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  buf.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  buf.length  -  1;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  return  buf.length  +  numToRead  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  buf.length  +  numToRead  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  buf.length  +  numToRead  +  entryOffset;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  buf.length  -  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  buf.length  -  offset;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  return  entryOffset  +  offset  +  buf.length;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  offset  +  buf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  offset  +  buf.length;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  buf.length,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  buf.length,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  buf.length,  hasHitEOF;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  return  entryOffset  -  count  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  count  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  count  +  1;	  return    entryOffset    -    count;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
45	[BUG]  [BUGGY]  return  entryOffset  -  count.length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  count.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  count.length;	  return    entryOffset    -    count;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
46	[BUG]  [BUGGY]  return  count  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  count  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  count  -  entryOffset;	  return    entryOffset    -    count;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
47	[BUG]  [BUGGY]  return  entryOffset  -  count  *  2;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  count  *  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  count  *  2;	  return    entryOffset    -    count;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
48	[BUG]  [BUGGY]  return  entryOffset  -  start  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  start  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  start  +  1;	  return    entryOffset    -    start;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
49	[BUG]  [BUGGY]  return  entryOffset  -  count(entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  count(entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  count(entrySize);	  return    entryOffset    -    start;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
50	[BUG]  [BUGGY]  return  entryOffset  -  inputSize  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  inputSize  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  inputSize  +  1;	  return    entryOffset    -    inputSize;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
51	[BUG]  [BUGGY]  return  entryOffset  /  inputSize;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  inputSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  inputSize;	  return    entryOffset    -    inputSize;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
52	[BUG]  [BUGGY]  return  inputSize  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  inputSize  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  inputSize  -  entryOffset;	  return    entryOffset    -    inputSize;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
54	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
55	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
56	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
57	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
58	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
59	[BUG]  [BUGGY]  return  entryOffset  /  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  1;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
60	[BUG]  [BUGGY]  return  entryOffset  +  2;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  2;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
61	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
62	[BUG]  [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
63	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
64	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
65	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
66	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
67	[BUG]  [BUGGY]  return  entrySize  /  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  restLen;	  return    entrySize    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
68	[BUG]  [BUGGY]  return  entrySize  -  offset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  offset;	  return    entrySize    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
69	[BUG]  [BUGGY]  return  isRecorded  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded  ||  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded  ||  hasHitEOF;	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
70	[BUG]  [BUGGY]  return  isRecorded  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded  &&  hasHitEOF;	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
71	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  ||  entryOffset  <  numRecords;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  ||  entryOffset  <  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  ||  entryOffset  <  numRecords;	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
72	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  hasHitEOF;	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
73	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  entryOffset  >  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  entryOffset  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  entryOffset  >  0;	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
74	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.ceil(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.ceil(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.ceil(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
75	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  /  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  /  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.ceil(entrySize  /  entryOffset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
76	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  -  numToRead));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.ceil(entrySize  -  numToRead));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
77	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.ceil(entryLimit  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.ceil(entryLimit  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.ceil(entryLimit  -  entryOffset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
78	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  -  offset));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.ceil(entrySize  -  offset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
79	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.ceil(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.ceil(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.ceil(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
80	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.ceil(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.ceil(numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.ceil(numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
81	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  numToRead));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize  -  numToRead));	  return    entryOffset    +(int)Math.rint(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
82	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  numToRead));  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset  -  numToRead));	  return    entryOffset    +(int)Math.rint(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
83	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.rint(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
84	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  offset  -  entryOffset));	  return    entryOffset    +(int)Math.rint(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
85	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset  -  numToRead));  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entryOffset  -  numToRead));	  return    entryOffset    +(int)Math.rint(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
86	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.rint(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
87	[BUG]  [BUGGY]  return  entryOffset  -  restLen  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  restLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  restLen  +  1;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
88	[BUG]  [BUGGY]  return  entryOffset  -  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numToRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numToRead  +  1;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  return  entryOffset  -  offset  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  offset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  offset  +  1;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
90	[BUG]  [BUGGY]  return  entryOffset  -  count(entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  count(entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  count(entrySize  +  1);	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
91	[BUG]  [BUGGY]  return  entrySize  -  totalRead  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  totalRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  totalRead  +  1;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
92	[BUG]  [BUGGY]  return  entryOffset  -  totalRead  +  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  totalRead  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  totalRead  +  2;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
93	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize,  numToRead);	  return    entryOffset    +(long)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
94	[BUG]  [BUGGY]  return  entrySize  +(long)Math.rint(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(long)Math.rint(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(long)Math.rint(entryOffset,  hasHitEOF);	  return    entryOffset    +(long)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
95	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(long)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
96	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(numToRead,  hasHitEOF);	  return    entryOffset    +(long)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
97	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  /  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  /  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize  /  entryOffset));	  return    entryOffset    +(int)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
98	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  offset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize  -  offset));	  return    entryOffset    +(int)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
99	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
100	[BUG]  [BUGGY]  return  entryOffset  -  restOffset;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  restOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  restOffset;	  return    entrySize    -    restOffset;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
101	[BUG]  [BUGGY]  return  entrySize  /  restOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  restOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  restOffset;	  return    entrySize    -    restOffset;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
102	[BUG]  [BUGGY]  return  entrySize  -  restOffset  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  restOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  restOffset  +  1;	  return    entrySize    -    restOffset;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
103	[BUG]  [BUGGY]  return  entryLimit  -  restOffset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  -  restOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  restOffset;	  return    entrySize    -    restOffset;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
104	[BUG]  [BUGGY]  return  entryOffset  -  restSize;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  restSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  restSize;	  return    entrySize    -    restOffset;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
105	[BUG]  [BUGGY]  return  entrySize  /  totalRead;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  totalRead;	  return    entrySize    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
106	[BUG]  [BUGGY]  return  entryLimit  -  totalRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  -  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  totalRead;	  return    entrySize    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
107	[BUG]  [BUGGY]  ||!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  ||!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	||!hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
108	[BUG]  [BUGGY]  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
109	[BUG]  [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
110	[BUG]  [BUGGY]  while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(!hasHitEOF)  {  count(entryOffset  +  numToRead);	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
111	[BUG]  [BUGGY]  while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  entryOffset  +=  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  entryOffset  +=  numToRead;	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
112	[BUG]  [BUGGY]  while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  entryOffset  +=  numRecords;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  entryOffset  +=  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(!hasHitEOF)  {  count(entryOffset  +  numToRead);  entryOffset  +=  numRecords;	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
113	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset,  count(numToRead),  hasHitEOF);	  return    entrySize    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
114	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset,  totalRead);	  return    entrySize    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
115	[BUG]  [BUGGY]  return  entryOffset  +  restLen;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  restLen;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
116	[BUG]  [BUGGY]  return  entrySize  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  entryOffset;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
117	[BUG]  [BUGGY]  return  entrySize  +  totalRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  totalRead;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
118	[BUG]  [BUGGY]  return  entrySize  +  numToRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  numToRead;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
119	[BUG]  [BUGGY]  return  entrySize  +  offset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  offset;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
120	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    ==    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
121	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  ==  0)  {  if(hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    ==    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
123	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
124	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
125	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset;	  return    hasHitEOF    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
126	[BUG]  [BUGGY]  return  hasHitEOF  &&  isHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isHitEOF;	  return    hasHitEOF    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
127	[BUG]  [BUGGY]  return  hasHitEOF  &&  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  restLen;	  return    hasHitEOF    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
128	[BUG]  [BUGGY]  return  hasHitEOF  &&  totalRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  totalRead;	  return    hasHitEOF    &&    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
129	[BUG]  [BUGGY]  return  entrySize  /  entryOffset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  entryOffset;	  return    entryOffset    /    entrySize;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
130	[BUG]  [BUGGY]  return  entryOffset  +  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  entrySize;	  return    entryOffset    /    entrySize;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
131	[BUG]  [BUGGY]  return  entryOffset  *  entrySize;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  *  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  *  entrySize;	  return    entryOffset    /    entrySize;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
132	[BUG]  [BUGGY]  return  entryOffset  /  numRecords;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  numRecords;	  return    entryOffset    /    entrySize;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
133	[BUG]  [BUGGY]  return  entryOffset  /  length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  length;	  return    entryOffset    /    entrySize;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
134	[BUG]  [BUGGY]  return  entryLimit  /  entrySize;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  /  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  /  entrySize;	  return    entryOffset    /    entrySize;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
135	[BUG]  [BUGGY]  return  entryOffset  -  length  +  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  length  +  1;	  return    entryOffset    -    length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
136	[BUG]  [BUGGY]  return  entrySize  -  length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  length;	  return    entryOffset    -    length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
137	[BUG]  [BUGGY]  return  entryOffset  -  length  -  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  length  -  1;	  return    entryOffset    -    length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
138	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  totalRead);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
139	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  count(entrySize));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  count(entrySize));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  count(entrySize));	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  entrySize  +  1);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
141	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded(entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded(entryOffset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded(entryOffset,  entrySize);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  0,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  0,  entrySize);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
143	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  numToRead);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
144	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  offset,  entrySize);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
145	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
146	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
147	[BUG]  [BUGGY]  return  entryOffset  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  1,  hasHitEOF;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
148	[BUG]  [BUGGY]  return  entrySize  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  1,  hasHitEOF;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
149	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF  -  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  hasHitEOF  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF  -  1;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
150	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF  &&  hasHitEOF;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
151	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isISOControl(entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isISOControl(entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF  &&  isISOControl(entryOffset);	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
152	[BUG]  [BUGGY]  return  entryLimit  +  1,  count(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  count(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  count(entryOffset,  hasHitEOF);	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
153	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
154	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
155	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
156	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
157	[BUG]  [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
158	[BUG]  [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
159	[BUG]  [BUGGY]  return  entryLen  +  1,  count(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  1,  count(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  count(entryOffset,  hasHitEOF);	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
160	[BUG]  [BUGGY]  return  entryLen  /  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  /  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  /  1,  hasHitEOF;	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
161	[BUG]  [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  isISOControl(entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  isISOControl(entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  hasHitEOF  &&  isISOControl(entryOffset);	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
162	[BUG]  [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  hasHitEOF  &&  hasHitEOF;	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
163	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  1  :  entryLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  1  :  entryLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  1  :  entryLen;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
164	[BUG]  [BUGGY]  return  hasHitEOF?  entryLen  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryLen  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryLen  :  hasHitEOF;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
165	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  restLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  restLen;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
166	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  entryLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  entryLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  entryLen;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
167	[BUG]  [BUGGY]  return  hasHitEOF?  restOffset  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restOffset  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restOffset  :  hasHitEOF;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
168	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  entryOffset  +  1;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
169	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  0;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
170	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  numToRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  numToRead;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
171	[BUG]  [BUGGY]  return  entrySize  -  1L;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  1L;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
172	[BUG]  [BUGGY]  return  entrySize  -  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  2;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
173	[BUG]  [BUGGY]  return  entrySize  /  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  1;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
174	[BUG]  [BUGGY]  return  entryLimit  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  1;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
175	[BUG]  [BUGGY]  return  hasHitEOF  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  -  1;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
177	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
178	[BUG]  [BUGGY]  if(numToRead  >  rest.length)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  rest.length)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  rest.length)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
179	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remainder.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remainder.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remainder.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
180	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
181	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[0]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[0]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[0]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
182	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
183	[BUG]  [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
184	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
185	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
186	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
187	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
188	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  entryOffset;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
189	[BUG]  [BUGGY]  return  hasHitEOF?  restOffset  :  entryLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restOffset  :  entryLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restOffset  :  entryLen;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
190	[BUG]  [BUGGY]  return  hasHitEOF?  rest.length  :  entryLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest.length  :  entryLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest.length  :  entryLen;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
191	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  entrySize;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  entrySize;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
192	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  totalRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  totalRead;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
193	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  0;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  0;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
194	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  numToRead;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  numToRead;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
195	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.exp(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.exp(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.exp(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.exp(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
196	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  /  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  /  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.exp(entrySize  /  entryOffset));	  return    entryOffset    +(int)Math.exp(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
197	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.exp(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.exp(numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.exp(numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.exp(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
198	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  -  numToRead));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.exp(entrySize  -  numToRead));	  return    entryOffset    +(int)Math.exp(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
199	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  *  entryOffset));  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  *  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.exp(entrySize  *  entryOffset));	  return    entryOffset    +(int)Math.exp(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
200	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.exp(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.exp(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.exp(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.exp(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
201	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  -  offset));  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.exp(entrySize  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.exp(entrySize  -  offset));	  return    entryOffset    +(int)Math.exp(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
202	[BUG]  [BUGGY]  return  entryOffset  +  totalRead  +  numRecords;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  totalRead  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  totalRead  +  numRecords;	  return    entryOffset    +    totalRead;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
203	[BUG]  [BUGGY]  return  entryOffset  +  totalRead  +  numToRead;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  totalRead  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  totalRead  +  numToRead;	  return    entryOffset    +    totalRead;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
204	[BUG]  [BUGGY]  return  entryOffset  +  offset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  offset;	  return    entryOffset    +    totalRead;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
205	[BUG]  [BUGGY]  return  isReset  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isReset  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isReset  &&  hasHitEOF;	  return    hasHitEOF    &&    isReset;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
206	[BUG]  [BUGGY]  return  hasHitEOF  ||  isReset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isReset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isReset;	  return    hasHitEOF    &&    isReset;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
207	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecord;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecord;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecord;	  return    hasHitEOF    &&    isReset;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
208	[BUG]  [BUGGY]  return  isReset  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isReset  ||  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isReset  ||  hasHitEOF;	  return    hasHitEOF    &&    isReset;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
209	[BUG]  [BUGGY]  entryOffset  +=  i.next();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  i.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	entryOffset  +=  i.next();	  while(i.hasNext())    {    entryOffset    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
210	[BUG]  [BUGGY]  while(i.hasNext())  {  entryOffset  +=  rest.next();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entryOffset  +=  rest.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entryOffset  +=  rest.next();	  while(i.hasNext())    {    entryOffset    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
211	[BUG]  [BUGGY]  while(i.hasNext())  {  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entryOffset  +=  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entryOffset  +=  numToRead;	  while(i.hasNext())    {    entryOffset    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
212	[BUG]  [BUGGY]  while(i.hasNext())  {  entryOffset  +=  n.next();  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entryOffset  +=  n.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entryOffset  +=  n.next();	  while(i.hasNext())    {    entryOffset    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
213	[BUG]  [BUGGY]  while(i.hasNext())  {  entryOffset  +=  numRecords.next();  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entryOffset  +=  numRecords.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entryOffset  +=  numRecords.next();	  while(i.hasNext())    {    entryOffset    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
214	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset  >=  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset  >=  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset  >=  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
215	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset  ==  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset  ==  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset  ==  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
216	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset!=  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset!=  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset!=  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
217	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset  <  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset  <  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset  <  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
218	[BUG]  [BUGGY]  return  hasHitEOF  ||  entryOffset  >  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  entryOffset  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  entryOffset  >  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
219	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset  <  =  0;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset  <  =  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset  <  =  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
220	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(buf,  entryOffset  -  entryOffset));	  return    entryLimit    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
221	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entryOffset,  numToRead  -  entryOffset));	  return    entryLimit    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
222	[BUG]  [BUGGY]  return  entryLimit  +(long)Math.rint(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(long)Math.rint(entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(long)Math.rint(entryOffset  -  entryOffset));	  return    entryLimit    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
223	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entrySize,  hasHitEOF);	  return    entrySize    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
224	[BUG]  [BUGGY]  return  entrySize  /(int)Math.rint(entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /(int)Math.rint(entryLimit,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /(int)Math.rint(entryLimit,  hasHitEOF);	  return    entrySize    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
225	[BUG]  [BUGGY]  return  entrySize  +(long)Math.rint(entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(long)Math.rint(entryLimit,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(long)Math.rint(entryLimit,  hasHitEOF);	  return    entrySize    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
226	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryLimit,  numToRead);	  return    entrySize    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
227	[BUG]  [BUGGY]  return  entryLen  -  totalRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  -  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  -  totalRead;	  return    totalRead    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
228	[BUG]  [BUGGY]  return  entryLen  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  -  entryOffset;	  return    totalRead    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
229	[BUG]  [BUGGY]  return  entries.length  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entries.length  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entries.length  -  entryOffset;	  return    totalRead    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
230	[BUG]  [BUGGY]  return  entryStart  -  totalRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryStart  -  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryStart  -  totalRead;	  return    totalRead    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
231	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  restLimit;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  restLimit;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
232	[BUG]  [BUGGY]  return  hasHitEOF?  remainderLimit  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  remainderLimit  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  remainderLimit  :  hasHitEOF;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
233	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  restLimit;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  restLimit;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
234	[BUG]  [BUGGY]  return  hasHitEOF?  totalRead  :  restLimit;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  totalRead  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  totalRead  :  restLimit;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
235	[BUG]  [BUGGY]  return  hasHitEOF?  result  :  restLimit;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  result  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  result  :  restLimit;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
236	[BUG]  [BUGGY]  return  entryLimit  -  entryOffset;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  entryOffset;	  return    entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
237	[BUG]  [BUGGY]  return  entrySize  -  remainingOffset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  remainingOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  remainingOffset;	  return    entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
238	[BUG]  [BUGGY]  return  entryOffset  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords  +  1;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
239	[BUG]  [BUGGY]  return  entryOffset  +  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords  +  length;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
240	[BUG]  [BUGGY]  return  entryOffset  +  numRecords,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords,  hasHitEOF;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
241	[BUG]  [BUGGY]  return  entryOffset  +  numRecords  +  offset;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numRecords  +  offset;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
242	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
243	[BUG]  [BUGGY]  if(entryOffset  <  restLen)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  restLen)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  restLen)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
244	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
245	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
246	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
247	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
248	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(remainder,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(remainder,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(remainder,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(remainder,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
249	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(remainder,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(remainder,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(remainder,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(remainder,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
250	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  numToRead);	  return    entryOffset    +(int)Math.rint(remainder,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
252	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
253	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
254	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
255	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
256	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
257	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entryLimit  -  entrySize));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entryLimit  -  entrySize));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entryLimit  -  entrySize));	  return    entrySize    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
258	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize  -  entryLimit));	  return    entrySize    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
259	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryOffset  -  entryLimit));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
260	[BUG]  [BUGGY]  return  entrySize  +(long)Math.log(entryOffset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(long)Math.log(entryOffset  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(long)Math.log(entryOffset  -  entryLimit));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
261	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.log(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.log(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.log(entrySize  -  entryOffset));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
262	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.log(numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(numToRead  -  entryOffset));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
263	[BUG]  [BUGGY]  return  isRecorded;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded;	  return    restLimit;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
264	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  entryOffset  +  1;	  return    hasHitEOF?    restLimit    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
265	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  numToRead;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  numToRead;	  return    hasHitEOF?    restLimit    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
266	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  totalRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  totalRead;	  return    hasHitEOF?    restLimit    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
268	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
269	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
270	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
271	[BUG]  [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
272	[BUG]  [BUGGY]  return  hasHitEOF?  false  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  false  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  false  :  hasHitEOF;	  return    hasHitEOF?    true    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
273	[BUG]  [BUGGY]  return  hasHitEOF?  true  :  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  true  :  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  true  :  hasHitEOF  +  1;	  return    hasHitEOF?    true    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
274	[BUG]  [BUGGY]  return  hasHitEOF?  true  :  hasHitEOF  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  true  :  hasHitEOF  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  true  :  hasHitEOF  +  entryOffset;	  return    hasHitEOF?    true    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
275	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  /  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  /  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.log(entrySize  /  entryOffset));	  return    entryOffset    +(long)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
276	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  -  numToRead));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.log(entrySize  -  numToRead));	  return    entryOffset    +(long)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
277	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  -  offset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.log(entrySize  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.log(entrySize  -  offset));	  return    entryOffset    +(long)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
278	[BUG]  [BUGGY]  return  entryLimit  +(long)Math.log(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(long)Math.log(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(long)Math.log(entrySize  -  entryOffset));	  return    entryOffset    +(long)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
279	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.log(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.log(numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.log(numToRead  -  entryOffset));	  return    entryOffset    +(long)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
280	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  hasHitEOF;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
281	[BUG]  [BUGGY]  return  hasHitEOF?  restOffset  :  restLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restOffset  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restOffset  :  restLen;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
282	[BUG]  [BUGGY]  return  hasHitEOF?  totalRead  :  restLen;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  totalRead  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  totalRead  :  restLen;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
283	[BUG]  [BUGGY]  return  hasHitEOF?  remainderLen  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  remainderLen  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  remainderLen  :  hasHitEOF;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
284	[BUG]  [BUGGY]  return  hasHitEOF?  entryLen  :  restOffset;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryLen  :  restOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryLen  :  restOffset;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
285	[BUG]  [BUGGY]  return  entrySize  -  entryLimit;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  entryLimit;	  return    entryLimit    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
286	[BUG]  [BUGGY]  return  entryLimit  -  numToRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  -  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  numToRead;	  return    entryLimit    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
287	[BUG]  [BUGGY]  return  entryLimit  -  offset;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  -  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  offset;	  return    entryLimit    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
288	[BUG]  [BUGGY]  return  entryLimit  -  restLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  -  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  -  restLen;	  return    entryLimit    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
289	[BUG]  [BUGGY]  return  entryOffset  /  restLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  restLen;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
290	[BUG]  [BUGGY]  return  entryOffset  /  totalRead  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  totalRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  totalRead  +  1;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
291	[BUG]  [BUGGY]  return  entryOffset  *  totalRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  *  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  *  totalRead;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
292	[BUG]  [BUGGY]  return  entryOffset  /  count;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  count;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  count;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
293	[BUG]  [BUGGY]  return  entryOffset  /  totalRead.length;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  totalRead.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  totalRead.length;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
294	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  restLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  restLen;	  return    entryOffset    +    numToRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
295	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  totalRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  totalRead;	  return    entryOffset    +    numToRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
296	[BUG]  [BUGGY]  return  entryOffset  +  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  offset  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  offset  +  numToRead;	  return    entryOffset    +    numToRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
297	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded.length;	  return    hasHitEOF    &&    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
298	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded  +  entryOffset;	  return    hasHitEOF    &&    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
299	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset  <  isRecorded;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset  <  isRecorded;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset  <  isRecorded;	  return    hasHitEOF    &&    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
300	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded  +  1;	  return    hasHitEOF    &&    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
301	[BUG]  [BUGGY]  return  entryOffset  -  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  1,  hasHitEOF;	  return    entryOffset    -    1;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
302	[BUG]  [BUGGY]  return  entryOffset  -  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  2;	  return    entryOffset    -    1;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
303	[BUG]  [BUGGY]  return  entryOffset  -  1L;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  1L;	  return    entryOffset    -    1;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
304	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  entrySize,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
305	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(key,  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(key,  entrySize,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(key,  entrySize,  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
306	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  totalRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
307	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  entrySize,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  entrySize,  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
308	[BUG]  [BUGGY]  return  entryOffset  +  length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  length  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  length  +  numToRead;	  return    entryOffset    +    numToRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
309	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
310	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
311	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
312	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
313	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
314	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
315	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  offset,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  offset,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  offset,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
316	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  offset,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
317	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  count(entrySize),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  count(entrySize),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(numToRead,  count(entrySize),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
318	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entryLimit,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entryLimit,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entryLimit,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
319	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
320	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  offset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
321	[BUG]  [BUGGY]  return  entryLimit  /  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  /  1;	  return    entryLimit    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
322	[BUG]  [BUGGY]  return  entryLimit  +  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  numToRead;	  return    entryLimit    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
323	[BUG]  [BUGGY]  return  entryLimit  +  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  2;	  return    entryLimit    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
324	[BUG]  [BUGGY]  return  i.getValue();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  i.getValue();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  i.getValue();	  return    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
325	[BUG]  [BUGGY]  return  isRecorded(entryOffset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded(entryOffset,  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded(entryOffset,  entrySize,  hasHitEOF);	  return    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
326	[BUG]  [BUGGY]  return  isRecorded(i,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded(i,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded(i,  entryOffset,  hasHitEOF);	  return    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
327	[BUG]  [BUGGY]  return  isRecorded(remainder,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded(remainder,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded(remainder,  entryOffset,  hasHitEOF);	  return    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
328	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  entrySize);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
329	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  totalRead);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
330	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  count(entrySize));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  count(entrySize));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  count(entrySize));	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
331	[BUG]  [BUGGY]  return  hasHitEOF  ||  isISOControl(entryOffset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isISOControl(entryOffset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isISOControl(entryOffset,  entryOffset);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
332	[BUG]  [BUGGY]  return  isISOControl(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isISOControl(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isISOControl(entryOffset,  hasHitEOF);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
333	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  count(entrySize),  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  count(entrySize),  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  count(entrySize),  entryOffset);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
334	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  count(entryLimit,  entryOffset));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  count(entryLimit,  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  count(entryLimit,  entryOffset));	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
335	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
336	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
337	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords!=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
338	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
339	[BUG]  [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
340	[BUG]  [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  if(entryOffset  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
341	[BUG]  [BUGGY]  entrySize  +=  i.next();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  +=  i.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	entrySize  +=  i.next();	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
342	[BUG]  [BUGGY]  while(i.hasNext())  {  entrySize  +=  rest.next();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entrySize  +=  rest.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entrySize  +=  rest.next();	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
343	[BUG]  [BUGGY]  while(i.hasNext())  {  entrySize  +=  n.next();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entrySize  +=  n.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entrySize  +=  n.next();	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
344	[BUG]  [BUGGY]  entrySize  +=  rest.next();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  +=  rest.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	entrySize  +=  rest.next();	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
345	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded();	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
346	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset);	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
347	[BUG]  [BUGGY]  return  isRecorded()  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded()  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded()  &&  hasHitEOF;	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
348	[BUG]  [BUGGY]  return  hasHitEOF  &&  isImmutableAndRecorded();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isImmutableAndRecorded();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isImmutableAndRecorded();	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
349	[BUG]  [BUGGY]  return  isRecorded();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded();	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
350	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset  +  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset  +  entrySize);	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
351	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded(entryOffset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded(entryOffset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded(entryOffset,  entryOffset);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
352	[BUG]  [BUGGY]  return  isRecorded(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecorded(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecorded(entryOffset,  hasHitEOF);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
353	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  count(entrySize),  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  count(entrySize),  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  count(entrySize),  entryOffset);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
354	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  restOffset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  restOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  restOffset;	  return    hasHitEOF?    entrySize    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
355	[BUG]  [BUGGY]  return  hasHitEOF?  entryLimit  :  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryLimit  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryLimit  :  restLen;	  return    hasHitEOF?    entrySize    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
356	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  totalRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  totalRead;	  return    hasHitEOF?    entrySize    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
357	[BUG]  [BUGGY]  return  entryOffset  -  buf.length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  buf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  buf.length;	  return    entryOffset    -    offset;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
358	[BUG]  [BUGGY]  return  entryOffset  -  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  offset  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  offset  +  numToRead;	  return    entryOffset    -    offset;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
359	[BUG]  [BUGGY]  return  entryOffset  -  offset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  offset  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  offset  +  numRecords;	  return    entryOffset    -    offset;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
360	[BUG]  [BUGGY]  return  entryOffset  +  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  hasHitEOF;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
361	[BUG]  [BUGGY]  return  entrySize  +  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  hasHitEOF;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
362	[BUG]  [BUGGY]  return  hasHitEOF  +  entryOffset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entryOffset  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  entryOffset  +  numRecords;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
363	[BUG]  [BUGGY]  return  hasHitEOF  +  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  entryOffset  +  1;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
364	[BUG]  [BUGGY]  return  entryLimit  +  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  hasHitEOF;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
365	[BUG]  [BUGGY]  return  hasHitEOF  &  entryOffset;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &  entryOffset;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
366	[BUG]  [BUGGY]  return  hasHitEOF  /  entryOffset;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  /  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  /  entryOffset;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
367	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.cos(numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
368	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.cos(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.cos(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.cos(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
369	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  /  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  /  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(entrySize  /  entryOffset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
370	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  -  numToRead));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(entrySize  -  numToRead));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
371	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(entryLimit  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.cos(entryLimit  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(entryLimit  -  entryOffset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
372	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.cos(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.cos(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.cos(entrySize  -  entryOffset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
373	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  -  offset));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(entrySize  -  offset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
374	[BUG]  [BUGGY]  return  isRecord?  rest  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  rest  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  entryOffset;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
375	[BUG]  [BUGGY]  return  isRecord?  rest  :  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  rest  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  entrySize;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
376	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  entryLimit;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  entryLimit;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
377	[BUG]  [BUGGY]  return  isRecord?  rest  :  totalRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  rest  :  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  totalRead;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
378	[BUG]  [BUGGY]  return  entrySize  +  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  2;	  return    entrySize    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
379	[BUG]  [BUGGY]  return  entrySize  +  1L;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  1L;	  return    entrySize    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
380	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
381	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
382	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  else  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
383	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entrySize,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entrySize,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entrySize,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
384	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entryOffset,  count(numToRead),  hasHitEOF);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
385	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entryOffset,  numToRead);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
386	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(entryOffset,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(entryOffset,  totalRead);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
387	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  numToRead));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize  -  numToRead));	  return    entryOffset    +(long)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
388	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  /  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  /  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize  /  entryOffset));	  return    entryOffset    +(long)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
389	[BUG]  [BUGGY]  return  entrySize  +(long)Math.rint(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(long)Math.rint(entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(long)Math.rint(entryOffset  -  entryOffset));	  return    entryOffset    +(long)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
390	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  offset));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize  -  offset));	  return    entryOffset    +(long)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
391	[BUG]  [BUGGY]  return  entryLimit  +(long)Math.rint(entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(long)Math.rint(entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(long)Math.rint(entrySize  -  entryOffset));	  return    entryOffset    +(long)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
392	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  restLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
393	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  entrySize,  restLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  entrySize,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  entrySize,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
394	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  restLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
395	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(numToRead,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
396	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  restLen);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  count(numToRead),  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
397	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  offset,  restLen);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  offset,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  offset,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
398	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  numToRead,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
399	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  offset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
400	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  numToRead,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
401	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(buf,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(buf,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(buf,  numToRead,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
402	[BUG]  [BUGGY]  return  entryOffset  +  length  -  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  length  -  1;	  return    entryOffset    +    length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
403	[BUG]  [BUGGY]  return  entryOffset  +  length  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  length  +  1;	  return    entryOffset    +    length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
404	[BUG]  [BUGGY]  return  entryOffset  +  length  -  offset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  length  -  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  length  -  offset;	  return    entryOffset    +    length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
405	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(buf,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(buf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
406	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  totalRead);	  return    entryOffset    +(int)Math.rint(buf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
407	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(buf,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(buf,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(buf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
408	[BUG]  [BUGGY]  return  entryOffset  -  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numRecords  +  1;	  return    entryOffset    -    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
409	[BUG]  [BUGGY]  return  entryOffset  -  numRecords,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numRecords,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numRecords,  hasHitEOF;	  return    entryOffset    -    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
410	[BUG]  [BUGGY]  return  entrySize  -  numRecords;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  numRecords;	  return    entryOffset    -    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
411	[BUG]  [BUGGY]  throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  throw  new  IOException( " ");  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	throw  new  IOException( " ");	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
412	[BUG]  [BUGGY]  return(numToRead  <  restLen)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  <  restLen)?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  <  restLen)?  0  :  entryOffset;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
413	[BUG]  [BUGGY]  result.add(entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  result.add(entryOffset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	result.add(entryOffset,  entrySize);	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
414	[BUG]  [BUGGY]  result.add(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  result.add(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	result.add(entryOffset,  hasHitEOF);	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
415	[BUG]  [BUGGY]  return(numToRead  >=  0)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  >=  0)?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  >=  0)?  0  :  entryOffset;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
416	[BUG]  [BUGGY]  return(numToRead  ==  0)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  ==  0)?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  ==  0)?  0  :  entryOffset;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
417	[BUG]  [BUGGY]  return  entryOffset  -  numToRead,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numToRead,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numToRead,  hasHitEOF;	  return    entryOffset    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
418	[BUG]  [BUGGY]  return  entrySize  -  numToRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  numToRead;	  return    entryOffset    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
419	[BUG]  [BUGGY]  return  entryOffset  -  numToRead  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numToRead  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numToRead  +  1,  hasHitEOF;	  return    entryOffset    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
420	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(buf,  entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(buf,  entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(buf,  entryOffset  -  entryOffset));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
421	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset,  numToRead  -  entryOffset));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
422	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  +  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  +  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset  +  entryOffset));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
423	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  -  numToRead));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  -  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.log(entrySize  -  numToRead));	  return    entryOffset    +(int)Math.log(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
424	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(remainderLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(remainderLimit,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(remainderLimit,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
425	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(remainderLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(remainderLimit,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(remainderLimit,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
426	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainderLimit,  numToRead);	  return    entryOffset    +(int)Math.rint(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
427	[BUG]  [BUGGY]  return  entryLen  /  numRecords;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  /  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  /  numRecords;	  return    entryLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
428	[BUG]  [BUGGY]  return  entryLen  +  numRecords  +  offset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  numRecords  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  numRecords  +  offset;	  return    entryLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
429	[BUG]  [BUGGY]  return  entryLen  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  numRecords  +  1;	  return    entryLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
430	[BUG]  [BUGGY]  return  entryLen  -  numRecords;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  -  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  -  numRecords;	  return    entryLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
431	[BUG]  [BUGGY]  return  entryLen  +  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  numRecords  +  length;	  return    entryLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
432	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  1  :  entryLimit;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  1  :  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  1  :  entryLimit;	  return    hasHitEOF?    entryOffset    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
433	[BUG]  [BUGGY]  return  hasHitEOF?  entryLimit  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryLimit  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryLimit  :  hasHitEOF;	  return    hasHitEOF?    entryOffset    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
434	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  entryLimit;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  entryLimit;	  return    hasHitEOF?    entryOffset    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
435	[BUG]  [BUGGY]  return  entryLimit  /  numRecords;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  /  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  /  numRecords;	  return    entryLimit    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
436	[BUG]  [BUGGY]  return  entryLimit  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  numRecords  +  1;	  return    entryLimit    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
437	[BUG]  [BUGGY]  return  entryLimit  +  numRecords  +  offset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  numRecords  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  numRecords  +  offset;	  return    entryLimit    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
438	[BUG]  [BUGGY]  return  entryLimit  +  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  numRecords  +  length;	  return    entryLimit    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
439	[BUG]  [BUGGY]  return  entryLimit  +  numRecords,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  numRecords,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  numRecords,  hasHitEOF;	  return    entryLimit    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
440	[BUG]  [BUGGY]  return  entrySize  -  restOffset.length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  restOffset.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  restOffset.length;	  return    entrySize    -    rest.length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
441	[BUG]  [BUGGY]  return  entrySize  /  rest.length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  rest.length;	  return    entrySize    -    rest.length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
442	[BUG]  [BUGGY]  return  entrySize  -  rest.length  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  rest.length  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  rest.length  +  1;	  return    entrySize    -    rest.length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
443	[BUG]  [BUGGY]  return  entryOffset  -  rest.length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  rest.length;	  return    entrySize    -    rest.length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
444	[BUG]  [BUGGY]  return  entrySize  -  rest.length  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  rest.length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  rest.length  -  1;	  return    entrySize    -    rest.length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
445	[BUG]  [BUGGY]  return  entryOffset  *  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  *  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  *  numToRead;	  return    entryOffset    /    numToRead;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
446	[BUG]  [BUGGY]  return  entrySize  /  numToRead;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  numToRead;	  return    entryOffset    /    numToRead;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
447	[BUG]  [BUGGY]  return  entryOffset  /  buf.length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  buf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  buf.length;	  return    entryOffset    /    numToRead;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
448	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(offset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
449	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  offset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
450	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(offset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
451	[BUG]  [BUGGY]  return  hasHitEOF  ||  entryOffset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  entryOffset;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
452	[BUG]  [BUGGY]  return  hasHitEOF  ||  numToRead;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  numToRead;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
453	[BUG]  [BUGGY]  return  hasHitEOF  ||  hasHitEOF  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  hasHitEOF  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  hasHitEOF  +  entryOffset;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
454	[BUG]  [BUGGY]  return  hasHitEOF  ||  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  hasHitEOF  +  1;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
455	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  /  entryOffset));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  /  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.log(entrySize  /  entryOffset));	  return    entryOffset    +(int)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
456	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  -  offset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.log(entrySize  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.log(entrySize  -  offset));	  return    entryOffset    +(int)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
457	[BUG]  [BUGGY]  return  entrySize  /  numRecords;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /  numRecords;	  return    entrySize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
458	[BUG]  [BUGGY]  return  entrySize  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  numRecords  +  1;	  return    entrySize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
459	[BUG]  [BUGGY]  return  entrySize  +  numRecords  +  offset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  numRecords  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  numRecords  +  offset;	  return    entrySize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
460	[BUG]  [BUGGY]  return  entrySize  +  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  numRecords  +  length;	  return    entrySize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
461	[BUG]  [BUGGY]  return  entrySize  *  numRecords;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  *  numRecords;	  return    entrySize    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
462	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(offset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(offset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(offset  -  entryOffset));	  return    entryOffset    +(int)Math.rint(offset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
463	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(offset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(offset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(offset  -  entryOffset));	  return    entryOffset    +(int)Math.rint(offset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
464	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  offset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset  -  offset));	  return    entryOffset    +(int)Math.rint(offset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
465	[BUG]  [BUGGY]  return  entrySize  +(long)Math.rint(entryOffset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(long)Math.rint(entryOffset  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(long)Math.rint(entryOffset  -  entryLimit));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryLimit));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
466	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  /  entryLimit));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  /  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset  /  entryLimit));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryLimit));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
467	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize  -  entryLimit));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryLimit));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
468	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
469	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
470	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
471	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
472	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  hasHitEOF;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
473	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  1  :  entrySize;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  1  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  1  :  entrySize;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
474	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  entrySize  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  entrySize  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  entrySize  +  1;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
475	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  totalRead;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  totalRead;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
476	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  totalRead  :  entrySize;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  totalRead  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  totalRead  :  entrySize;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
477	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  count(entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  count(entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  count(entrySize);	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
478	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
479	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
480	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  restOffset.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  restOffset.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  restOffset.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
481	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
482	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remainder.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remainder.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remainder.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
483	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remaining.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remaining.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  len  =  remaining.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
484	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  entrySize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(buf,  entrySize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(buf,  entrySize  -  entryOffset));	  return    entryOffset    +(long)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
485	[BUG]  [BUGGY]  return  length  -  entryOffset;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  length  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  length  -  entryOffset;	  return    entryOffset    -    length;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
486	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  0,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  0,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
487	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(buf,  numToRead);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
488	[BUG]  [BUGGY]  return  start  -  entryOffset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  start  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  start  -  entryOffset;	  return    entryOffset    -    start;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
489	[BUG]  [BUGGY]  return  entryOffset  -  start.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  start.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  start.length;	  return    entryOffset    -    start;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
490	[BUG]  [BUGGY]  return  entryOffset  -  start  +  length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  start  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  start  +  length;	  return    entryOffset    -    start;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
491	[BUG]  [BUGGY]  return  restLimit  +(int)Math.rint(remainder,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLimit  +(int)Math.rint(remainder,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLimit  +(int)Math.rint(remainder,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(remainder,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
492	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  0,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  0,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(remainder,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
493	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  0;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  0;	  return    hasHitEOF?    restLimit    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
494	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  result;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  result;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  result;	  return    hasHitEOF?    restLimit    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
495	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  entrySize;	  return    hasHitEOF?    restLimit    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
496	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(offset,  entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(offset,  entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(offset,  entryOffset  -  entryOffset));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
497	[BUG]  [BUGGY]  return  totalRead  -  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  totalRead  -  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  totalRead  -  entryOffset  +  1;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
498	[BUG]  [BUGGY]  return  entryOffset  -  totalRead  +  1L;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  totalRead  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  totalRead  +  1L;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
499	[BUG]  [BUGGY]  return  entryOffset  -  remainingLen  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  remainingLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  remainingLen  +  1;	  return    entryOffset    -    totalRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
500	[BUG]  [BUGGY]  return  restLen  -  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLen  -  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLen  -  entrySize;	  return    entrySize    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
501	[BUG]  [BUGGY]  return  numToRead  -  restLen;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  numToRead  -  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  numToRead  -  restLen;	  return    entrySize    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
502	[BUG]  [BUGGY]  return  offset  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  offset  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  offset  -  entryOffset;	  return    entryOffset    -    offset;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
503	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  count(entrySize),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset,  count(entrySize),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset,  count(entrySize),  hasHitEOF);	  return    entrySize    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
504	[BUG]  [BUGGY]  return  hasHitEOF  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  -  entryOffset;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
505	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
506	[BUG]  [BUGGY]  arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
507	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
508	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset  -  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
509	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
510	[BUG]  [BUGGY]  return  totalRead  /  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  totalRead  /  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  totalRead  /  entryOffset;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
511	[BUG]  [BUGGY]  return  entryOffset  /  rest.length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  rest.length;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
512	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
513	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
514	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
515	[BUG]  [BUGGY]  if(numToRead  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >=  restLen)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
516	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
517	[BUG]  [BUGGY]  if(entryOffset  <  restLimit)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  restLimit)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  restLimit)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
518	[BUG]  [BUGGY]  if(entryOffset  >  access)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  access)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >  access)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
519	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
520	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  restOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
521	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  0,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  0,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(buf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
522	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  offset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  offset);	  return    entryOffset    +(int)Math.rint(buf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
523	[BUG]  [BUGGY]  return  entryOffset  -(int)Math.rint(buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -(int)Math.rint(buf,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -(int)Math.rint(buf,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(buf,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
524	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  totalRead;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  totalRead;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
525	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  1;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
526	[BUG]  [BUGGY]  return  hasHitEOF  +  1,  entryLimit;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  1,  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  1,  entryLimit;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
527	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF  +  1;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
528	[BUG]  [BUGGY]  return  hasHitEOF  +  1,  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  1,  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  1,  entryOffset;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
529	[BUG]  [BUGGY]  return  restLimit  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLimit  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLimit  +  1,  hasHitEOF;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
530	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset,  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
531	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entryLimit,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entryLimit,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entryLimit,  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
532	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
533	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(numToRead,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(numToRead,  totalRead);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
534	[BUG]  [BUGGY]  return  hasHitEOF?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  0  :  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  0  :  numToRead;	  return    numToRead;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
535	[BUG]  [BUGGY]  return  hasHitEOF?  numToRead  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  numToRead  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  numToRead  :  0;	  return    numToRead;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
536	[BUG]  [BUGGY]  return  hasHitEOF?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  -1  :  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  -1  :  numToRead;	  return    numToRead;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
537	[BUG]  [BUGGY]  return  isRecord?  rest  :  blockSize;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  rest  :  blockSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  blockSize;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
538	[BUG]  [BUGGY]  return  isRecord?  rest  :  null;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  rest  :  null;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  null;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
539	[BUG]  [BUGGY]  return  isRecord?  rest  :  result;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  rest  :  result;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  result;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
540	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
541	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
542	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
543	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
544	[BUG]  [BUGGY]  return  numToRead  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  numToRead  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  numToRead  -  entryOffset;	  return    entryOffset    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
545	[BUG]  [BUGGY]  return  offset  -  numToRead;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  offset  -  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  offset  -  numToRead;	  return    entryOffset    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
546	[BUG]  [BUGGY]  return  count  -  numToRead;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  count  -  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  count  -  numToRead;	  return    entryOffset    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
547	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  rest.length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  rest.length;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
548	[BUG]  [BUGGY]  return  hasHitEOF?  restOffset  :  rest.length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restOffset  :  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restOffset  :  rest.length;	  return    hasHitEOF?    entrySize    :    rest.length;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
549	[BUG]  [BUGGY]  return  entryOffset  -  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numRecords  +  length;	  return    entryOffset    -    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
550	[BUG]  [BUGGY]  return  restLimit  +(int)Math.rint(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLimit  +(int)Math.rint(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLimit  +(int)Math.rint(entryOffset,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
551	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainderLimit,  totalRead);	  return    entryOffset    +(int)Math.rint(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
552	[BUG]  [BUGGY]  return  totalRead  -  entrySize;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  totalRead  -  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  totalRead  -  entrySize;	  return    entrySize    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
553	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
554	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
555	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
556	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
557	[BUG]  [BUGGY]  if(!isReset)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!isReset)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!isReset)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
558	[BUG]  [BUGGY]  if(!shouldReset)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!shouldReset)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!shouldReset)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
559	[BUG]  [BUGGY]  while(!hasHitEOF)  {  count(entryOffset);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(!hasHitEOF)  {  count(entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(!hasHitEOF)  {  count(entryOffset);	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
560	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
561	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
562	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  return;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
563	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  entryLen  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  entryLen  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  entryLen  :  hasHitEOF;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
564	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  entryLen;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  entryLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  entryLen;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
565	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  entryLen  :  restLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  entryLen  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  entryLen  :  restLen;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
566	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entrySize,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entrySize,  entryOffset);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
567	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  restLen);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  restLen);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
568	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  offset);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  offset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  offset);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
569	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  length);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entryOffset,  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entryOffset,  length);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
570	[BUG]  [BUGGY]  return  hasHitEOF?  rest.length  :  entryLimit;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest.length  :  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest.length  :  entryLimit;	  return    hasHitEOF?    entryOffset    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
571	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  length  :  entryLimit;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  length  :  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  length  :  entryLimit;	  return    hasHitEOF?    entryOffset    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
572	[BUG]  [BUGGY]  return  offset  +  numToRead  +  length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  offset  +  numToRead  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  offset  +  numToRead  +  length;	  return    entryOffset    +    numToRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
573	[BUG]  [BUGGY]  return  entryOffset  /  numToRead  +  length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  numToRead  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  numToRead  +  length;	  return    entryOffset    +    numToRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
574	[BUG]  [BUGGY]  return  length  +  numToRead  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  length  +  numToRead  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  length  +  numToRead  +  entryOffset;	  return    entryOffset    +    numToRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
575	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
576	[BUG]  [BUGGY]  int  restLen  =  rest.length;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  int  restLen  =  rest.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	int  restLen  =  rest.length;	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
577	[BUG]  [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  restLen)  {  for(int  i  =  0,  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  restLen)  {  for(int  i  =  0,  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
578	[BUG]  [BUGGY]  return  entryLimit  +  length;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  length;	  return    entryLimit    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
579	[BUG]  [BUGGY]  return  entryLimit  +  offset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  offset;	  return    entryLimit    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
580	[BUG]  [BUGGY]  return  restLen  +  entrySize;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLen  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLen  +  entrySize;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
581	[BUG]  [BUGGY]  return  entrySize  +  length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +  length;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
582	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(offset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(offset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(offset  -  entryOffset));	  return    entryLimit    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
583	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(offset,  entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(offset,  entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(offset,  entryOffset  -  entryOffset));	  return    entryLimit    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
584	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  offset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  offset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(buf,  offset  -  entryOffset));	  return    entryLimit    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
585	[BUG]  [BUGGY]  return(numToRead  >  restLen)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  >  restLen)?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  >  restLen)?  0  :  entryOffset;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
586	[BUG]  [BUGGY]  return(numToRead  >=  restLimit)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  >=  restLimit)?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  >=  restLimit)?  0  :  entryOffset;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
587	[BUG]  [BUGGY]  return(numToRead  >=  restLen)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  >=  restLen)?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  >=  restLen)?  0  :  entryOffset;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
588	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  >=  0)?  -1  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  >=  0)?  -1  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
589	[BUG]  [BUGGY]  return(numToRead  >=  restLimit)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(numToRead  >=  restLimit)?  0  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(numToRead  >=  restLimit)?  0  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
590	[BUG]  [BUGGY]  return  restLen  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLen  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLen  -  entryOffset;	  return    entryOffset    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
591	[BUG]  [BUGGY]  return  entryOf  -  totalRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOf  -  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOf  -  totalRead;	  return    totalRead    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
592	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
593	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
594	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset!=  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
595	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
596	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
597	[BUG]  [BUGGY]  return  isRecord?  restLimit  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  restLimit  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  restLimit  :  hasHitEOF;	  return    restLimit;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
598	[BUG]  [BUGGY]  return  isRecord?  getHitEOF  :  restLimit;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  getHitEOF  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  getHitEOF  :  restLimit;	  return    restLimit;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
599	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offsetToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(offsetToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offsetToRead  -  entryOffset));	  return    entryOffset    +(int)Math.rint(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
600	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
601	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE);	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
602	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE);	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
603	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.DEFAULT_REJECT_SIZE);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.DEFAULT_REJECT_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.DEFAULT_REJECT_SIZE);	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
604	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
605	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
606	[BUG]  [BUGGY]  if(numToRead  >=  restLimit)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >=  restLimit)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >=  restLimit)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
607	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  totalRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  totalRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset,  totalRead  -  entryOffset));	  return    entryOffset    +(int)Math.rint(offset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
608	[BUG]  [BUGGY]  while(i.hasNext())  {  entrySize  +=  restLen.next();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entrySize  +=  restLen.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entrySize  +=  restLen.next();	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
609	[BUG]  [BUGGY]  while(i.hasNext())  {  entrySize  +=  numRecords.next();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entrySize  +=  numRecords.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entrySize  +=  numRecords.next();	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
610	[BUG]  [BUGGY]  while(i.hasNext())  {  entrySize  +=  i.next();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entrySize  +=  i.next();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entrySize  +=  i.next();  }	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
611	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.log(currentSize  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.log(currentSize  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.log(currentSize  -  entryOffset));	  return    entryOffset    +(long)Math.log(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
612	[BUG]  [BUGGY]  while(i.hasNext())  {  entryOffset  +=  restLen.next();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entryOffset  +=  restLen.next();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entryOffset  +=  restLen.next();	  while(i.hasNext())    {    entryOffset    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
613	[BUG]  [BUGGY]  while(i.hasNext())  {  entryOffset  +=  i.next();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entryOffset  +=  i.next();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entryOffset  +=  i.next();  }	  while(i.hasNext())    {    entryOffset    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
614	[BUG]  [BUGGY]  return  restOffset  -  entrySize;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restOffset  -  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restOffset  -  entrySize;	  return    entrySize    -    restOffset;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
615	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  bufferSize;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  bufferSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  bufferSize;	  return    entryOffset    +    numToRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
616	[BUG]  [BUGGY]  return  offset  +  numToRead  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  offset  +  numToRead  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  offset  +  numToRead  +  entryOffset;	  return    entryOffset    +    numToRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
617	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
618	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
619	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
620	[BUG]  [BUGGY]  return  i  +  entryOffset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  i  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  i  +  entryOffset;	  return    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
621	[BUG]  [BUGGY]  return  rest.length  -  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  rest.length  -  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  rest.length  -  entrySize;	  return    entrySize    -    rest.length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
622	[BUG]  [BUGGY]  return  restLimit  -  entrySize;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLimit  -  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLimit  -  entrySize;	  return    entrySize    -    rest.length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
623	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  1;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
624	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  count(entryLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  count(entryLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  count(entryLen);	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
625	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  entryOffset  +  entryLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  entryOffset  +  entryLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  entryOffset  +  entryLen;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
626	[BUG]  [BUGGY]  return  restLimit  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLimit  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLimit  +  1;	  return    entryLimit    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
627	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  restLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(buf,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(buf,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
628	[BUG]  [BUGGY]  return  restLen  +(int)Math.rint(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLen  +(int)Math.rint(entrySize,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLen  +(int)Math.rint(entrySize,  entryOffset);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
629	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  restLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
630	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  numToRead  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  numToRead  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset,  numToRead  -  entryOffset));	  return    entryOffset    +(int)Math.rint(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
631	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryLimit,  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryLimit,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryLimit,  entrySize);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
632	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entrySize,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entrySize,  entryOffset);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
633	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  offset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  offset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  offset);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
634	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  length);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
635	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  count);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  count);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  count);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
636	[BUG]  [BUGGY]  return  hasHitEOF?  rest.length  :  restLen;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest.length  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest.length  :  restLen;	  return    hasHitEOF?    entrySize    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
637	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(offset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(offset  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(offset  -  entryLimit));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryLimit));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
638	[BUG]  [BUGGY]  return  entrySize  /(int)Math.rint(entryOffset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /(int)Math.rint(entryOffset  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /(int)Math.rint(entryOffset  -  entryLimit));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryLimit));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
639	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(buf,  offset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(buf,  offset  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(buf,  offset  -  entryLimit));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryLimit));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
640	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  *  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.cos(entrySize  *  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(entrySize  *  entryOffset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
641	[BUG]  [BUGGY]  return  hasHitEOF?  body  :  restLimit;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  body  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  body  :  restLimit;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
642	[BUG]  [BUGGY]  return  hasHitEOF?  restLimit  :  hashitEOF;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLimit  :  hashitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLimit  :  hashitEOF;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
643	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(offset,  hasHitEOF);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
644	[BUG]  [BUGGY]  return  hasHitEOF  +(int)Math.rint(entryOffset,  entryLimit);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +(int)Math.rint(entryOffset,  entryLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +(int)Math.rint(entryOffset,  entryLimit);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
645	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(buf,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(buf,  hasHitEOF);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
646	[BUG]  [BUGGY]  return  hasHitEOF  +  1,  entryLen;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  1,  entryLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  1,  entryLen;	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
647	[BUG]  [BUGGY]  return  entryLen  +  1,  restLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  1,  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  restLen;	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
648	[BUG]  [BUGGY]  return  restLen  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  restLen  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  restLen  +  1,  hasHitEOF;	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
649	[BUG]  [BUGGY]  return  entryLen  +  1,  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  1,  hasHitEOF  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  hasHitEOF  +  1;	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
650	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  *  entryOffset));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.ceil(entrySize  *  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.ceil(entrySize  *  entryOffset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
651	[BUG]  [BUGGY]  return  entrySize  +(int)Math.ceil(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.ceil(entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.ceil(entryOffset  -  entryOffset));	  return    entryOffset    +(int)Math.ceil(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
652	[BUG]  [BUGGY]  return  entryOffset  +  1L;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  1L;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
653	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize,  totalRead);	  return    entryOffset    +(long)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
654	[BUG]  [BUGGY]  return  entryOffset  -  inputSize,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  inputSize,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  inputSize,  hasHitEOF;	  return    entryOffset    -    inputSize;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
655	[BUG]  [BUGGY]  return  entryOffset  -  inputSize  +  length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  inputSize  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  inputSize  +  length;	  return    entryOffset    -    inputSize;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
656	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  entrySize  :  restLen;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
657	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  entrySize  :  hasHitEOF;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
658	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  totalRead;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  entrySize  :  totalRead;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
659	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
660	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(entryLimit),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(entrySize,  count(entryLimit),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(entrySize,  count(entryLimit),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
661	[BUG]  [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
662	[BUG]  [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(shouldReset)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
663	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  ==  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
664	[BUG]  [BUGGY]  if(numToRead  >=  restLimit)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >=  restLimit)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >=  restLimit)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
665	[BUG]  [BUGGY]  return  entrySize  /(int)Math.rint(entryLimit  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  /(int)Math.rint(entryLimit  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  /(int)Math.rint(entryLimit  -  entryOffset));	  return    entrySize    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
666	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset  +  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset  +  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entryOffset  +  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
667	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(offset,  numToRead);	  return    entryOffset    +(int)Math.rint(offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
668	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
669	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  restLen)  {  for(int  i  =  0,  buffer.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
670	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  bufferSize  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  bufferSize  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  restLen)  {  for(int  i  =  0,  bufferSize  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
671	[BUG]  [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buffer,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buffer,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buffer,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
672	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  entrySize));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  entrySize));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryOffset  -  entrySize));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
673	[BUG]  [BUGGY]  return  entrySize  +(long)Math.log(entryOffset  -  entrySize));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(long)Math.log(entryOffset  -  entrySize));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(long)Math.log(entryOffset  -  entrySize));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
674	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  entrySize));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset  -  entrySize));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset  -  entrySize));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
675	[BUG]  [BUGGY]  return  offset  /  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  offset  /  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  offset  /  numToRead;	  return    entryOffset    /    numToRead;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
676	[BUG]  [BUGGY]  return  entryOffset  -(int)Math.rint(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -(int)Math.rint(numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -(int)Math.rint(numToRead,  hasHitEOF);	  return    entryOffset    +(int)Math.rint(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
677	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entrySize);	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
678	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryLimit);	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
679	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.log(offset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.log(offset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.log(offset  -  entryOffset));	  return    entryOffset    +(int)Math.log(numToRead    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
680	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  offset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.log(entryOffset  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryOffset  -  offset));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
681	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryOffset));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
682	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    ==    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
683	[BUG]  [BUGGY]  return  hasHitEOF?  remainderLen  :  restLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  remainderLen  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  remainderLen  :  restLen;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
684	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  HITE_EOF;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  HITE_EOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  HITE_EOF;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
685	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
686	[BUG]  [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  entryOffset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
687	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
688	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  restLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryOffset,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryOffset,  restLen);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
689	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryLimit,  offset,  hasHitEOF);	  return    entrySize    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
690	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  count(entryOffset),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  count(entryOffset),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryLimit,  count(entryOffset),  hasHitEOF);	  return    entrySize    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
691	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
692	[BUG]  [BUGGY]  return  buf  +  numToRead  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  buf  +  numToRead  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  buf  +  numToRead  +  entryOffset;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
693	[BUG]  [BUGGY]  return  offset  +  numToRead  +  buf.length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  offset  +  numToRead  +  buf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  offset  +  numToRead  +  buf.length;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
694	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  buffer.length;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  buffer.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  buffer.length;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
695	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
696	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
697	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  ==  0)  {  for(int  i  =  entryOffset;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
698	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
699	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  throw  new  IOException( " ");  }	  if(entryOffset    >=    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
700	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  count(numToRead),  hasHitEOF);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
701	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(hashEOF,  count(numToRead),  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(hashEOF,  count(numToRead),  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(hashEOF,  count(numToRead),  entrySize);	  return    entryOffset    +(int)Math.rint(entrySize,    count(numToRead),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
702	[BUG]  [BUGGY]  return  entryLimit  +(long)Math.rint(entryOffset  -  entrySize));  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(long)Math.rint(entryOffset  -  entrySize));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(long)Math.rint(entryOffset  -  entrySize));	  return    entryLimit    +(int)Math.rint(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
703	[BUG]  [BUGGY]  return  entrySize  +(int)Math.log(entryLimit  -  offset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.log(entryLimit  -  offset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.log(entryLimit  -  offset));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
704	[BUG]  [BUGGY]  return  entrySize  +(int)Math.cos(entryOffset  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.cos(entryOffset  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.cos(entryOffset  -  entryLimit));	  return    entrySize    +(int)Math.log(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
705	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  :  restLen  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  :  restLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  :  restLen  +  1;	  return    hasHitEOF?    entrySize    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
706	[BUG]  [BUGGY]  return  hasHitEOF?  body  :  restLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  body  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  body  :  restLen;	  return    hasHitEOF?    entrySize    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
707	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  hasHitEOF,  markLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(entryLimit,  hasHitEOF,  markLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(entryLimit,  hasHitEOF,  markLimit);	  return    entrySize    +(int)Math.rint(entryLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
708	[BUG]  [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(!hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(!hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
709	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
710	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
711	[BUG]  [BUGGY]  while(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(!hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
712	[BUG]  [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  entryOffset,  hasHitEOF  :  restLen;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  entryOffset,  hasHitEOF  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  System.arraycopy(buf,  offset,  entryOffset,  hasHitEOF  :  restLen;	  return    restLen;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
713	[BUG]  [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  entryOffset,  hasHitEOF  :  restLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  entryOffset,  hasHitEOF  :  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  System.arraycopy(buf,  offset,  entryOffset,  hasHitEOF  :  restLen);	  return    restLen;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
714	[BUG]  [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF  :  restLen);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF  :  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF  :  restLen);	  return    restLen;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
715	[BUG]  [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF  :  restLen;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF  :  restLen;	  return    restLen;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
716	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
717	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  i++)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    i++)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
718	[BUG]  [BUGGY]  int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
719	[BUG]  [BUGGY]  int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
720	[BUG]  [BUGGY]  int  entrySize  =  rest.length;  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  int  entrySize  =  rest.length;  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	int  entrySize  =  rest.length;  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buffer[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
721	[BUG]  [BUGGY]  int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	int  entrySize  >  restLen)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  System.arraycopy(buf,  offset,  buf[i]);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.arraycopy(buf,    offset,    buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
722	[BUG]  [BUGGY]  return  hasHitEOF?  getHitEOF  :  restLimit;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  getHitEOF  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  getHitEOF  :  restLimit;	  return    restLimit;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
723	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  remainingLen;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  remainingLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  remainingLen;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
724	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  :  entryLen  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  :  entryLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  :  entryLen  +  1;	  return    hasHitEOF?    entryOffset    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
725	[BUG]  [BUGGY]  return  entryOffset  +  offset  +  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  offset  +  numToRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  offset  +  numToRead  +  1;	  return    entryOffset    +    numToRead    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
726	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  hasHitEOF,  markLimit);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLimit,  hasHitEOF,  markLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainderLimit,  hasHitEOF,  markLimit);	  return    entryOffset    +(int)Math.rint(remainderLimit,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
727	[BUG]  [BUGGY]  return  hasHitEOF?  restriction  :  restLimit;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restriction  :  restLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restriction  :  restLimit;	  return    hasHitEOF?    entryLimit    :    restLimit;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
728	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
729	[BUG]  [BUGGY]  if(hashEOF  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hashEOF  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hashEOF  ||  hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
730	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
731	[BUG]  [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  break;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    break;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
732	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
733	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isRecorded;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isRecorded;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF  &&  isRecorded;	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
734	[BUG]  [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isEnabled(TarArchiveEntry.SIZE);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +  1,  hasHitEOF  &&  isEnabled(TarArchiveEntry.SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +  1,  hasHitEOF  &&  isEnabled(TarArchiveEntry.SIZE);	  return    entryLimit    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
735	[BUG]  [BUGGY]  return  entryOffset  /  resultLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  resultLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  /  resultLen;	  return    entryOffset    /    totalRead;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
736	[BUG]  [BUGGY]  return  hasHitEOF  +  entryOffset  -  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entryOffset  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  entryOffset  -  1;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
737	[BUG]  [BUGGY]  return  hasHitEOF  +  entrySize;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  +  entrySize;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
738	[BUG]  [BUGGY]  return  entryLen  *  numRecords;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  *  numRecords;	  return    entryLen    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
739	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(remainderLimit  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(remainderLimit  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(remainderLimit  -  entryOffset));	  return    entrySize    +(int)Math.rint(entryLimit    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
740	[BUG]  [BUGGY]  return  hasHitEOF?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  1  :  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  1  :  numToRead;	  return    numToRead;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
741	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  len;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  len;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  len;	  return    entryOffset    +    numToRead    +    offset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
742	[BUG]  [BUGGY]  return  hasHitEOF?  restLen  :  numRecords;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restLen  :  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restLen  :  numRecords;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
743	[BUG]  [BUGGY]  return  hasHitEOF?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  0  :  entryOffset;	  return    hasHitEOF?    restLen    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
744	[BUG]  [BUGGY]  return  entryOffset  -  numRecords  +  1,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numRecords  +  1,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  numRecords  +  1,  hasHitEOF;	  return    entryOffset    -    numRecords;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
745	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  system.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  system.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  system.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
746	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  --i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  --i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  --i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
747	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  system.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  system.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  system.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
748	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  --i)  {  buffer[i]  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  0,  len  =  rest.length;  i  <  len;  --i)  {  buffer[i]  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	for(int  i  =  0,  len  =  rest.length;  i  <  len;  --i)  {  buffer[i]  =  System.currentTimeMillis();  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
749	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BigInteger(numToRead);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BigInteger(numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  rest.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BigInteger(numToRead);  }	  if(entrySize    >    restLen)    {    for(int    i    =    0,    len    =    rest.length;    i    <    len;    ++i)    {    buffer[i]    =    System.currentTimeMillis();    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
750	[BUG]  [BUGGY]  return  entryOffset  -  startLimit;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  startLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -  startLimit;	  return    entryOffset    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
751	[BUG]  [BUGGY]  return  hasHitEOF?  rest  :  -1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  rest  :  -1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  rest  :  -1;	  return    hasHitEOF?    rest    :    entryLen;    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
752	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entry,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entry,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entry,  offset,  entryOffset);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
753	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entryLimit,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entryLimit,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entryLimit,  entryOffset);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
754	[BUG]  [BUGGY]  return  entryOffset  +  count(entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  count(entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  count(entrySize);	  return    entryOffset    +    totalRead;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
755	[BUG]  [BUGGY]  return  entrySize  -  inputOffset;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  inputOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  inputOffset;	  return    totalRead    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
756	[BUG]  [BUGGY]  while(i.hasNext())  {  entrySize  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  while(i.hasNext())  {  entrySize  +=  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	while(i.hasNext())  {  entrySize  +=  numToRead;	  while(i.hasNext())    {    entrySize    +=    i.next();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
757	[BUG]  [BUGGY]  return  i.getKey();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  i.getKey();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  i.getKey();	  return    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
758	[BUG]  [BUGGY]  return  i.recordSize;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  i.recordSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  i.recordSize;	  return    i;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
759	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  entrySize  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  entrySize  :  entrySize;	  return    hasHitEOF?    entryOffset    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
760	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(numToRead,  hasHitEOF);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
761	[BUG]  [BUGGY]  return  entryLimit  +(int)Math.rint(remainder,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(int)Math.rint(remainder,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(int)Math.rint(remainder,  hasHitEOF);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
762	[BUG]  [BUGGY]  return  entryLimit  +(long)Math.rint(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLimit  +(long)Math.rint(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLimit  +(long)Math.rint(entryOffset,  hasHitEOF);	  return    entryLimit    +(int)Math.rint(entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
763	[BUG]  [BUGGY]  return  hasHitEOF?  restOffset  :  entryOffset;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  restOffset  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  restOffset  :  entryOffset;	  return    hasHitEOF?    restLimit    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
764	[BUG]  [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
765	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset);  return;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
766	[BUG]  [BUGGY]  return  hasHitEOF?  true  :  hashitEOF;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  true  :  hashitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  true  :  hashitEOF;	  return    hasHitEOF?    true    :    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
767	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
768	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
769	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(offset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(offset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(offset);	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
770	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(remainderOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(remainderOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(remainderOffset);	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
771	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(numToRead);	  return    hasHitEOF    &&    isRecorded();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
772	[BUG]  [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
773	[BUG]  [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  isRecorded;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  +  1,  hasHitEOF  &&  isRecorded;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  +  1,  hasHitEOF  &&  isRecorded;	  return    entryLen    +    1,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
774	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(numToRead,  entrySize);	  return    entryOffset    +(int)Math.rint(entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
775	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  +  numToRead  :  entryLimit;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  +  numToRead  :  entryLimit;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  +  numToRead  :  entryLimit;	  return    hasHitEOF?    entryOffset    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
776	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  -  1  :  entrySize  -  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  -  1  :  entrySize  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  -  1  :  entrySize  -  1;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
777	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  -  1  :  restLen  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  -  1  :  restLen  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  -  1  :  restLen  -  1;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
778	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  -  1  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  -  1  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  -  1  :  entryOffset;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
779	[BUG]  [BUGGY]  return  hasHitEOF?  entrySize  -  1  :  length  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entrySize  -  1  :  length  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entrySize  -  1  :  length  -  1;	  return    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
780	[BUG]  [BUGGY]  return  hasHitEOF?  entryOffset  -  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryOffset  -  1  :  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryOffset  -  1  :  numToRead;	  return    entryOffset    -    1;    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
781	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);	  return    hasHitEOF    &&    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
782	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded  ||  isEnabled(Feature.QUOTE_FIELD_NAMES);	  return    hasHitEOF    &&    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
783	[BUG]  [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  1  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(hasHitEOF  &&  hasHitEOF)?  1  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
784	[BUG]  [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  0  :  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(hasHitEOF  &&  hasHitEOF)?  0  :  1;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
785	[BUG]  [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  -1  :  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(hasHitEOF  &&  hasHitEOF)?  -1  :  1;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
786	[BUG]  [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  0  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(hasHitEOF  &&  hasHitEOF)?  0  :  entryOffset;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
787	[BUG]  [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return(hasHitEOF  &&  hasHitEOF)?  -1  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return(hasHitEOF  &&  hasHitEOF)?  -1  :  0;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
788	[BUG]  [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
789	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
790	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
791	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
792	[BUG]  [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  >  0)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  continue;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    continue;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
793	[BUG]  [BUGGY]  return  entrySize  *  restLen;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  *  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  *  restLen;	  return    entrySize    +    restLen;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
794	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
795	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
796	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  ==  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedReader(buf[i]);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedReader(buf[i]);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
797	[BUG]  [BUGGY]  return  entryLen  -  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryLen  -  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryLen  -  entrySize;	  return    entrySize    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
798	[BUG]  [BUGGY]  return  entrySize  -  restLen  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  restLen  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  -  restLen  +  1;	  return    entrySize    -    restLen;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
799	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  restLen  +  buf.length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  restLen  +  buf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  numToRead  +  restLen  +  buf.length;	  return    entryOffset    +    numToRead    +    buf.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
800	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
801	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  0,  len  =  restLen;  i  <  len;  ++i)  {  buffer[i]  =  new  BufferedInputStream(remainders[i]);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    0,    len    =    entryOffset;    i    <    len;    ++i)    {    buffer[i]    =    new    BufferedInputStream(remainders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
802	[BUG]  [BUGGY]  return  hasHitEOF  &&  isISOControl(entry,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isISOControl(entry,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isISOControl(entry,  offset,  entryOffset);	  return    hasHitEOF    &&    isISOControl(entryOffset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
803	[BUG]  [BUGGY]  if(numToRead  <  restLen)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  <  restLen)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  <  restLen)  {  if(hasHitEOF)  {  throw  new  IOException( " ");  }	  if(entryOffset    ==    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
804	[BUG]  [BUGGY]  if(numToRead  <  restLen)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numToRead  <  restLen)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numToRead  <  restLen)  {  if(hasHitEOF)  {  throw  new  IOException( "Truncated  TAR  archive ");  }	  if(entryOffset    ==    0)    {    if(hasHitEOF)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
805	[BUG]  [BUGGY]  return  entrySize  +(int)Math.cos(entryOffset  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.cos(entryOffset  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.cos(entryOffset  -  entryOffset));	  return    entrySize    +(int)Math.log(entryOffset    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
806	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
807	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset  +  i);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset    +    i);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
808	[BUG]  [BUGGY]  return  entrySize  +(int)Math.rint(numToRead  -  entryLimit));  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +(int)Math.rint(numToRead  -  entryLimit));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  +(int)Math.rint(numToRead  -  entryLimit));	  return    entrySize    +(int)Math.rint(entryOffset    -    entryLimit));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
809	[BUG]  [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	hasHitEOF  =  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
810	[BUG]  [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
811	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  0,  entryOffset  +  1,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    0,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
812	[BUG]  [BUGGY]  return  entryOffset  +  offset  +  length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  offset  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +  offset  +  length;	  return    entryOffset    +    numToRead    +    length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
813	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF,  numToRead);	  return    entryOffset    +(int)Math.rint(remainder,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
814	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF,  markLimit);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF,  markLimit);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  hasHitEOF,  markLimit);	  return    entryOffset    +(int)Math.rint(remainder,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
815	[BUG]  [BUGGY]  return  hasHitEOF  ||  containsHitEOF;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  containsHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  containsHitEOF;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
816	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  cache.length);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  cache.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize,  cache.length);	  return    entryOffset    +(long)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
817	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entryLimit,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entryLimit,  hasHitEOF);	  return    entryOffset    +(long)Math.rint(entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
818	[BUG]  [BUGGY]  return  hasHitEOF  &&  entrySize  >  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entrySize  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  entrySize  >  0;	  return    hasHitEOF    &&    entryOffset    >    0;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
819	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.cos(remainderLen  -  entryOffset));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.cos(remainderLen  -  entryOffset));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.cos(remainderLen  -  entryOffset));	  return    entryOffset    +(int)Math.cos(entrySize    -    entryOffset));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
820	[BUG]  [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hasHitEOF)  {  System.arraycopy(buf,  offset,  buffer,  entryOffset,  hasHitEOF);  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buffer,    entryOffset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
821	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(numRecords  >  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
822	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entrySize  >=  0)  {  for(int  i  =  entryOffset;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
823	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  <  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
824	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(entryOffset  >=  0)  {  for(int  i  =  entrySize;  i  <  numRecords;  ++i)  {  buffer[i]  =  new  BufferedInputStream(buf,  offset,  hasHitEOF);  }	  if(entryOffset    ==    0)    {    for(int    i    =    entryOffset;    i    <    numRecords;    ++i)    {    buffer[i]    =    new    BufferedInputStream(buf,    offset,    hasHitEOF);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
825	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.SIZE);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.SIZE);	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
826	[BUG]  [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.HITE_EOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.HITE_EOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  ||  isRecorded  &&  isEnabled(TarArchiveEntry.HITE_EOF);	  return    hasHitEOF    ||    isRecorded;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
827	[BUG]  [BUGGY]  return  entrySize  *  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  *  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entrySize  *  1;	  return    entrySize    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
828	[BUG]  [BUGGY]  return  isRecord?  rest  :  this.entrySize;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  isRecord?  rest  :  this.entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  isRecord?  rest  :  this.entrySize;	  return    isRecord?    rest    :    entryLimit;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
829	[BUG]  [BUGGY]  return  hasHitEOF?  entryLen  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  entryLen  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  entryLen  :  0;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
830	[BUG]  [BUGGY]  return  hasHitEOF?  remaining  :  restLen;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  remaining  :  restLen;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF?  remaining  :  restLen;	  return    hasHitEOF?    entryLen    :    restLen;    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
831	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainder,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainder,  entrySize);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
832	[BUG]  [BUGGY]  return  entryOffset  -(int)Math.rint(entrySize,  restLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -(int)Math.rint(entrySize,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  -(int)Math.rint(entrySize,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
833	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(numToRead,  restLen);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(numToRead,  restLen);	  return    entryOffset    +(int)Math.rint(entrySize,    restLen);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
834	[BUG]  [BUGGY]  return  hasHitEOF  &&  isRecorded(entry,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  isRecorded(entry,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  hasHitEOF  &&  isRecorded(entry,  offset,  entrySize);	  return    hasHitEOF    &&    isRecorded(entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
835	[BUG]  [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(hashEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
836	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset,  totalRead);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
837	[BUG]  [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  return;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  return;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	if(!hasHitEOF)  {  System.arraycopy(buf,  offset,  buf,  entryOffset  +  1,  hasHitEOF);  return;  }	  if(!hasHitEOF)    {    System.arraycopy(buf,    offset,    buf,    entryOffset,    hasHitEOF);    return;    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
838	[BUG]  [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLen,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(int)Math.rint(remainderLen,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(int)Math.rint(remainderLen,  entrySize);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
839	[BUG]  [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +(long)Math.rint(entrySize,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	666	666	1	replace	return  entryOffset  +(long)Math.rint(entrySize,  entryOffset);	  return    entryOffset    +(int)Math.rint(entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
