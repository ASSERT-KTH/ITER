projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returntotalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entryLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.log(entryLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entryLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+buf.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?true:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnnumToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-totalRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-restOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.log(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.log(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.log(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.exp(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>entrySize){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset==0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>entrySize){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.ceil(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returni;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isReset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset>0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returntotalRead-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-inputSize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-count;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset==0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entrySize+=i.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entryOffset+=i.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-start;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buffer,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryLimit:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryLen:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainderLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(buf,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(buf,offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(buf,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest.length:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:rest.length+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest.length:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords.length-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/numRecords.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numRecords.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords.length+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords.length,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(long)Math.log(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.log(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryOffset-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.exp(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryOffset+entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/numToRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+totalRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+4;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead*1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+1L;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnnumToRead+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnnumToRead+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+buf.length+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+buf.length-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnbuf.length+numToRead+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+buf.length-offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+offset+buf.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+buf.length,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-count+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-count.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returncount-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-count*2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-start+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-count(entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-inputSize+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/inputSize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returninputSize-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>=0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords==0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){if(entryOffset==0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords!=0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>=0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded||hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded&&hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded||entryOffset<numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&entryOffset>0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.ceil(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.ceil(entrySize/entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.ceil(entrySize-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.ceil(entryLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.ceil(entrySize-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.ceil(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.ceil(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,offset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entryOffset-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-restLen+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numToRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-offset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-count(entrySize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-totalRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-totalRead+2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(long)Math.rint(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize/entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-restOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/restOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-restOffset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-restOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-restSize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666||!hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(!hasHitEOF){count(entryOffset+numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(!hasHitEOF){count(entryOffset+numToRead);entryOffset+=numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(!hasHitEOF){count(entryOffset+numToRead);entryOffset+=numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset==0){if(hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buffer,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset*entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit/entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-length+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-length-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,count(entrySize));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,entrySize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded(entryOffset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,0,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF&&hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF&&isISOControl(entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,count(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset!=0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,count(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen/1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,hasHitEOF&&isISOControl(entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,hasHitEOF&&hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+1:entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryLen:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restOffset:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:entryOffset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-1L;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>rest.length){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=remainder.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=buffer.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[0]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords!=0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>=0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restOffset:entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest.length:entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.exp(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.exp(entrySize/entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.exp(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.exp(entrySize-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.exp(entrySize*entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.exp(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.exp(entrySize-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+totalRead+numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+totalRead+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisReset&&hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isReset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecord;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisReset||hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666entryOffset+=i.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entryOffset+=rest.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entryOffset+=numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entryOffset+=n.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entryOffset+=numRecords.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset>=0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset==0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset!=0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset<0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||entryOffset>0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset<=0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(buf,entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entryOffset,numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(long)Math.rint(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entrySize,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/(int)Math.rint(entryLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(long)Math.rint(entryLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryLimit,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen-totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentries.length-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryStart-totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?remainderLimit:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?totalRead:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?result:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-remainingOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numRecords+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<restLen){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>entrySize){for(inti=0,len=restLen;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>entrySize){for(inti=0,len=restOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<entrySize){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=restLen;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(remainder,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(remainder,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<entrySize){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=entrySize){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>entryOffset){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entryLimit-entrySize));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryOffset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(long)Math.log(entryOffset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.log(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:entryOffset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666||hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?false:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?true:hasHitEOF+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?true:hasHitEOF+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.log(entrySize/entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.log(entrySize-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.log(entrySize-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(long)Math.log(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.log(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restOffset:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?totalRead:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?remainderLen:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryLen:restOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit-restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/totalRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset*totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/count;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/totalRead.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+offset+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset<isRecorded;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-1L;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,entrySize,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(key,entrySize,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,count(numToRead),totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,entrySize,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+length+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,offset,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,offset,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(numToRead,count(entrySize),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entryLimit,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit/1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returni.getValue();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded(entryOffset,entrySize,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded(i,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded(remainder,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,count(entrySize));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isISOControl(entryOffset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisISOControl(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,count(entrySize),entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,count(entryLimit,entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords!=0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){if(entryOffset==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666entrySize+=i.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entrySize+=rest.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entrySize+=n.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666entrySize+=rest.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded()&&hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isImmutableAndRecorded();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset+entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded(entryOffset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecorded(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,count(entrySize),entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:restOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryLimit:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-buf.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-offset+numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-offset+numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+entryOffset+numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+entryOffset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF/entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.cos(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(entrySize/entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(entrySize-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(entryLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.cos(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(entrySize-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+1L;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666arraycopy(buf,offset,buf,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}else{thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entrySize,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entryOffset,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entryOffset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(entryOffset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize/entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(long)Math.rint(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(long)Math.rint(entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,entrySize,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(numToRead,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,count(numToRead),restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,offset,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(buf,numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+length-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+length+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+length-offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(buf,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(buf,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numRecords+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numRecords,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666thrownewIOException("");
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead<restLen)?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666result.add(entryOffset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666result.add(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead>=0)?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead==0)?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numToRead,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numToRead+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(buf,entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset,numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset+entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.log(entrySize-numToRead));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(remainderLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(remainderLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainderLimit,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen/numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+numRecords+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+numRecords+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen-numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+numRecords+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+1:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryLimit:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit/numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+numRecords+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+numRecords+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+numRecords+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+numRecords,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-restOffset.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-rest.length+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-rest.length-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset*numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/buf.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||hasHitEOF+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||hasHitEOF+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.log(entrySize/entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.log(entrySize-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+numRecords+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+numRecords+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+numRecords+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize*numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(offset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(offset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(long)Math.rint(entryOffset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset/entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,0,entryOffset+1,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+1:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:entrySize+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+totalRead:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:count(entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=restOffset.length;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=restOffset;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=remainder.length;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,len=remaining.length;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(buf,entrySize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnlength-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,0,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(buf,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnstart-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-start.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-start+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLimit+(int)Math.rint(remainder,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,0,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:result;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(offset,entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returntotalRead-entryOffset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-totalRead+1L;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-remainingLen+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLen-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnnumToRead-restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnoffset-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset,count(entrySize),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!shouldReset){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666arraycopy(buf,offset,buffer,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset+1,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,0,entryOffset-hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,0,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returntotalRead/entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!shouldReset){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>=restLen){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=entrySize){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<restLimit){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>access){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=entrySize){for(inti=0,len=restOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=restOffset;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,0,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-(int)Math.rint(buf,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+1,entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+1,entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLimit+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entryLimit,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(numToRead,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?0:numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?numToRead:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?-1:numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:blockSize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:null;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:result;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){for(inti=offset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnnumToRead-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnoffset-numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returncount-numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restOffset:rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numRecords+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLimit+(int)Math.rint(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainderLimit,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returntotalRead-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){for(inti=offset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){for(inti=offset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!isReset){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!shouldReset){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(!hasHitEOF){count(entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset+1,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666System.arraycopy(buf,offset,buf,0,entryOffset+1,hasHitEOF);return;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+entryLen:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+entryLen:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entrySize,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entryOffset,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest.length:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+length:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnoffset+numToRead+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/numToRead+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnlength+numToRead+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666intrestLen=rest.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>restLen){for(inti=0,buffer.length;i<len;++i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+offset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLen+entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(offset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(offset,entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(buf,offset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead>restLen)?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead>=restLimit)?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead>=restLen)?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead>=0)?-1:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(numToRead>=restLimit)?0:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLen-entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOf-totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset!=0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?restLimit:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?getHitEOF:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offsetToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&isEnabled(TarArchiveEntry.DEFAULT_REJECT_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666hasHitEOF=System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>=restLimit){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset,totalRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entrySize+=restLen.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entrySize+=numRecords.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entrySize+=i.next();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.log(currentSize-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entryOffset+=restLen.next();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entryOffset+=i.next();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestOffset-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+bufferSize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnoffset+numToRead+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!shouldReset){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returni+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrest.length-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLimit-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:count(entryLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:entryOffset+entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLimit+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(buf,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLen+(int)Math.rint(entrySize,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset,numToRead-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryLimit,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entrySize,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,count);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest.length:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(offset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/(int)Math.rint(entryOffset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(buf,offset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(entrySize*entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?body:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLimit:hashitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+(int)Math.rint(entryOffset,entryLimit);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(buf,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+1,entryLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnrestLen+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,hasHitEOF+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.ceil(entrySize*entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.ceil(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+1L;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize,totalRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-inputSize,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-inputSize+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+entrySize:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+entrySize:hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+entrySize:totalRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(entrySize,count(entryLimit),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!shouldReset){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(shouldReset){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead==0){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>=restLimit){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize/(int)Math.rint(entryLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entryOffset+0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(offset,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>restLen){for(inti=0,buffer.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>restLen){for(inti=0,bufferSize=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buffer,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryOffset-entrySize));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(long)Math.log(entryOffset-entrySize));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset-entrySize));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnoffset/numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-(int)Math.rint(numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryLimit);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.log(offset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryOffset-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?remainderLen:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:HITE_EOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=entryOffset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){for(inti=offset;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryOffset,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryLimit,offset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryLimit,count(entryOffset),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=0,len=entryOffset;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnbuf+numToRead+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnoffset+numToRead+buf.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+buffer.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>=0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){for(inti=offset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords==0){for(inti=entryOffset;i<len;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,count(numToRead),hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(hashEOF,count(numToRead),entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(long)Math.rint(entryOffset-entrySize));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.log(entryLimit-offset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.cos(entryOffset-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize:restLen+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?body:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(entryLimit,hasHitEOF,markLimit);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(!hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF&&hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF||hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?System.arraycopy(buf,offset,entryOffset,hasHitEOF:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?System.arraycopy(buf,offset,entryOffset,hasHitEOF:restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF:restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){for(inti=entrySize;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){for(inti=entrySize;i<numRecords;i++){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666intentrySize>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666intentrySize>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666intentrySize=rest.length;for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buffer[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666intentrySize>restLen){for(inti=0,len=rest.length;i<len;++i){buffer[i]=System.arraycopy(buf,offset,buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?getHitEOF:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:remainingLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset:entryLen+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+offset+numToRead+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainderLimit,hasHitEOF,markLimit);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restriction:restLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666hasHitEOF=System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hashEOF||hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset+1,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hashEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);break;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF&&isRecorded;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+1,hasHitEOF&&isEnabled(TarArchiveEntry.SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset/resultLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+entryOffset-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF+entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen*numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(remainderLimit-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?1:numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+len;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restLen:numRecords;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-numRecords+1,hasHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=0,len=rest.length;i<len;++i){buffer[i]=system.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=0,len=rest.length;i<len;--i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=rest.length;i<len;++i){buffer[i]=system.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666for(inti=0,len=rest.length;i<len;--i){buffer[i]=System.currentTimeMillis();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=0,len=rest.length;i<len;++i){buffer[i]=newBigInteger(numToRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-startLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?rest:-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entry,offset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entryLimit,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+count(entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-inputOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666while(i.hasNext()){entrySize+=numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returni.getKey();
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returni.recordSize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+entrySize:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(numToRead,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(int)Math.rint(remainder,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLimit+(long)Math.rint(entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?restOffset:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hashEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?true:hashitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>entryOffset){for(inti=0,len=buf.length;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(offset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(remainderOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,hasHitEOF&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen+1,hasHitEOF&&isRecorded;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(numToRead,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset+numToRead:entryLimit;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset-1:entrySize-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize-1:restLen-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize-1:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entrySize-1:length-1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryOffset-1:numToRead;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded||isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(hasHitEOF&&hasHitEOF)?1:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(hasHitEOF&&hasHitEOF)?0:1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(hasHitEOF&&hasHitEOF)?-1:1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(hasHitEOF&&hasHitEOF)?0:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666return(hasHitEOF&&hasHitEOF)?-1:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hashEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset+1,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,totalRead);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,totalRead);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead>0){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);continue;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize*restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize==0){for(inti=offset;i<numRecords;++i){buffer[i]=newBufferedReader(buf[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryLen-entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize-restLen+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+numToRead+restLen+buf.length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<entrySize){for(inti=0,len=restLen;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=entrySize){for(inti=0,len=restLen;i<len;++i){buffer[i]=newBufferedInputStream(remainders[i]);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isISOControl(entry,offset,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead<restLen){if(hasHitEOF){thrownewIOException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numToRead<restLen){if(hasHitEOF){thrownewIOException("TruncatedTARarchive");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.cos(entryOffset-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){for(inti=entrySize;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){for(inti=offset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset+i);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize+(int)Math.rint(numToRead-entryLimit));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666hasHitEOF=System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hashEOF){System.arraycopy(buf,offset,buf,0,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buf,0,entryOffset+1,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+offset+length;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,hasHitEOF,numToRead);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,hasHitEOF,markLimit);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||containsHitEOF;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize,cache.length);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entryLimit,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&entrySize>0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.cos(remainderLen-entryOffset));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hasHitEOF){System.arraycopy(buf,offset,buffer,entryOffset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(numRecords>0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entrySize>=0){for(inti=entryOffset;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset<0){for(inti=entrySize;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(entryOffset>=0){for(inti=entrySize;i<numRecords;++i){buffer[i]=newBufferedInputStream(buf,offset,hasHitEOF);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&isEnabled(TarArchiveEntry.SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF||isRecorded&&isEnabled(TarArchiveEntry.HITE_EOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentrySize*1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnisRecord?rest:this.entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?entryLen:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF?remaining:restLen;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainder,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset-(int)Math.rint(entrySize,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(numToRead,restLen);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnhasHitEOF&&isRecorded(entry,offset,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(hashEOF){System.arraycopy(buf,offset,buf,entryOffset,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset,totalRead);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666if(!hasHitEOF){System.arraycopy(buf,offset,buf,entryOffset+1,hasHitEOF);return;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(int)Math.rint(remainderLen,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java666returnentryOffset+(long)Math.rint(entrySize,entryOffset);
