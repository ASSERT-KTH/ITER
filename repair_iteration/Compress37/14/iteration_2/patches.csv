bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders(i);	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
2	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders().getInputStream();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders().getInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders().getInputStream();	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
3	[BUG]  [BUGGY]  InputStream  coll  =  getPaxHeaders();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getPaxHeaders();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getPaxHeaders();	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
4	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeadersInputStream();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeadersInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeadersInputStream();	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
5	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders().get(i);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders().get(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders().get(i);	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
6	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i.getRecordSize());  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i.getRecordSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders(i.getRecordSize());	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
7	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
8	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
9	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataset,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataset,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
10	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  hasHitEOF,  coll);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  hasHitEOF,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  hasHitEOF,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
11	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  size);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
12	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  read);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
13	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
14	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
15	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
16	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  coll);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
17	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  result);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  result);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  result);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
18	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.size());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
19	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.size());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
20	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.size());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
21	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  4);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.size());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
22	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  +  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.size());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
23	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  3);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  3);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size()  -  3);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.size());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
24	[BUG]  [BUGGY]  InputStream  coll  =  is.read();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  is.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  is.read();	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  InputStream  coll  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readInt();	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  InputStream  coll  =  i.read(remainder);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.read(remainder);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.read(remainder);	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  InputStream  coll  =  i.readUTF();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readUTF();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readUTF();	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size(),  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size(),  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    coll);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
29	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    coll);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
30	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    coll);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
31	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll.size());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    coll);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
32	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
33	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
34	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.keySet(),  false);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.keySet(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.keySet(),  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
35	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.values());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values()    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values()    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
38	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
39	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
40	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
41	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
42	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
43	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.size());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.recordSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.recordSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll.recordSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  coll);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet()  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.valueSet());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
49	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueArray());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueArray());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueArray());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.valueSet());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
50	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  coll);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.valueSet());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
51	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
52	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
53	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  width);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  width);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  width);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
54	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
55	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  *  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  *  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  *  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  +  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  1,  coll.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  1,  coll.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length  -  1,  coll.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
62	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
63	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
64	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
65	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
66	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
67	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  false);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
68	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
69	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
70	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
72	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  InputStream  coll  =  is.readInput();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  is.readInput();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  is.readInput();	  InputStream    coll    =    i.readInput();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  InputStream  coll  =  i.getInputStream();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.getInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.getInputStream();	  InputStream    coll    =    i.readInput();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  InputStream  coll  =  i.readFully();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readFully();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readFully();	  InputStream    coll    =    i.readInput();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  InputStream  coll  =  i.readOut();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readOut();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readOut();	  InputStream    coll    =    i.readInput();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  0);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
78	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders)+  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders)+  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders)+  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
79	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
80	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  null);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  null);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
81	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
82	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
83	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
84	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
85	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
86	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
87	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
88	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
89	[BUG]  [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setLength(0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setLength(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	(TarArchiveEntry  <  K,  V>)i).setLength(0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
90	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEnd(0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEnd(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setEnd(0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
91	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).reset();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).reset();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).reset();	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
92	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setMask(0);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setMask(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setMask(0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
93	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setPaint(0);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setPaint(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setPaint(0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
94	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setMask(1);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setMask(1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setMask(1);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
95	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true,  true);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
96	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  false);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
97	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  null);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  null);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
98	[BUG]  [BUGGY]  InputStream  coll  =  is.readInputStream();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  is.readInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  is.readInputStream();	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(true);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readInputStream(true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readInputStream(true);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(IResource.DEFAULT_KEY);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readInputStream(IResource.DEFAULT_KEY);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readInputStream(IResource.DEFAULT_KEY);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
101	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    -    4);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
102	[BUG]  [BUGGY]  Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    -    4);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
103	[BUG]  [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    -    4);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
104	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
105	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
106	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
107	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  true);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
108	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  size);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
109	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  width);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  width);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  width);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
110	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
111	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.keySet());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.keySet());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.keySet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
112	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
113	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    -    2);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
114	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
115	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
116	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
117	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  /  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  /  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  /  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    *    2);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
118	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size();	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    *    2);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
119	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
120	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
121	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  +  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
122	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords)+  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords)+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
123	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  encoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
124	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  value);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  value);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  value);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
125	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  size);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
126	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  value);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  value);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  value);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
127	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value,  coll);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
128	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
129	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
130	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0,  length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0,  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  0,  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
131	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
132	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  width);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  width);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  width);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
133	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
134	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  null);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  null);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
135	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null,  coll);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
136	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
137	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
138	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
139	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  +  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
140	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  3);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  3);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  3);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
141	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  4);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
142	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  coll);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
143	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1  +  length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1  +  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1  +  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
144	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  4);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
145	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
146	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
147	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  *  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  *  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  *  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
148	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  -  2);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
149	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  1,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  1,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  1,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
150	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  2,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  2,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  2,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
151	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.bytes);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.bytes);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.bytes);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
152	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getCharset());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getCharset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getCharset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
153	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.available);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.available);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.available);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
154	[BUG]  [BUGGY]  Integer  i  =  coll.readInt()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.readInt()  +  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.readInt()  +  1;	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
155	[BUG]  [BUGGY]  Integer  i  =  this.coll.readInt();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  this.coll.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  this.coll.readInt();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
156	[BUG]  [BUGGY]  Integer  i  =  coll.intValue();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.intValue();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.intValue();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
157	[BUG]  [BUGGY]  Integer  i  =  col.readInt();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  col.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  col.readInt();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
158	[BUG]  [BUGGY]  Integer  i  =  coll.getInt();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.getInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.getInt();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
159	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek()  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.peek());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
160	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek(),  coll);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek(),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.peek());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
161	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
162	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
163	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  -  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
164	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  +  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
165	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
166	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
167	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
168	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  0,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  0,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  0,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
169	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  +  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
170	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  4);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
171	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.hasNext());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.hasNext());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.hasNext());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
172	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.next());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.next());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.next());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
173	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.next());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.next());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.next());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
174	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  col.hasNext());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  col.hasNext());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  col.hasNext());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
175	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.remaining());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.remaining());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.remaining());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
176	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.iterator());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.iterator());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.iterator());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.entrySet());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
177	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.entrySet(),  coll);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.entrySet(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.entrySet(),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.entrySet());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
178	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
179	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
180	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
181	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
182	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
183	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
184	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
185	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
186	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
187	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  +  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
188	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  false);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    true);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
189	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.values(),  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.values(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(GlobalPaxHeaders.values(),  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    true);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
190	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  null);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  null);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    true);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
191	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(headers);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
192	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(headers);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
193	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(headers);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
194	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(headers);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
195	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(headers);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
196	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(result,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(result,  globalPaxHeaders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(result,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    result);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
197	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  result.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  result.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  result.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    result);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
198	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  4);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
199	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  3);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  3);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  3);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
200	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.getIntValue()  +  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.getIntValue()  +  1;	  Integer    i    =    coll.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
201	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue()  *  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.getIntValue()  *  2;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.getIntValue()  *  2;	  Integer    i    =    coll.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
202	[BUG]  [BUGGY]  Integer  i  =  this.coll.getIntValue();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  this.coll.getIntValue();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  this.coll.getIntValue();	  Integer    i    =    coll.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
203	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue(0);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.getIntValue(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.getIntValue(0);	  Integer    i    =    coll.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
204	[BUG]  [BUGGY]  Integer  i  =  col.getIntValue();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  col.getIntValue();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  col.getIntValue();	  Integer    i    =    coll.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
205	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
206	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  dataArea,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  dataArea,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  dataArea,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
207	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  size);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
208	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  hasHitEOF,  coll);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  hasHitEOF,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  hasHitEOF,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
209	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  result);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  result);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  result);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
210	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  is);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  is);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  is);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
211	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
212	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
213	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
214	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  restLen  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  restLen  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  restLen  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
215	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  this.recordSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  this.recordSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
216	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
217	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
218	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
219	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
220	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
221	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
222	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
223	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  16);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  16);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  16);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    3);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
224	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
225	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
226	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
227	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
228	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
229	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
230	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
231	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
232	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getSize());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getSize());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
233	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getRecordSize());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getRecordSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getRecordSize());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
234	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
235	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  size);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
236	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
237	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
238	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  len);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  len);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  len);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
239	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  1,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  1,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  1,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
240	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  1,  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  1,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  1,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
241	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  2,  true);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  2,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  2,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
242	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  4,  true);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  4,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  4,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size(),    true);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
243	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream(read);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
244	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayOutputStream();	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
245	[BUG]  [BUGGY]  final  ByteArrayInputStream  coll  =  new  ByteArrayInputStream();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  ByteArrayInputStream  coll  =  new  ByteArrayInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  ByteArrayInputStream  coll  =  new  ByteArrayInputStream();	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
246	[BUG]  [BUGGY]  final  InputStream  coll  =  new  ByteArrayInputStream();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  InputStream  coll  =  new  ByteArrayInputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  InputStream  coll  =  new  ByteArrayInputStream();	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
247	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(read);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(read);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
248	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(0);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream(0);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
249	[BUG]  [BUGGY]  Integer  ch  =  coll.readInt()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.readInt()  +  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.readInt()  +  1;	  Integer    ch    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
250	[BUG]  [BUGGY]  Integer  ch  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  i.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  i.readInt();	  Integer    ch    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
251	[BUG]  [BUGGY]  Integer  ch  =  col.readInt();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  col.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  col.readInt();	  Integer    ch    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
252	[BUG]  [BUGGY]  Integer  ch  =  coll.getInt();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.getInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.getInt();	  Integer    ch    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
253	[BUG]  [BUGGY]  Integer  ch  =  coll.int();  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.int();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.int();	  Integer    ch    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
254	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  encoding,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  encoding,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
255	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  zipEncoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
256	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding,  hasHitEOF,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding,  hasHitEOF,  globalPaxHeaders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding,  hasHitEOF,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
257	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(encoding,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
258	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
259	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  stringEncoding);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  stringEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  stringEncoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
260	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
261	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
262	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
263	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  3);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  3);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  3);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
264	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  4);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size()  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
265	[BUG]  [BUGGY]  ch  =  coll.read(i);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  coll.read(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  coll.read(i);	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
266	[BUG]  [BUGGY]  ch  =  i.read();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  i.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  i.read();	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
267	[BUG]  [BUGGY]  ch  =  coll.read(0);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  coll.read(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  coll.read(0);	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
268	[BUG]  [BUGGY]  ch  =  coll.read()  +  1;  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  coll.read()  +  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  coll.read()  +  1;	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
269	[BUG]  [BUGGY]  ch  =  col.read();  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  col.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  col.read();	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
270	[BUG]  [BUGGY]  ch  =  coll.readInt();  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  coll.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  coll.readInt();	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
271	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
272	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
273	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
274	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
275	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  null;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
276	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
277	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
278	[BUG]  [BUGGY]  InputStream  coll  =  is.inputStream();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  is.inputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  is.inputStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
279	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  BufferedInputStream(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  BufferedInputStream(i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
280	[BUG]  [BUGGY]  InputStream  coll  =  IOUtilities.inputStream(i);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  IOUtilities.inputStream(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  IOUtilities.inputStream(i);	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
281	[BUG]  [BUGGY]  InputStream  coll  =  TarArchiveEntry.inputStream();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  TarArchiveEntry.inputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  TarArchiveEntry.inputStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
282	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayOutputStream(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayOutputStream(i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
283	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  length  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  length  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
284	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  width);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  width);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  width);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    length);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
285	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  read)+  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  read)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  read)+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
286	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  +  read)+  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  +  read)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  +  read)+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
287	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  2;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  2;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
288	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())/  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())/  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())/  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
289	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  0;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  0;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
290	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  SMALL_BUFFER_SIZE;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  SMALL_BUFFER_SIZE;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
291	[BUG]  [BUGGY]  int  len  =  i.read(remainder);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  int  len  =  i.read(remainder);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.read(remainder);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
292	[BUG]  [BUGGY]  int  len  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  int  len  =  i.read(remainders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.read(remainders);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
293	[BUG]  [BUGGY]  char  len  =  i.read();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  char  len  =  i.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	char  len  =  i.read();	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
294	[BUG]  [BUGGY]  Integer  len  =  i.read();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  len  =  i.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  len  =  i.read();	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
295	[BUG]  [BUGGY]  int  len  =  i.read(remainingSize);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  int  len  =  i.read(remainingSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.read(remainingSize);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
296	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
297	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
298	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
299	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
300	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
301	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
302	[BUG]  [BUGGY]  Integer  ch  =  coll.read(i);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.read(i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.read(i);	  Integer    ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
303	[BUG]  [BUGGY]  Integer  ch  =  coll.read(this);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.read(this);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.read(this);	  Integer    ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
304	[BUG]  [BUGGY]  Integer  ch  =  coll.read(0,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.read(0,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.read(0,  0);	  Integer    ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
305	[BUG]  [BUGGY]  Integer  ch  =  i.read();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  i.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  i.read();	  Integer    ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
306	[BUG]  [BUGGY]  Integer  ch  =  coll.read(0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.read(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.read(0);	  Integer    ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
307	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  false);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
308	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  null);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  null);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
309	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
310	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.clone());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.clone());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.clone());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders!=    null?    null    :    globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
311	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders!=    null?    null    :    globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
312	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders!=    null?    null    :    globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
313	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders!=    null?    null    :    globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
314	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    coll);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
315	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.recordSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.recordSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.recordSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    coll);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
316	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.size());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    coll);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
317	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.inputEnd);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.inputEnd);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll.inputEnd);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    coll);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
318	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.height);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
319	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.height);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
320	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.width);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.width);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.width);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.height);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
321	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeight());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeight());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeight());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.height);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
322	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  +  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  +  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.height);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
323	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i)+  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i)+  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i)+  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
324	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  coll);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
325	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
326	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
327	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i  +  1));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i  +  1));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i  +  1));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
328	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(ch));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(ch));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(ch));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
329	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  dataArea,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
330	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  hasHitEOF,  coll);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  hasHitEOF,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  hasHitEOF,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
331	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
332	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  result);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  result);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  result);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
333	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  is);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  is);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  is);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
334	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
335	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  false);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  false);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
336	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
337	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  true);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  true);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
338	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false,  0);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
339	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(),  coll);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
340	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray()  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
341	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(),  col);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(),  col);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(),  col);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
342	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setEncoding(zipEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
343	[BUG]  [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setEncoding(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	(TarArchiveEntry  <  K,  V>)i).setEncoding(zipEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
344	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRawEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setRawEncoding(encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setRawEncoding(encoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
345	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(urlEncoding);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(urlEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setEncoding(urlEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
346	[BUG]  [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  (TarArchiveEntry  <  K,  V>)i).setEncoding(encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	(TarArchiveEntry  <  K,  V>)i).setEncoding(encoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
347	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(codeBuffer);  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(codeBuffer);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setEncoding(codeBuffer);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
348	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.toArray());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.toArray());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.toArray());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
349	[BUG]  [BUGGY]  InputStream  coll  =  i.readOutputStream();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readOutputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readOutputStream();	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
350	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setSize(0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setSize(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setSize(0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
351	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setCharacters(0,  0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setCharacters(0,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setCharacters(0,  0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
352	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setCharacters(0);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setCharacters(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setCharacters(0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
353	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
354	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
355	[BUG]  [BUGGY]  Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values()    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
356	[BUG]  [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values()    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
357	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(new  HashMap  <  String,  String>()));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(new  HashMap  <  String,  String>()));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(new  HashMap  <  String,  String>()));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.entrySet());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
358	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  0,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  0,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
359	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
360	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  dataArea,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  dataArea,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  dataArea,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
361	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  maxSize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  maxSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  maxSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
362	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  2,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  2,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  2,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
363	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  1,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  1,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  1,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
364	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globals);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globals);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globals);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(headers);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
365	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  value);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  value);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet(),  value);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.valueSet());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
366	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  8);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  8);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  8);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    4);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
367	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKeySet(),  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKeySet(),  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKeySet(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
368	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKey(),  true);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKey(),  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKey(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    true);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
369	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  SMALL_BUFFER_SIZE);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  SMALL_BUFFER_SIZE);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
370	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeaders());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeaders());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeaders());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
371	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.readSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.readSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.readSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
372	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.hasNext()  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.hasNext()  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.hasNext()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
373	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.reset());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.reset());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.reset());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
374	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
375	[BUG]  [BUGGY]  if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
376	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
377	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  totalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  totalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  totalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
378	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.values());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders  ==  null?  null  :  globalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders!=    null?    null    :    globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
379	[BUG]  [BUGGY]  Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
380	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKeySet());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKeySet());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.getKeySet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
381	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
382	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  encoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
383	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  encoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  encoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
384	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length,  encoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length,  encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length,  encoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
385	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  *  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
386	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
387	[BUG]  [BUGGY]  InputStream  coll  =  i.readOutput();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readOutput();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readOutput();	  InputStream    coll    =    i.readInput();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
388	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length,  0,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length,  0,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length,  0,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
389	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  4);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders.length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
390	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
391	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.records);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.records);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.records);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
392	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.lengthRecords);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.lengthRecords);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.lengthRecords);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
393	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    2);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
394	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  restLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  restLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
395	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  globalPaxHeaders.size());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
396	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
397	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
398	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  dataArea);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  dataArea);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  dataArea);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
399	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setTarEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setTarEncoding(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setTarEncoding(zipEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
400	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setZipEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setZipEncoding(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setZipEncoding(zipEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
401	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setCurrentEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setCurrentEncoding(encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setCurrentEncoding(encoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
402	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setPaint(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setPaint(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setPaint(zipEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
403	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setZipEncoding(encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setZipEncoding(encoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
404	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setPadding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setPadding(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setPadding(zipEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
405	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(headers));  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(headers));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(headers));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
406	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  false);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
407	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
408	[BUG]  [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
409	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.get(ch)!=  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.get(ch)!=  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.get(ch)!=  0)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
410	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  coll);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    coll);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
411	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    coll);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
412	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  4);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
413	[BUG]  [BUGGY]  int  len  =  i.read(remainderLen);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  int  len  =  i.read(remainderLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.read(remainderLen);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
414	[BUG]  [BUGGY]  int  len  =  i.read(remainderSize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  int  len  =  i.read(remainderSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.read(remainderSize);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
415	[BUG]  [BUGGY]  int  len  =  i.read(remainderLimit);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  int  len  =  i.read(remainderLimit);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.read(remainderLimit);	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
416	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(length);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream(length);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
417	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(in.read());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(in.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream(in.read());	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
418	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
419	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
420	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  data);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  data);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  data);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
421	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(null);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders(null);	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
422	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(headers);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders(headers);	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
423	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i.next());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i.next());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders(i.next());	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
424	[BUG]  [BUGGY]  Integer  ch  =  IOUtils.readInt(coll);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  IOUtils.readInt(coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  IOUtils.readInt(coll);	  Integer    ch    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
425	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.values(),  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.values(),  restLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.values(),  restLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
426	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  available);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  available);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  available);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
427	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
428	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
429	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  maxSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  maxSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  maxSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
430	[BUG]  [BUGGY]  InputStream  coll  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.read(remainders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.read(remainders);	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
431	[BUG]  [BUGGY]  InputStream  coll  =  i.in.read();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.in.read();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.in.read();	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
432	[BUG]  [BUGGY]  InputStream  coll  =  i.readIn();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readIn();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readIn();	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
433	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
434	[BUG]  [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i  ==  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
435	[BUG]  [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
436	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
437	[BUG]  [BUGGY]  if(i!=  null)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  while(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
438	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  parameters);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  parameters);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  parameters);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
439	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  key);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  key);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  key);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
440	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
441	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i).headers);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i).headers);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i).headers);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
442	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i),  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
443	[BUG]  [BUGGY]  InputStream  coll  =  this.i.inputStream();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  this.i.inputStream();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  this.i.inputStream();	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
444	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  resultLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  resultLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  resultLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    result);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
445	[BUG]  [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
446	[BUG]  [BUGGY]  if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
447	[BUG]  [BUGGY]  if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i!=  null)  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
448	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
449	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    *    2);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
450	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2  +  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size()    *    2);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
451	[BUG]  [BUGGY]  Integer  i  =  str.readInt();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  str.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  str.readInt();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
452	[BUG]  [BUGGY]  Integer  i  =  coll.readInt()  *  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.readInt()  *  2;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.readInt()  *  2;	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
453	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  col);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  col);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  col);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
454	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  4;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  4;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  4;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
455	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  -  1)+  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  -  1)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  -  1)+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
456	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  hasHitEOF,  coll);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  hasHitEOF,  coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  hasHitEOF,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    coll);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
457	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    coll);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
458	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  coll.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  coll.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  coll.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0,    0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
459	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  3);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  3);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  3);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
460	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
461	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
462	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
463	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
464	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValu	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
465	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
466	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers)+  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers)+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
467	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers  -  1);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
468	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers).reset();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers).reset();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers).reset();	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
469	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size(),  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size(),  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
470	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.keySet(),  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.keySet(),  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.keySet(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    true);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
471	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
472	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  4);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  4);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    restLen);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
473	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height,  hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    coll);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
474	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.readBytes());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.readBytes());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.readBytes());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
475	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeaderSize());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeaderSize());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.getHeaderSize());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.read);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
476	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  *  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  *  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size()  *  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.size());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
477	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll).reset();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll).reset();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll).reset();	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    coll);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
478	[BUG]  [BUGGY]  InputStream  coll  =  getLocalFileHeaders();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getLocalFileHeaders();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getLocalFileHeaders();	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
479	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i.getModule());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders(i.getModule());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders(i.getModule());	  InputStream    coll    =    getGlobalPaxHeaders();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
480	[BUG]  [BUGGY]  Integer  ch  =  IOUtils.readFully(coll);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  IOUtils.readFully(coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  IOUtils.readFully(coll);	  Integer    ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
481	[BUG]  [BUGGY]  Integer  ch  =  coll.read(0,  i);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  coll.read(0,  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.read(0,  i);	  Integer    ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
482	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  256);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  256);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  256);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    4);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
483	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())-  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())-  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())-  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values())+    1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
484	[BUG]  [BUGGY]  InputStream  coll  =  i.read(remainderLen);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.read(remainderLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.read(remainderLen);	  InputStream    coll    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
485	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  -  2);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  -  2);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.height);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
486	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.valueSet());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.valueSet());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.valueSet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.valueSet());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
487	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  encoding);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  encoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
488	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
489	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding,  encoding);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding,  encoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  zipEncoding,  encoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF,    encoding);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
490	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  true,  false);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  true,  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  true,  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
491	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  this.headerSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  this.headerSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  this.headerSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    value);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
492	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.values());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders!=    null?    null    :    globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
493	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.toArray(headers));  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.toArray(headers));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.toArray(headers));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders!=    null?    null    :    globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
494	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  false);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    true);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
495	[BUG]  [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  true);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values(),    true);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
496	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
497	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length)+  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length)+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
498	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.entrySet());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.entrySet());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.entrySet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.entrySet());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
499	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  this.hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  this.hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  this.hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    dataArea,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
500	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.values());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.values());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.values());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
501	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.read());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream(i.read());	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
502	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(recordSize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(recordSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream(recordSize);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
503	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(0,  0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream(0,  0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream(0,  0);	  InputStream    coll    =    new    ByteArrayInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
504	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
505	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
506	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    coll.get(i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
507	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  globalPaxHeaders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  globalPaxHeaders);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    length);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
508	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.pop());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.pop());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.pop());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.peek());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
509	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek(),  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek(),  restLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek(),  restLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.peek());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
510	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
511	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setLenient(0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setLenient(0);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setLenient(0);	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
512	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).clear();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).clear();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).clear();	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
513	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).append('n');  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).append('n');  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).append('n');	  ((    TarArchiveEntry    <    K,    V>)i).setLength(0);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
514	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i).recordSize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i).recordSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i).recordSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.get(i));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
515	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
516	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.hasNext())  {  if(!hasHitEOF)  {  return  coll;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
517	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  2,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  2,  globalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  /  2,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    +    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
518	[BUG]  [BUGGY]  ch  =  IOUtils.readString(coll,  i.read());  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  IOUtils.readString(coll,  i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  IOUtils.readString(coll,  i.read());	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
519	[BUG]  [BUGGY]  ch  =  IOUtils.readFully(remainders,  i.read());  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  IOUtils.readFully(remainders,  i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  IOUtils.readFully(remainders,  i.read());	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
520	[BUG]  [BUGGY]  ch  =  IOUtils.readFully(coll);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  IOUtils.readFully(coll);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  IOUtils.readFully(coll);	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
521	[BUG]  [BUGGY]  ch  =  IOUtils.readInt(coll,  i.read());  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  IOUtils.readInt(coll,  i.read());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  IOUtils.readInt(coll,  i.read());	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
522	[BUG]  [BUGGY]  ch  =  IOUtils.readFully(remainders);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ch  =  IOUtils.readFully(remainders);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  IOUtils.readFully(remainders);	  ch    =    coll.read();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
523	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  i);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  i);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
524	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  height);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  height);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers,  height);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.headers);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
525	[BUG]  [BUGGY]  Integer  i  =  coll.available();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.available();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.available();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
526	[BUG]  [BUGGY]  Integer  i  =  coll.getLongValue();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.getLongValue();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.getLongValue();	  Integer    i    =    coll.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
527	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue(remainder);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  i  =  coll.getIntValue(remainder);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.getIntValue(remainder);	  Integer    i    =    coll.getIntValue();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
528	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(remainder);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  i.readInputStream(remainder);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readInputStream(remainder);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
529	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
530	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
531	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
532	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    return    coll.get(ch);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
533	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  false);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  false);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
534	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null);	  Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    false);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
535	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  totalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  totalPaxHeaders.length);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  totalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length    -    1,    globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
536	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(result.size(),  result);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(result.size(),  result);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(result.size(),  result);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    result);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
537	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  restLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  restLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    result);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
538	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  this.hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  this.hasHitEOF);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  this.hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
539	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  restLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  restLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  restLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet(),    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
540	[BUG]  [BUGGY]  int  len  =  i.getLength();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  int  len  =  i.getLength();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.getLength();	  int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
541	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.hasNext())  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
542	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
543	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    for(int    ch    =    0;    ch    <    len;    ch++)    {    coll.put(ch,    i.read());    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
544	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
545	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  this;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
546	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  col;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    return    coll;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
547	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i.getKey()));  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i.getKey()));  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i.getKey()));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
548	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  i);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  i);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
549	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  replicationSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  replicationSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders),  replicationSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.toArray(remainders));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
550	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  break;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    if(!hasHitEOF)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
551	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.remainder());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.remainder());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.remainder());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
552	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.getKey());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.getKey());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.getKey());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
553	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.getSource());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.getSource());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.getSource());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    i.hasNext());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
554	[BUG]  [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	static  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
555	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet()    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
556	[BUG]  [BUGGY]  InputStream  coll  =  new  BufferedReader(i.inputStream());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  BufferedReader(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  BufferedReader(i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
557	[BUG]  [BUGGY]  InputStream  coll  =  new  FileInputStream(i.getVersion());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  FileInputStream(i.getVersion());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  FileInputStream(i.getVersion());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
558	[BUG]  [BUGGY]  InputStream  coll  =  new  FileInputStream(i.inputStream());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  InputStream  coll  =  new  FileInputStream(i.inputStream());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  FileInputStream(i.inputStream());	  InputStream    coll    =    i.inputStream();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
559	[BUG]  [BUGGY]  Integer  ch  =  this.coll.readInt();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  Integer  ch  =  this.coll.readInt();  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  this.coll.readInt();	  Integer    ch    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
560	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
561	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this.recordSize);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this.recordSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
562	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this.headers);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this.headers);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  this.headers);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    null);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
563	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).encode(zipEncoding);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).encode(zipEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).encode(zipEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
564	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(ARRAYEncoding);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(ARRAYEncoding);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setEncoding(ARRAYEncoding);	  ((    TarArchiveEntry    <    K,    V>)i).setEncoding(encoding);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
565	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize)+  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize)+  1;  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize)+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll.recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
566	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  restLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  restLen);  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF,  restLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
567	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  i.hasNext());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {      [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  i.hasNext());  [BUGGY]        while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  i.hasNext());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
