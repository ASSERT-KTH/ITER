bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  value);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
4	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  true);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
5	[BUG]  [BUGGY]  InputStream  coll  =  i.inputStream();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  InputStream  coll  =  i.inputStream();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.inputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  InputStream  coll  =  new  ByteArrayInputStream();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  new  ByteArrayInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  InputStream  coll  =  i.readInputStream();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readInputStream();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  int  len  =  i.read();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  int  len  =  i.read();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	int  len  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  InputStream  coll  =  i.read();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  InputStream  coll  =  i.read();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  InputStream  coll  =  i.readInput();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  InputStream  coll  =  i.readInput();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  i.readInput();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  ch  =  coll.read();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  ch  =  coll.read();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	ch  =  coll.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.recordSize);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.read);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.read);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.headers);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  2);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  0);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  0,  0);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  4);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  4);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  3);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  3);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  3);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  hasHitEOF);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  dataArea,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  encoding);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  encoding);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  hasHitEOF,  encoding);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.size());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(headers);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  coll);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  true);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.entrySet());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.entrySet());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.entrySet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  true);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size(),  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  null);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true,  false);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true,  false);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  true,  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  2);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  2);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  2);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  *  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  4);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  4);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  4);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i));  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i));  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.get(i));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
49	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  1,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  1,  globalPaxHeaders.length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  2);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  -  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.numRecords);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  3);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  3);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size()  -  3);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
56	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  result);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  result);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  result);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.valueSet());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  hasHitEOF);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.keySet(),  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.keySet());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
60	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  hasHitEOF);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  hasHitEOF);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.clone());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.clone());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders!=  null?  null  :  globalPaxHeaders.clone());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.size);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
64	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  2);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  2);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.length  +  2);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  Integer  ch  =  coll.read();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  Integer  ch  =  coll.read();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  InputStream  coll  =  getGlobalPaxHeaders();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	InputStream  coll  =  getGlobalPaxHeaders();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  Integer  i  =  coll.readInt();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  Integer  i  =  coll.readInt();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.readInt();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setLength(0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setLength(0);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setLength(0);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  Integer  i  =  coll.getIntValue();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  Integer  i  =  coll.getIntValue();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  i  =  coll.getIntValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  Integer  ch  =  coll.readInt();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  Integer  ch  =  coll.readInt();  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Integer  ch  =  coll.readInt();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(encoding);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i).setEncoding(encoding);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	((  TarArchiveEntry  <  K,  V>)i).setEncoding(encoding);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  return  coll;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  coll.close();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  return  coll.get(ch);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  return  coll;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  ch  =  0;  ch  <  len;  ch++)  {  coll.put(ch,  i.read());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  coll.get(i.getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.hasNext());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.hasNext());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  i.hasNext());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
80	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek());  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.peek());	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders));  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders));  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.toArray(remainders));	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.clone());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  restLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  restLen);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values(),  restLen);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
83	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  1;  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders.values())+  1;	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders.values());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
84	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  coll.height);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    coll);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  length);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(remainders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  -1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  -1);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  -1);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    0);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
87	[BUG]  [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  true);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	final  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(remainders,  true);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
88	[BUG]  [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {    [BUGGY]  Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false);  [BUGGY]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	454	454	1	replace	Map  <  String,  String>  headers  =  new  HashMap  <  String,  String>(globalPaxHeaders,  false);	  final    Map    <    String,    String>    headers    =    new    HashMap    <    String,    String>(globalPaxHeaders,    true);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
